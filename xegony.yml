swagger: "2.0"
info:
  description: "Xegony API"
  version: "1.0.0"
  title: "Xegony API"
  contact:
    email: "rebuildeq@gmail.com"  
host: "localhost"
produces:
  - application/json
  - application/xml
  - application/yaml
paths:
  /account:
    get:
      tags: ["Account"]
      description: List all account entries
      operationId: listAccount
      parameters:
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/Account'
    post:
      tags: ["Account"]
      description: Create new account entry
      operationId: createAccount
      security:
        - OauthSecurity: [admin]
      parameters: 
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json       
        - in: body
          name: body
          description: Account
          required: true
          schema:
            $ref: '#/definitions/Account'
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Account'
  /account/{accountId}/details:
    get:
      tags: ["Account"]
      description: Details about a specific account
      operationId: getAccount
      parameters:
        - in: path
          name: accountId
          required: true
          description: ID
          type: integer
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Account'
    put:
      tags: ["Account"]
      description: Edit Account
      operationId: editAccount
      security:
        - OauthSecurity: [moderator, admin]
      parameters:
        - in: path
          name: accountId
          required: true
          description: ID
          type: integer
        - in: body
          name: body
          description: Account
          required: true
          schema:
            $ref: '#/definitions/Account'
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Account'    
    delete:
      tags: ["Account"]
      description: Delete account
      operationId: deleteAccount
      security:
        - OauthSecurity: [admin]
      parameters:
        - in: path
          name: accountId
          required: true
          description: ID of account
          type: integer
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Account'
  /forum:
    get:
      tags: ["Forum"]
      description: List all forum entries
      operationId: listForum
      parameters:
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/Forum'
    post:
      tags: ["Forum"]
      description: Create new forum entry
      operationId: createForum
      security:
        - OauthSecurity: [admin]
      parameters: 
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json       
        - in: body
          name: body
          description: Forum
          required: true
          schema:
            $ref: '#/definitions/Forum'
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Forum'
  /forum/{forumId}/details:
    get:
      tags: ["Forum"]
      description: Details about a specific forum
      operationId: getForum
      parameters:
        - in: path
          name: forumId
          required: true
          description: ID
          type: integer
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Forum'
    put:
      tags: ["Forum"]
      description: Edit Forum
      operationId: editForum
      security:
        - OauthSecurity: [moderator, admin]
      parameters:
        - in: path
          name: forumId
          required: true
          description: ID
          type: integer
        - in: body
          name: body
          description: Forum
          required: true
          schema:
            $ref: '#/definitions/Forum'
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Forum'    
    delete:
      tags: ["Forum"]
      description: Delete forum
      operationId: deleteForum
      security:
        - OauthSecurity: [admin]
      parameters:
        - in: path
          name: forumId
          required: true
          description: ID of forum
          type: integer
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Forum'
  /npc:
    get:
      tags: ["Npc"]
      description: List all npc entries
      operationId: listNpc
      parameters:
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/Npc'
    post:
      tags: ["Npc"]
      description: Create new npc entry
      operationId: createNpc
      security:
        - OauthSecurity: [admin]
      parameters: 
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json       
        - in: body
          name: body
          description: Npc
          required: true
          schema:
            $ref: '#/definitions/Npc'
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Npc'
  /npc/{npcId}/details:
    get:
      tags: ["Npc"]
      description: Details about a specific npc
      operationId: getNpc
      parameters:
        - in: path
          name: npcId
          required: true
          description: ID
          type: integer
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Npc'
    put:
      tags: ["Npc"]
      description: Edit Npc
      operationId: editNpc
      security:
        - OauthSecurity: [moderator, admin]
      parameters:
        - in: path
          name: npcId
          required: true
          description: ID
          type: integer
        - in: body
          name: body
          description: Npc
          required: true
          schema:
            $ref: '#/definitions/Npc'
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Npc'    
    delete:
      tags: ["Npc"]
      description: Delete npc
      operationId: deleteNpc
      security:
        - OauthSecurity: [admin]
      parameters:
        - in: path
          name: npcId
          required: true
          description: ID of npc
          type: integer
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Npc'
  /topic:
    get:
      tags: ["Topic"]
      description: List all topic entries
      operationId: listTopic
      parameters:
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/Topic'
    post:
      tags: ["Topic"]
      description: Create new topic entry
      operationId: createTopic
      security:
        - OauthSecurity: [admin]
      parameters: 
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json       
        - in: body
          name: body
          description: Topic
          required: true
          schema:
            $ref: '#/definitions/Topic'
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Topic'
  /topic/{topicId}/details:
    get:
      tags: ["Topic"]
      description: Details about a specific topic
      operationId: getTopic
      parameters:
        - in: path
          name: topicId
          required: true
          description: ID
          type: integer
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Topic'
    put:
      tags: ["Topic"]
      description: Edit Topic
      operationId: editTopic
      security:
        - OauthSecurity: [moderator, admin]
      parameters:
        - in: path
          name: topicId
          required: true
          description: ID
          type: integer
        - in: body
          name: body
          description: Topic
          required: true
          schema:
            $ref: '#/definitions/Topic'
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Topic'    
    delete:
      tags: ["Topic"]
      description: Delete topic
      operationId: deleteTopic
      security:
        - OauthSecurity: [admin]
      parameters:
        - in: path
          name: topicId
          required: true
          description: ID of topic
          type: integer
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Topic'
  /character:
    get:
      tags: ["Character"]
      description: List all characters
      operationId: listCharacter
      parameters:
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/Character'
    post:
      tags: ["Character"]
      description: Create new character
      operationId: createCharacter
      security:
        - OauthSecurity: [admin]
      parameters: 
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json       
        - in: body
          name: body
          description: Character
          required: true
          schema:
            $ref: '#/definitions/Character'
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Character'
  /character/{characterId}/details:
    get:
      tags: ["Character"]
      description: Details about a specific character
      operationId: getCharacter
      parameters:
        - in: path
          name: characterId
          required: true
          description: ID
          type: integer
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Character'
    put:
      tags: ["Character"]
      description: Edit Character
      operationId: editCharacter
      security:
        - OauthSecurity: [moderator, admin]
      parameters:
        - in: path
          name: characterId
          required: true
          description: ID
          type: integer
        - in: body
          name: body
          description: Character
          required: true
          schema:
            $ref: '#/definitions/Character'
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Character'    
    delete:
      tags: ["Character"]
      description: Delete character
      operationId: deleteCharacter
      security:
        - OauthSecurity: [admin]
      parameters:
        - in: path
          name: characterId
          required: true
          description: ID of character
          type: integer
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/Character'
  /user:
    get:
      tags: ["User"]
      description: Get a list of all users
      operationId: listUser
      parameters:
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      tags: ["User"]
      description: Create new user
      operationId: createUser
      parameters: 
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json       
        - in: body
          name: body
          description: User details
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/User'
  /user/{userId}/details:
    get:
      tags: ["User"]
      description: Obtain details about a User
      operationId: getUser
      parameters:
        - in: path
          name: userId
          required: true
          description: user ID
          type: integer
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/User'
    put:
      tags: ["User"]
      description: Edit user details
      operationId: editUser
      security:
        - OauthSecurity: [owner, moderator, admin]
      parameters:
        - in: path
          name: userId
          required: true
          description: user ID
          type: integer
        - in: body
          name: body
          description: User details to edit
          required: true
          schema:
            $ref: '#/definitions/User'
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/User'    
    delete:
      tags: ["User"]
      description: Delete user
      operationId: deleteUser
      security:
        - OauthSecurity: [admin]
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of user
          type: integer
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/User'  
  /login:
    post:
      tags: ["Login"]
      description: Log in to system
      operationId: postLogin
      parameters: 
        - in: query
          type: string
          name: format
          enum: [json, xml, yaml]
          default: json       
        - in: body
          name: body
          description: Login details
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: '200 / OK'
          schema:
            $ref: '#/definitions/User'  
definitions:
  Account:
    type: object
    properties:
      id:
        type: integer
        example: 1234
        description: ID
      status:
        type: integer
        example: Status of account
      name:
        type: string
  Character:
    type: object
    properties:
      id:
        type: integer
        example: 1234
        description: Unique game ID
      name:
        type: string
        example: Bother your neighbor
      image:
        type: string
        description: large photo
        example: /foo/bar.png
      thumbnail:
        type: string
        description: thumbnail photo
        example: /foo/bar.png
  Forum:
    type: object
    properties:
      id:
        type: integer
        example: 1234
        description: Unique user ID
      name:
        type: string
        description: Name user is displayed as
        example: testuser 
  Npc:
    type: object
    properties:
      id:
        type: integer
        example: 1234
        description: Unique user ID
      name:
        type: string
        description: Name user is displayed as
        example: testuser     
  Topic:
    type: object
    properties:
      id:
        type: integer
        example: 1234
        description: Unique user ID
      name:
        type: string
        description: Name user is displayed as
        example: testuser 
  User:
    type: object
    properties:
      id:
        type: integer
        example: 1234
        description: Unique user ID
      name:
        type: string
        description: Name user is displayed as
        example: testuser
      email:
        type: string
        description: Email address of user
        example: test@here.com      
securityDefinitions:
  ApiKey:
    type: apiKey
    name: Authorization
    in: header
  OauthSecurity:
    type: oauth2
    flow: accessCode
    authorizationUrl: 'http://localhost/authorization'
    tokenUrl: 'http://localhost/token'
    scopes:
      admin: Administrator
      moderator: Moderator scope
      owner: Owner scope
  Session:
    type: apiKey
    name: session
    in: query
externalDocs:
  description: "Find out more about Xegony"
  url: "github.com/xackery/xegony"