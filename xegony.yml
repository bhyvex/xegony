#https://raw.githubusercontent.com/swagger-api/swagger-codegen/master/modules/swagger-codegen/src/test/resources/2_0/petstore.yaml
swagger: '2.0'
info:
  title: Xegony API
  termsOfService: 'http://github.com/xackery/xegony/'
  description: Endpoints of the Xegony Editor for the Everquest Emulator (EQEMU)
  version: '0.1'
  #contact: 'shinnoir at eqemu forums'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
produces:
  - application/json
host: localhost
basePath: /
# PATHS
paths:
  /character:
    post:
      tags:
        - character
      summary: Add a new character to server
      description: ''
      operationId: addCharacter
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Character data
          required: true
          schema:
            $ref: '#/definitions/Character'
      responses:
        '405':
          description: Invalid input
      security:
        - OAuth:
            - 'write:characters'
    put:
      tags:
        - character
      summary: Update an existing character
      description: ''
      operationId: updateCharacter
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Character data
          required: true
          schema:
            $ref: '#/definitions/Character'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Character not found
        '405':
          description: Validation exception
      security:
        - OAuth:
            - 'write:characters'
    delete:
      tags:
        - character
      summary: Deletes a character
      description: ''
      operationId: deleteCharacter
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body          
          description: Character data
          required: true
          schema:
            $ref: '#/definitions/Character'
        - name: api_key
          in: header
          required: false
          type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Character not found
        '405':
          description: Validation exception
      security:
        - OAuth:
            - 'write:characters'
  /character/findByAccountId:
    get:
      summary: List all characters owned by provided account
      operationId: findCharactersByAccountId
      consumes:
        - application/json
      produces:
        - application/json
      security: 
        - OAuth: 
          - 'read:characters'
      tags: 
        - character
      parameters:
        - name: limit
          in: query
          description: How many characters to return at once (max 10)
          required: false
          type: integer
          format: int32
        - name: accountId
          in: query
          required: true
          description: The id of the account to retrieve characters based on
          type: integer
          format: int32
      responses:
        "200":
          description: A paged array of characters
          headers:
            x-next:
              type: string
              description: A link to the next page of responses
          schema:
            type: array
            items:
              $ref: '#/definitions/Characters'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorUnexpected'
  /character/{characterId}:
    get:
      summary: Get information about a specific character
      operationId: getCharacter
      consumes:
        - application/json
      produces:
        - application/json
      tags: 
        - character
      parameters:
        - name: characterId
          in: path
          required: true
          description: The id of the character to retrieve
          type: integer
          format: int32
      responses:
        "200":
          description: Character element          
          schema:
            $ref: '#/definitions/Character'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorUnexpected'
  /character/findByName:
    get:
      summary: List all characters that match search
      operationId: findCharactersByName
      consumes:
        - application/json
      produces:
        - application/json
      security: 
        - OAuth: 
          - 'read:characters'
      tags: 
        - character
      parameters:
        - name: limit
          in: query
          description: How many characters to return at once (max 10)
          required: false
          type: integer
          format: int32
        - name: name
          in: query
          required: true
          description: The name of the character
          type: integer
          format: int32
      responses:
        "200":
          description: A paged array of characters
          headers:
            x-next:
              type: string
              description: A link to the next page of responses
          schema:
            type: array
            items:
              $ref: '#/definitions/Characters'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorUnexpected'      
  /npc:
    post:
      tags:
        - npc
      summary: Add a new npc to server
      description: ''
      operationId: addNpc
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Npc data
          required: true
          schema:
            $ref: '#/definitions/Npc'
      responses:
        '405':
          description: Invalid input
      security:
        - OAuth:
            - 'write:npcs'
    put:
      tags:
        - npc
      summary: Update an existing npc
      description: ''
      operationId: updateNpc
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Npc data
          required: true
          schema:
            $ref: '#/definitions/Npc'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Npc not found
        '405':
          description: Validation exception
      security:
        - OAuth:
            - 'write:npcs'
  /npc/findByZoneId:
    get:
      summary: List all npcs found in provided zoneid
      operationId: findNpcsByZoneId
      consumes:
        - application/json
      produces:
        - application/json
      security: 
        - OAuth: 
          - 'read:npcs'
      tags: 
        - npc
      parameters:
        - name: limit
          in: query
          description: How many npcs to return at once (max 10)
          required: false
          type: integer
          format: int32
        - name: zoneId
          in: query
          required: true
          description: The id of the zone to retrieve npcs based on
          type: integer
          format: int32
      responses:
        "200":
          description: A paged array of npcs
          headers:
            x-next:
              type: string
              description: A link to the next page of responses
          schema:
            type: array
            items:
              $ref: '#/definitions/Npcs'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorUnexpected'
  /npc/{npcId}:
    get:
      summary: Get information about a specific npc
      operationId: getNpc
      consumes:
        - application/json
      produces:
        - application/json
      tags: 
        - npc
      parameters:
        - name: npcId
          in: path
          required: true
          description: The id of the npc to retrieve
          type: integer
          format: int32
      responses:
        "200":
          description: Npc element          
          schema:
            $ref: '#/definitions/Npc'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorUnexpected'
  /npc/findByName:
    get:
      summary: List all npcs that match search
      operationId: findNpcsByName
      consumes:
        - application/json
      produces:
        - application/json
      security: 
        - OAuth: 
          - 'read:npcs'
      tags: 
        - npc
      parameters:
        - name: limit
          in: query
          description: How many npcs to return at once (max 10)
          required: false
          type: integer
          format: int32
        - name: name
          in: query
          required: true
          description: The name of the npc
          type: integer
          format: int32
      responses:
        "200":
          description: A paged array of npcs
          headers:
            x-next:
              type: string
              description: A link to the next page of responses
          schema:
            type: array
            items:
              $ref: '#/definitions/Npcs'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorUnexpected'
  /zones:
    get:
      summary: List all zones based on parameters
      operationId: listZones
      consumes:
        - application/json
      produces:
        - application/json
      tags: 
        - zone
      parameters:
        - name: limit
          in: query
          description: How many zones to return at once (max 10)
          required: false
          type: integer
          format: int32
      responses:
        "200":
          description: A paged array of zones
          headers:
            x-next:
              type: string
              description: A link to the next page of responses
          schema:            
            type: array
            items:
              $ref: '#/definitions/Zones'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorUnexpected'          
  /zone/{zoneId}:
    get:
      summary: Get information about a specific zone
      operationId: getZone
      consumes:
        - application/json
      produces:
        - application/json
      tags: 
        - zone
      parameters:
        - name: zoneId
          in: path
          required: true
          description: The id of the zone to retrieve
          type: integer
          format: int32
      responses:
        "200":
          description: Zone element
          schema:
            $ref: '#/definitions/Zone'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorUnexpected'
  /items:
    get:
      summary: List all items based on parameters
      operationId: listItems
      consumes:
        - application/json
      produces:
        - application/json
      tags: 
        - item
      parameters:
        - name: limit
          in: query
          description: How many items to return at once (max 10)
          required: false
          type: integer
          format: int32
      responses:
        "200":
          description: A paged array of items
          headers:
            x-next:
              type: string
              description: A link to the next page of responses
          schema:            
            type: array
            items:
              $ref: '#/definitions/Items'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorUnexpected'          
  /item/{itemId}:
    get:
      summary: Get information about a specific item
      operationId: getItem
      consumes:
        - application/json
      produces:
        - application/json
      tags: 
        - item
      parameters:
        - name: itemId
          in: path
          required: true
          description: The id of the item to retrieve
          type: integer
          format: int32
      responses:
        "200":
          description: Item element
          schema:
            $ref: '#/definitions/Item'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorUnexpected'
  /quests:
    get:
      summary: List all quests based on parameters
      operationId: listQuests
      consumes:
        - application/json
      produces:
        - application/json
      tags: 
        - quest
      parameters:
        - name: limit
          in: query
          description: How many quests to return at once (max 10)
          required: false
          type: integer
          format: int32
      responses:
        "200":
          description: A paged array of quests
          headers:
            x-next:
              type: string
              description: A link to the next page of responses
          schema:
            type: array
            items:
              $ref: '#/definitions/Quests'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorUnexpected'          
  /quest/{questId}:
    get:
      summary: Get information about a specific quest
      operationId: getQuest
      consumes:
        - application/json
      produces:
        - application/json
      tags: 
        - quest
      parameters:
        - name: questId
          in: path
          required: true
          description: The id of the quest to retrieve
          type: integer
          format: int32
      responses:
        "200":
          description: Quest element
          schema:
            $ref: '#/definitions/Quest'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorUnexpected'
  /recipes:
    get:
      summary: List all recipes based on parameters
      operationId: listRecipes
      consumes:
        - application/json
      produces:
        - application/json
      tags: 
        - recipe
      parameters:
        - name: limit
          in: query
          description: How many recipes to return at once (max 10)
          required: false
          type: integer
          format: int32
      responses:
        "200":
          description: A paged array of recipes
          headers:
            x-next:
              type: string
              description: A link to the next page of responses
          schema:            
            type: array
            items:
              $ref: '#/definitions/Recipes'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorUnexpected'          
  /recipe/{recipeId}:
    get:
      summary: Get information about a specific recipe
      operationId: getRecipe
      consumes:
        - application/json
      produces:
        - application/json
      tags: 
        - recipe
      parameters:
        - name: recipeId
          in: path
          required: true
          description: The id of the recipe to retrieve
          type: integer
          format: int32
      responses:
        "200":
          description: Recipe element
          schema:
            $ref: '#/definitions/Recipe'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorUnexpected'
# MODEL DEFINITIONS            
definitions:
  Characters:
    type: array
    items:
      $ref: '#/definitions/Character'
  Character:
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Npcs:
    type: array
    items:
      $ref: '#/definitions/Npc'
  Npc:
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Zones:
    type: array
    items:
      $ref: '#/definitions/Zone'
  Zone:
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Items:
    type: array
    items:
      $ref: '#/definitions/Item'
  Item:
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Quests:
    type: array
    items:
      $ref: '#/definitions/Quest'
  Quest:
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Recipes:
    type: array
    items:
      $ref: '#/definitions/Recipe'
  Recipe:
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  ErrorUnexpected:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
# SECURITY DEFINITIONS
securityDefinitions:
  OAuth:
    type: oauth2
    flow: accessCode
    authorizationUrl: http://localhost
    tokenUrl: https://localhost/oauth/token
    scopes:
      'write:characters': modify character data
      'read:characters': read character data
      'write:npcs': modify character data
      'read:npcs': read character data
  api_key:
    type: apiKey
    name: api_key
    in: header