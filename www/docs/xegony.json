{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json",
    "application/xml",
    "application/yaml"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Xegony API.",
    "contact": {
      "name": "Xackery",
      "email": "xackery@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "host": "localhost:8080",
  "basePath": "/api",
  "paths": {
    "/account": {
      "get": {
        "description": "This will show all available accounts by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "account"
        ],
        "summary": "Lists accounts",
        "operationId": "listAccount",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccountsResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an account",
        "tags": [
          "account"
        ],
        "summary": "Create an account",
        "operationId": "createAccount",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Account",
            "description": "Account details to create",
            "name": "account",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccountResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/account/search": {
      "get": {
        "description": "This will show all available accounts by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "account"
        ],
        "summary": "Search accounts by name",
        "operationId": "listAccountBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "Name",
            "description": "Name is which account to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccountsBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/account/{ID}": {
      "get": {
        "description": "This will get an individual account available accounts by default.",
        "tags": [
          "account"
        ],
        "summary": "Get an account",
        "operationId": "getAccount",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccountResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an account",
        "tags": [
          "account"
        ],
        "summary": "Edit an account",
        "operationId": "editAccount",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Account",
            "description": "Account details to edit",
            "name": "account",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccountResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an account",
        "tags": [
          "account"
        ],
        "summary": "Delete an account",
        "operationId": "deleteAccount",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/character": {
      "get": {
        "description": "This will show all available characters by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "character"
        ],
        "summary": "Lists characters",
        "operationId": "listCharacter",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CharactersResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an character",
        "tags": [
          "character"
        ],
        "summary": "Create an character",
        "operationId": "createCharacter",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Character",
            "description": "Character details to create",
            "name": "character",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Character"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CharacterResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/character/search": {
      "get": {
        "description": "This will show all available characters by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "character"
        ],
        "summary": "Search characters by name",
        "operationId": "listCharacterBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "Name",
            "description": "Name is which character to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CharactersBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/character/{ID}": {
      "get": {
        "description": "This will get an individual character available characters by default.",
        "tags": [
          "character"
        ],
        "summary": "Get an character",
        "operationId": "getCharacter",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CharacterResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an character",
        "tags": [
          "character"
        ],
        "summary": "Edit an character",
        "operationId": "editCharacter",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Character",
            "description": "Character details to edit",
            "name": "character",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Character"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CharacterResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an character",
        "tags": [
          "character"
        ],
        "summary": "Delete an character",
        "operationId": "deleteCharacter",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/character/{ID}/inventory": {
      "get": {
        "description": "This will get an individual character as well as inventory",
        "tags": [
          "character"
        ],
        "summary": "Get a character's inventory",
        "operationId": "getCharacterInventory",
        "responses": {
          "200": {
            "$ref": "#/responses/CharacterInventoryResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/class": {
      "get": {
        "description": "This will show all available classs by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "class"
        ],
        "summary": "Lists classs",
        "operationId": "listClass",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ClasssResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an class",
        "tags": [
          "class"
        ],
        "summary": "Create an class",
        "operationId": "createClass",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Class",
            "description": "Class details to create",
            "name": "class",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Class"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ClassResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/class/search": {
      "get": {
        "description": "This will show all available classs by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "class"
        ],
        "summary": "Search classs by name",
        "operationId": "listClassBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "Name",
            "description": "Name is which class to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ClasssBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/class/{ID}": {
      "get": {
        "description": "This will get an individual class available classs by default.",
        "tags": [
          "class"
        ],
        "summary": "Get an class",
        "operationId": "getClass",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ClassResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an class",
        "tags": [
          "class"
        ],
        "summary": "Edit an class",
        "operationId": "editClass",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Class",
            "description": "Class details to edit",
            "name": "class",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Class"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ClassResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an class",
        "tags": [
          "class"
        ],
        "summary": "Delete an class",
        "operationId": "deleteClass",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/config": {
      "get": {
        "description": "This will show all available configs by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "config"
        ],
        "summary": "Lists configs",
        "operationId": "listConfig",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ConfigsResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an config",
        "tags": [
          "config"
        ],
        "summary": "Create an config",
        "operationId": "createConfig",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Config",
            "description": "Config details to create",
            "name": "config",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Config"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ConfigResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/config/search": {
      "get": {
        "description": "This will show all available configs by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "config"
        ],
        "summary": "Search configs by name",
        "operationId": "listConfigBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "googleToken",
            "x-go-name": "Key",
            "description": "Key is which config to get information about",
            "name": "key",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "key",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ConfigsBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/config/{key}": {
      "get": {
        "description": "This will get an individual config available configs by default.",
        "tags": [
          "config"
        ],
        "summary": "Get an config",
        "operationId": "getConfig",
        "parameters": [
          {
            "type": "string",
            "example": "74887",
            "x-go-name": "Key",
            "description": "Key to get information about",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ConfigResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an config",
        "tags": [
          "config"
        ],
        "summary": "Edit an config",
        "operationId": "editConfig",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "example": "googleToken",
            "x-go-name": "Key",
            "description": "Key to get information about",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Config",
            "description": "Config details to edit",
            "name": "config",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Config"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ConfigResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an config",
        "tags": [
          "config"
        ],
        "summary": "Delete an config",
        "operationId": "deleteConfig",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "example": "74887",
            "x-go-name": "Key",
            "description": "Key to get information about",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/deity": {
      "get": {
        "description": "This will show all available deitys by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "deity"
        ],
        "summary": "Lists deitys",
        "operationId": "listDeity",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeitysResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an deity",
        "tags": [
          "deity"
        ],
        "summary": "Create an deity",
        "operationId": "createDeity",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Deity",
            "description": "Deity details to create",
            "name": "deity",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Deity"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeityResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/deity/search": {
      "get": {
        "description": "This will show all available deitys by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "deity"
        ],
        "summary": "Search deitys by name",
        "operationId": "listDeityBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "Name",
            "description": "Name is which deity to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeitysBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/deity/{ID}": {
      "get": {
        "description": "This will get an individual deity available deitys by default.",
        "tags": [
          "deity"
        ],
        "summary": "Get an deity",
        "operationId": "getDeity",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeityResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an deity",
        "tags": [
          "deity"
        ],
        "summary": "Edit an deity",
        "operationId": "editDeity",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Deity",
            "description": "Deity details to edit",
            "name": "deity",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Deity"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeityResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an deity",
        "tags": [
          "deity"
        ],
        "summary": "Delete an deity",
        "operationId": "deleteDeity",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/forum": {
      "get": {
        "description": "This will show all available forums by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "forum"
        ],
        "summary": "Lists forums",
        "operationId": "listForum",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ForumsResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an forum",
        "tags": [
          "forum"
        ],
        "summary": "Create an forum",
        "operationId": "createForum",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Forum",
            "description": "Forum details to create",
            "name": "forum",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Forum"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ForumResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/forum/search": {
      "get": {
        "description": "This will show all available forums by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "forum"
        ],
        "summary": "Search forums by name",
        "operationId": "listForumBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "heal",
            "x-go-name": "Name",
            "description": "Name is which forum to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ForumsBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/forum/{ID}": {
      "get": {
        "description": "This will get an individual forum available forums by default.",
        "tags": [
          "forum"
        ],
        "summary": "Get an forum",
        "operationId": "getForum",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 12,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ForumResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an forum",
        "tags": [
          "forum"
        ],
        "summary": "Edit an forum",
        "operationId": "editForum",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 12,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Forum",
            "description": "Forum details to edit",
            "name": "forum",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Forum"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ForumResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an forum",
        "tags": [
          "forum"
        ],
        "summary": "Delete an forum",
        "operationId": "deleteForum",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 12,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/item": {
      "get": {
        "description": "This will show all available items by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "item"
        ],
        "summary": "Lists items",
        "operationId": "listItem",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ItemsResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an item",
        "tags": [
          "item"
        ],
        "summary": "Create an item",
        "operationId": "createItem",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Item",
            "description": "Item details to create",
            "name": "item",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ItemResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/item/search": {
      "get": {
        "description": "This will show all available items by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "item"
        ],
        "summary": "Search items by name",
        "operationId": "listItemBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "singing short sword",
            "x-go-name": "Name",
            "description": "Name is which item to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ItemsBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/item/{ID}": {
      "get": {
        "description": "This will get an individual item available items by default.",
        "tags": [
          "item"
        ],
        "summary": "Get an item",
        "operationId": "getItem",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ItemResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an item",
        "tags": [
          "item"
        ],
        "summary": "Edit an item",
        "operationId": "editItem",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Item",
            "description": "Item details to edit",
            "name": "item",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ItemResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an item",
        "tags": [
          "item"
        ],
        "summary": "Delete an item",
        "operationId": "deleteItem",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/npc": {
      "get": {
        "description": "This will show all available npcs by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "npc"
        ],
        "summary": "Lists npcs",
        "operationId": "listNpc",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NpcsResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an npc",
        "tags": [
          "npc"
        ],
        "summary": "Create an npc",
        "operationId": "createNpc",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Npc",
            "description": "Npc details to create",
            "name": "npc",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Npc"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NpcResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/npc/search": {
      "get": {
        "description": "This will show all available npcs by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "npc"
        ],
        "summary": "Search npcs by name",
        "operationId": "listNpcBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "heal",
            "x-go-name": "Name",
            "description": "Name is which npc to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NpcsBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/npc/{ID}": {
      "get": {
        "description": "This will get an individual npc available npcs by default.",
        "tags": [
          "npc"
        ],
        "summary": "Get an npc",
        "operationId": "getNpc",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 12,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NpcResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an npc",
        "tags": [
          "npc"
        ],
        "summary": "Edit an npc",
        "operationId": "editNpc",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 12,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Npc",
            "description": "Npc details to edit",
            "name": "npc",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Npc"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NpcResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an npc",
        "tags": [
          "npc"
        ],
        "summary": "Delete an npc",
        "operationId": "deleteNpc",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 12,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/oauth/type": {
      "get": {
        "description": "This will show all available oauthTypes by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "oauthType"
        ],
        "summary": "Lists oauthTypes",
        "operationId": "listOauthType",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OauthTypesResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an oauthType",
        "tags": [
          "oauthType"
        ],
        "summary": "Create an oauthType",
        "operationId": "createOauthType",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "OauthType",
            "description": "OauthType details to create",
            "name": "oauthType",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OauthType"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OauthTypeResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/oauth/type/search": {
      "get": {
        "description": "This will show all available oauthTypes by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "oauthType"
        ],
        "summary": "Search oauthTypes by name",
        "operationId": "listOauthTypeBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "Name",
            "description": "Name is which oauthType to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OauthTypesBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/oauth/type/{ID}": {
      "get": {
        "description": "This will get an individual oauthType available oauthTypes by default.",
        "tags": [
          "oauthType"
        ],
        "summary": "Get an oauthType",
        "operationId": "getOauthType",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OauthTypeResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an oauthType",
        "tags": [
          "oauthType"
        ],
        "summary": "Edit an oauthType",
        "operationId": "editOauthType",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "OauthType",
            "description": "OauthType details to edit",
            "name": "oauthType",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OauthType"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OauthTypeResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an oauthType",
        "tags": [
          "oauthType"
        ],
        "summary": "Delete an oauthType",
        "operationId": "deleteOauthType",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/race": {
      "get": {
        "description": "This will show all available races by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "race"
        ],
        "summary": "Lists races",
        "operationId": "listRace",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RacesResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an race",
        "tags": [
          "race"
        ],
        "summary": "Create an race",
        "operationId": "createRace",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Race",
            "description": "Race details to create",
            "name": "race",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Race"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RaceResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/race/search": {
      "get": {
        "description": "This will show all available races by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "race"
        ],
        "summary": "Search races by name",
        "operationId": "listRaceBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "Name",
            "description": "Name is which race to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RacesBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/race/{ID}": {
      "get": {
        "description": "This will get an individual race available races by default.",
        "tags": [
          "race"
        ],
        "summary": "Get an race",
        "operationId": "getRace",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RaceResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an race",
        "tags": [
          "race"
        ],
        "summary": "Edit an race",
        "operationId": "editRace",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Race",
            "description": "Race details to edit",
            "name": "race",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Race"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RaceResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an race",
        "tags": [
          "race"
        ],
        "summary": "Delete an race",
        "operationId": "deleteRace",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/rule": {
      "get": {
        "description": "This will show all available rules by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "rule"
        ],
        "summary": "Lists rules",
        "operationId": "listRule",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RulesResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an rule",
        "tags": [
          "rule"
        ],
        "summary": "Create an rule",
        "operationId": "createRule",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Rule",
            "description": "Rule details to create",
            "name": "rule",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Rule"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RuleResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/rule/search": {
      "get": {
        "description": "This will show all available rules by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "rule"
        ],
        "summary": "Search rules by name",
        "operationId": "listRuleBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "ShortName",
            "description": "ShortName is which rule to get information about",
            "name": "shortName",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "short_name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RulesBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/rule/{ID}": {
      "get": {
        "description": "This will get an individual rule available rules by default.",
        "tags": [
          "rule"
        ],
        "summary": "Get an rule",
        "operationId": "getRule",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RuleResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an rule",
        "tags": [
          "rule"
        ],
        "summary": "Edit an rule",
        "operationId": "editRule",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Rule",
            "description": "Rule details to edit",
            "name": "rule",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Rule"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RuleResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an rule",
        "tags": [
          "rule"
        ],
        "summary": "Delete an rule",
        "operationId": "deleteRule",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/rule/{ruleID}/entry": {
      "get": {
        "description": "This will show all available ruleEntrys by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "rule"
        ],
        "summary": "Lists ruleEntrys",
        "operationId": "listRuleEntry",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "RuleID",
            "description": "RuleID to get information about",
            "name": "ruleID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RuleEntrysResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/rule/{ruleID}/entry/search": {
      "get": {
        "description": "This will show all available ruleEntrys by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "rule"
        ],
        "summary": "Search ruleEntrys by name",
        "operationId": "listRuleEntryBySearch",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "RuleID",
            "description": "RuleID to get information about",
            "name": "ruleID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "AA:ExpPerPoint",
            "x-go-name": "Name",
            "description": "Name is which ruleEntry to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RuleEntrysBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/rule/{ruleID}/entry/{Name}": {
      "get": {
        "description": "This will get an individual ruleEntry available ruleEntrys by default.",
        "tags": [
          "rule"
        ],
        "summary": "Get an ruleEntry",
        "operationId": "getRuleEntry",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "RuleID",
            "description": "RuleID to get information about",
            "name": "ruleID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "AA:ExpPerPoint",
            "x-go-name": "Name",
            "description": "Name to get information about",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RuleEntryResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an ruleEntry",
        "tags": [
          "rule"
        ],
        "summary": "Edit an ruleEntry",
        "operationId": "editRuleEntry",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "RuleID",
            "description": "RuleID to get information about",
            "name": "ruleID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "RuleID to get information about",
            "name": "RuleID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "AA:ExpPerPoint",
            "x-go-name": "Name",
            "description": "name to get information about",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RuleEntry",
            "description": "RuleEntry details to edit",
            "name": "ruleEntry",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RuleEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RuleEntryResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an ruleEntry",
        "tags": [
          "rule"
        ],
        "summary": "Create an ruleEntry",
        "operationId": "createRuleEntry",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "RuleID",
            "description": "RuleID to get information about",
            "name": "ruleID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "RuleEntry",
            "description": "RuleEntry details to create",
            "name": "ruleEntry",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RuleEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RuleEntryResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an ruleEntry",
        "tags": [
          "rule"
        ],
        "summary": "Delete an ruleEntry",
        "operationId": "deleteRuleEntry",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "RuleID",
            "description": "RuleID to get information about",
            "name": "ruleID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "AA:ExpPerPoint",
            "x-go-name": "Name",
            "description": "Name to get information about",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spawn": {
      "get": {
        "description": "This will show all available spawns by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spawn"
        ],
        "summary": "Lists spawns",
        "operationId": "listSpawn",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpawnsResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an spawn",
        "tags": [
          "spawn"
        ],
        "summary": "Create an spawn",
        "operationId": "createSpawn",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Spawn",
            "description": "Spawn details to create",
            "name": "spawn",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Spawn"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpawnResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spawn/search": {
      "get": {
        "description": "This will show all available spawns by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spawn"
        ],
        "summary": "Search spawns by name",
        "operationId": "listSpawnBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "heal",
            "x-go-name": "Name",
            "description": "Name is which spawn to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpawnsBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spawn/{ID}": {
      "get": {
        "description": "This will get an individual spawn available spawns by default.",
        "tags": [
          "spawn"
        ],
        "summary": "Get an spawn",
        "operationId": "getSpawn",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 12,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpawnResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an spawn",
        "tags": [
          "spawn"
        ],
        "summary": "Edit an spawn",
        "operationId": "editSpawn",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 12,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Spawn",
            "description": "Spawn details to edit",
            "name": "spawn",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Spawn"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpawnResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an spawn",
        "tags": [
          "spawn"
        ],
        "summary": "Delete an spawn",
        "operationId": "deleteSpawn",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 12,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spawn/{spawnID}/entry": {
      "get": {
        "description": "This will show all available spawnEntrys by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spawn"
        ],
        "summary": "Lists spawnEntrys",
        "operationId": "listSpawnEntry",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "SpawnID",
            "description": "SpawnID to get information about",
            "name": "spawnID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpawnEntrysResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spawn/{spawnID}/entry/search": {
      "get": {
        "description": "This will show all available spawnEntrys by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spawn"
        ],
        "summary": "Search spawnEntrys by entryid",
        "operationId": "listSpawnEntryBySearch",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "SpawnID",
            "description": "SpawnID to get information about",
            "name": "spawnID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 55091,
            "x-go-name": "EntryID",
            "description": "EntryID is which spawnEntry to get information about",
            "name": "entryID",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpawnEntrysBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spawn/{spawnID}/entry/{entryID}": {
      "get": {
        "description": "This will get an individual spawnEntry available spawnEntrys by default.",
        "tags": [
          "spawn"
        ],
        "summary": "Get an spawnEntry",
        "operationId": "getSpawnEntry",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "SpawnID",
            "description": "SpawnID to get information about",
            "name": "spawnID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 55091,
            "x-go-name": "EntryID",
            "description": "EntryID to get information about",
            "name": "entryID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpawnEntryResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an spawnEntry",
        "tags": [
          "spawn"
        ],
        "summary": "Edit an spawnEntry",
        "operationId": "editSpawnEntry",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "SpawnID",
            "description": "SpawnID to get information about",
            "name": "spawnID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "SpawnID to get information about",
            "name": "SpawnID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 55091,
            "x-go-name": "EntryID",
            "description": "EntryID to get information about",
            "name": "entryID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "SpawnEntry",
            "description": "SpawnEntry details to edit",
            "name": "spawnEntry",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpawnEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpawnEntryResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an spawnEntry",
        "tags": [
          "spawn"
        ],
        "summary": "Create an spawnEntry",
        "operationId": "createSpawnEntry",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "SpawnID",
            "description": "SpawnID to get information about",
            "name": "spawnID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "SpawnEntry",
            "description": "SpawnEntry details to create",
            "name": "spawnEntry",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpawnEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpawnEntryResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an spawnEntry",
        "tags": [
          "spawn"
        ],
        "summary": "Delete an spawnEntry",
        "operationId": "deleteSpawnEntry",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "SpawnID",
            "description": "SpawnID to get information about",
            "name": "spawnID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 55091,
            "x-go-name": "EntryID",
            "description": "EntryID to get information about",
            "name": "entryID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spawn/{spawnID}/npc": {
      "get": {
        "description": "This will show all available spawnNpcs by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spawn"
        ],
        "summary": "Lists spawnNpcs",
        "operationId": "listSpawnNpc",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "SpawnID",
            "description": "SpawnID to get information about",
            "name": "spawnID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "npcid",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpawnNpcsResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spawn/{spawnID}/npc/search": {
      "get": {
        "description": "This will show all available spawnNpcs by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spawn"
        ],
        "summary": "Search spawnNpcs by npcid",
        "operationId": "listSpawnNpcBySearch",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "SpawnID",
            "description": "SpawnID to get information about",
            "name": "spawnID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 55091,
            "x-go-name": "NpcID",
            "description": "NpcID is which spawnNpc to get information about",
            "name": "npcID",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "npcid",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpawnNpcsBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spawn/{spawnID}/npc/{npcID}": {
      "get": {
        "description": "This will get an individual spawnNpc available spawnNpcs by default.",
        "tags": [
          "spawn"
        ],
        "summary": "Get an spawnNpc",
        "operationId": "getSpawnNpc",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "SpawnID",
            "description": "SpawnID to get information about",
            "name": "spawnID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 55091,
            "x-go-name": "NpcID",
            "description": "NpcID to get information about",
            "name": "npcID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpawnNpcResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an spawnNpc",
        "tags": [
          "spawn"
        ],
        "summary": "Edit an spawnNpc",
        "operationId": "editSpawnNpc",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "SpawnID",
            "description": "SpawnID to get information about",
            "name": "spawnID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "SpawnID to get information about",
            "name": "SpawnID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 55091,
            "x-go-name": "NpcID",
            "description": "NpcID to get information about",
            "name": "npcID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "SpawnNpc",
            "description": "SpawnNpc details to edit",
            "name": "spawnNpc",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpawnNpc"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpawnNpcResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an spawnNpc",
        "tags": [
          "spawn"
        ],
        "summary": "Create an spawnNpc",
        "operationId": "createSpawnNpc",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "SpawnID",
            "description": "SpawnID to get information about",
            "name": "spawnID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "SpawnNpc",
            "description": "SpawnNpc details to create",
            "name": "spawnNpc",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpawnNpc"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpawnNpcResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an spawnNpc",
        "tags": [
          "spawn"
        ],
        "summary": "Delete an spawnNpc",
        "operationId": "deleteSpawnNpc",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "SpawnID",
            "description": "SpawnID to get information about",
            "name": "spawnID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 55091,
            "x-go-name": "NpcID",
            "description": "NpcID to get information about",
            "name": "npcID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell": {
      "get": {
        "description": "This will show all available spells by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spell"
        ],
        "summary": "Lists spells",
        "operationId": "listSpell",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellsResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an spell",
        "tags": [
          "spell"
        ],
        "summary": "Create an spell",
        "operationId": "createSpell",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Spell",
            "description": "Spell details to create",
            "name": "spell",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Spell"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/animation": {
      "get": {
        "description": "This will show all available spellAnimations by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spellAnimation"
        ],
        "summary": "Lists spellAnimations",
        "operationId": "listSpellAnimation",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellAnimationsResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an spellAnimation",
        "tags": [
          "spellAnimation"
        ],
        "summary": "Create an spellAnimation",
        "operationId": "createSpellAnimation",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "SpellAnimation",
            "description": "SpellAnimation details to create",
            "name": "spellAnimation",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpellAnimation"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellAnimationResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/animation/search": {
      "get": {
        "description": "This will show all available spellAnimations by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spellAnimation"
        ],
        "summary": "Search spellAnimations by name",
        "operationId": "listSpellAnimationBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "Name",
            "description": "Name is which spellAnimation to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellAnimationsBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/animation/type": {
      "get": {
        "description": "This will show all available spellAnimationTypes by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spellAnimationType"
        ],
        "summary": "Lists spellAnimationTypes",
        "operationId": "listSpellAnimationType",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellAnimationTypesResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an spellAnimationType",
        "tags": [
          "spellAnimationType"
        ],
        "summary": "Create an spellAnimationType",
        "operationId": "createSpellAnimationType",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "SpellAnimationType",
            "description": "SpellAnimationType details to create",
            "name": "spellAnimationType",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpellAnimationType"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellAnimationTypeResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/animation/type/search": {
      "get": {
        "description": "This will show all available spellAnimationTypes by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spellAnimationType"
        ],
        "summary": "Search spellAnimationTypes by name",
        "operationId": "listSpellAnimationTypeBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "Name",
            "description": "Name is which spellAnimationType to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellAnimationTypesBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/animation/type/{ID}": {
      "get": {
        "description": "This will get an individual spellAnimationType available spellAnimationTypes by default.",
        "tags": [
          "spellAnimationType"
        ],
        "summary": "Get an spellAnimationType",
        "operationId": "getSpellAnimationType",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellAnimationTypeResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an spellAnimationType",
        "tags": [
          "spellAnimationType"
        ],
        "summary": "Edit an spellAnimationType",
        "operationId": "editSpellAnimationType",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "SpellAnimationType",
            "description": "SpellAnimationType details to edit",
            "name": "spellAnimationType",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpellAnimationType"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellAnimationTypeResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an spellAnimationType",
        "tags": [
          "spellAnimationType"
        ],
        "summary": "Delete an spellAnimationType",
        "operationId": "deleteSpellAnimationType",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/animation/{ID}": {
      "get": {
        "description": "This will get an individual spellAnimation available spellAnimations by default.",
        "tags": [
          "spellAnimation"
        ],
        "summary": "Get an spellAnimation",
        "operationId": "getSpellAnimation",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellAnimationResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an spellAnimation",
        "tags": [
          "spellAnimation"
        ],
        "summary": "Edit an spellAnimation",
        "operationId": "editSpellAnimation",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "SpellAnimation",
            "description": "SpellAnimation details to edit",
            "name": "spellAnimation",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpellAnimation"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellAnimationResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an spellAnimation",
        "tags": [
          "spellAnimation"
        ],
        "summary": "Delete an spellAnimation",
        "operationId": "deleteSpellAnimation",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/effect/formula": {
      "get": {
        "description": "This will show all available spellEffectFormulas by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spellEffectFormula"
        ],
        "summary": "Lists spellEffectFormulas",
        "operationId": "listSpellEffectFormula",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellEffectFormulasResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an spellEffectFormula",
        "tags": [
          "spellEffectFormula"
        ],
        "summary": "Create an spellEffectFormula",
        "operationId": "createSpellEffectFormula",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "SpellEffectFormula",
            "description": "SpellEffectFormula details to create",
            "name": "spellEffectFormula",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpellEffectFormula"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellEffectFormulaResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/effect/formula/search": {
      "get": {
        "description": "This will show all available spellEffectFormulas by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spellEffectFormula"
        ],
        "summary": "Search spellEffectFormulas by name",
        "operationId": "listSpellEffectFormulaBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "Name",
            "description": "Name is which spellEffectFormula to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellEffectFormulasBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/effect/formula/{ID}": {
      "get": {
        "description": "This will get an individual spellEffectFormula available spellEffectFormulas by default.",
        "tags": [
          "spellEffectFormula"
        ],
        "summary": "Get an spellEffectFormula",
        "operationId": "getSpellEffectFormula",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellEffectFormulaResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an spellEffectFormula",
        "tags": [
          "spellEffectFormula"
        ],
        "summary": "Edit an spellEffectFormula",
        "operationId": "editSpellEffectFormula",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "SpellEffectFormula",
            "description": "SpellEffectFormula details to edit",
            "name": "spellEffectFormula",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpellEffectFormula"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellEffectFormulaResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an spellEffectFormula",
        "tags": [
          "spellEffectFormula"
        ],
        "summary": "Delete an spellEffectFormula",
        "operationId": "deleteSpellEffectFormula",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/effect/type": {
      "get": {
        "description": "This will show all available spellEffectTypes by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spellEffectType"
        ],
        "summary": "Lists spellEffectTypes",
        "operationId": "listSpellEffectType",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellEffectTypesResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an spellEffectType",
        "tags": [
          "spellEffectType"
        ],
        "summary": "Create an spellEffectType",
        "operationId": "createSpellEffectType",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "SpellEffectType",
            "description": "SpellEffectType details to create",
            "name": "spellEffectType",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpellEffectType"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellEffectTypeResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/effect/type/search": {
      "get": {
        "description": "This will show all available spellEffectTypes by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spellEffectType"
        ],
        "summary": "Search spellEffectTypes by name",
        "operationId": "listSpellEffectTypeBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "Name",
            "description": "Name is which spellEffectType to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellEffectTypesBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/effect/type/{ID}": {
      "get": {
        "description": "This will get an individual spellEffectType available spellEffectTypes by default.",
        "tags": [
          "spellEffectType"
        ],
        "summary": "Get an spellEffectType",
        "operationId": "getSpellEffectType",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellEffectTypeResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an spellEffectType",
        "tags": [
          "spellEffectType"
        ],
        "summary": "Edit an spellEffectType",
        "operationId": "editSpellEffectType",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "SpellEffectType",
            "description": "SpellEffectType details to edit",
            "name": "spellEffectType",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpellEffectType"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellEffectTypeResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an spellEffectType",
        "tags": [
          "spellEffectType"
        ],
        "summary": "Delete an spellEffectType",
        "operationId": "deleteSpellEffectType",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/search": {
      "get": {
        "description": "This will show all available spells by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spell"
        ],
        "summary": "Search spells by name",
        "operationId": "listSpellBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "heal",
            "x-go-name": "Name",
            "description": "Name is which spell to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellsBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/target/type": {
      "get": {
        "description": "This will show all available spellTargetTypes by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spellTargetType"
        ],
        "summary": "Lists spellTargetTypes",
        "operationId": "listSpellTargetType",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellTargetTypesResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an spellTargetType",
        "tags": [
          "spellTargetType"
        ],
        "summary": "Create an spellTargetType",
        "operationId": "createSpellTargetType",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "SpellTargetType",
            "description": "SpellTargetType details to create",
            "name": "spellTargetType",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpellTargetType"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellTargetTypeResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/target/type/search": {
      "get": {
        "description": "This will show all available spellTargetTypes by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spellTargetType"
        ],
        "summary": "Search spellTargetTypes by name",
        "operationId": "listSpellTargetTypeBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "Name",
            "description": "Name is which spellTargetType to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellTargetTypesBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/target/type/{ID}": {
      "get": {
        "description": "This will get an individual spellTargetType available spellTargetTypes by default.",
        "tags": [
          "spellTargetType"
        ],
        "summary": "Get an spellTargetType",
        "operationId": "getSpellTargetType",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellTargetTypeResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an spellTargetType",
        "tags": [
          "spellTargetType"
        ],
        "summary": "Edit an spellTargetType",
        "operationId": "editSpellTargetType",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "SpellTargetType",
            "description": "SpellTargetType details to edit",
            "name": "spellTargetType",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpellTargetType"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellTargetTypeResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an spellTargetType",
        "tags": [
          "spellTargetType"
        ],
        "summary": "Delete an spellTargetType",
        "operationId": "deleteSpellTargetType",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/travel/type": {
      "get": {
        "description": "This will show all available spellTravelTypes by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spellTravelType"
        ],
        "summary": "Lists spellTravelTypes",
        "operationId": "listSpellTravelType",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellTravelTypesResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an spellTravelType",
        "tags": [
          "spellTravelType"
        ],
        "summary": "Create an spellTravelType",
        "operationId": "createSpellTravelType",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "SpellTravelType",
            "description": "SpellTravelType details to create",
            "name": "spellTravelType",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpellTravelType"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellTravelTypeResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/travel/type/search": {
      "get": {
        "description": "This will show all available spellTravelTypes by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spellTravelType"
        ],
        "summary": "Search spellTravelTypes by name",
        "operationId": "listSpellTravelTypeBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "Name",
            "description": "Name is which spellTravelType to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellTravelTypesBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/travel/type/{ID}": {
      "get": {
        "description": "This will get an individual spellTravelType available spellTravelTypes by default.",
        "tags": [
          "spellTravelType"
        ],
        "summary": "Get an spellTravelType",
        "operationId": "getSpellTravelType",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellTravelTypeResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an spellTravelType",
        "tags": [
          "spellTravelType"
        ],
        "summary": "Edit an spellTravelType",
        "operationId": "editSpellTravelType",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "SpellTravelType",
            "description": "SpellTravelType details to edit",
            "name": "spellTravelType",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpellTravelType"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellTravelTypeResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an spellTravelType",
        "tags": [
          "spellTravelType"
        ],
        "summary": "Delete an spellTravelType",
        "operationId": "deleteSpellTravelType",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/{ID}": {
      "get": {
        "description": "This will get an individual spell available spells by default.",
        "tags": [
          "spell"
        ],
        "summary": "Get an spell",
        "operationId": "getSpell",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 12,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an spell",
        "tags": [
          "spell"
        ],
        "summary": "Edit an spell",
        "operationId": "editSpell",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 12,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Spell",
            "description": "Spell details to edit",
            "name": "spell",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Spell"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an spell",
        "tags": [
          "spell"
        ],
        "summary": "Delete an spell",
        "operationId": "deleteSpell",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 12,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "description": "This will show all available users by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "user"
        ],
        "summary": "Lists users",
        "operationId": "listUser",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "short_name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UsersResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create a user",
        "tags": [
          "user"
        ],
        "summary": "Create an user",
        "operationId": "createUser",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "User",
            "description": "User details to create",
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/user/google/callback": {
      "get": {
        "description": "Creates a single sign on for google chain",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "user"
        ],
        "summary": "Works with a callback from google oauth",
        "operationId": "getUserGoogleCallback",
        "responses": {
          "302": {
            "description": "ErrRedirect",
            "schema": {
              "$ref": "#/definitions/ErrRedirect"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/user/google/start": {
      "get": {
        "description": "Creates a single sign on for google chain",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "user"
        ],
        "summary": "Start a google single sign on process",
        "operationId": "getUserGoogleStart",
        "parameters": [
          {
            "type": "string",
            "example": "http://everzek.com",
            "x-go-name": "ReturnURL",
            "description": "ReturnURL is the URL to return once Oauth completes",
            "name": "returnURL",
            "in": "query"
          }
        ],
        "responses": {
          "302": {
            "description": "ErrRedirect",
            "schema": {
              "$ref": "#/definitions/ErrRedirect"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/user/link/{link}": {
      "get": {
        "description": "Used for linking a user to an account",
        "tags": [
          "user"
        ],
        "summary": "Get a user link",
        "operationId": "getUserLink",
        "parameters": [
          {
            "type": "string",
            "example": "hashCode",
            "x-go-name": "Link",
            "description": "link to get information about",
            "name": "link",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "description": "Logs in a user with provided data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "user"
        ],
        "summary": "Logs in a user",
        "operationId": "postUserLogin",
        "parameters": [
          {
            "x-go-name": "User",
            "description": "User details to create",
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UsersResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/user/search": {
      "get": {
        "description": "This will show all available users by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "user"
        ],
        "summary": "Search users by name",
        "operationId": "listUserBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "ShortName",
            "description": "ShortName is which user to get information about",
            "name": "shortName",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "short_name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UsersBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/user/{ID}": {
      "get": {
        "description": "This will get an individual user available users by default.",
        "tags": [
          "user"
        ],
        "summary": "Get an user",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an user",
        "tags": [
          "user"
        ],
        "summary": "Edit an user",
        "operationId": "editUser",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "User",
            "description": "User details to edit",
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an user",
        "tags": [
          "user"
        ],
        "summary": "Delete an user",
        "operationId": "deleteUser",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/user/{userID}/account": {
      "get": {
        "description": "This will show all available userAccounts by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "user"
        ],
        "summary": "Lists userAccounts",
        "operationId": "listUserAccount",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "UserID",
            "description": "UserID to get information about",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "accountid",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserAccountsResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/user/{userID}/account/search": {
      "get": {
        "description": "This will show all available userAccounts by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "user"
        ],
        "summary": "Search userAccounts by accountid",
        "operationId": "listUserAccountBySearch",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "UserID",
            "description": "UserID to get information about",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 55091,
            "x-go-name": "AccountID",
            "description": "AccountID is which userAccount to get information about",
            "name": "accountID",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "accountid",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserAccountsBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/user/{userID}/account/{accountID}": {
      "get": {
        "description": "This will get an individual userAccount available userAccounts by default.",
        "tags": [
          "user"
        ],
        "summary": "Get an userAccount",
        "operationId": "getUserAccount",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "UserID",
            "description": "UserID to get information about",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 55091,
            "x-go-name": "AccountID",
            "description": "AccountID to get information about",
            "name": "accountID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserAccountResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an userAccount",
        "tags": [
          "user"
        ],
        "summary": "Edit an userAccount",
        "operationId": "editUserAccount",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "UserID",
            "description": "UserID to get information about",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "UserID to get information about",
            "name": "UserID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 55091,
            "x-go-name": "AccountID",
            "description": "AccountID to get information about",
            "name": "accountID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "UserAccount",
            "description": "UserAccount details to edit",
            "name": "userAccount",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserAccountResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an userAccount",
        "tags": [
          "user"
        ],
        "summary": "Create an userAccount",
        "operationId": "createUserAccount",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "UserID",
            "description": "UserID to get information about",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "UserAccount",
            "description": "UserAccount details to create",
            "name": "userAccount",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserAccountResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an userAccount",
        "tags": [
          "user"
        ],
        "summary": "Delete an userAccount",
        "operationId": "deleteUserAccount",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "x-go-name": "UserID",
            "description": "UserID to get information about",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 55091,
            "x-go-name": "AccountID",
            "description": "AccountID to get information about",
            "name": "accountID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/variable": {
      "get": {
        "description": "This will show all available variables by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "variable"
        ],
        "summary": "Lists variables",
        "operationId": "listVariable",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/VariablesResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an variable",
        "tags": [
          "variable"
        ],
        "summary": "Create an variable",
        "operationId": "createVariable",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Variable",
            "description": "Variable details to create",
            "name": "variable",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/VariableResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/variable/search": {
      "get": {
        "description": "This will show all available variables by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "variable"
        ],
        "summary": "Search variables by name",
        "operationId": "listVariableBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "ShortName",
            "description": "ShortName is which variable to get information about",
            "name": "shortName",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "short_name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/VariablesBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/variable/{name}": {
      "get": {
        "description": "This will get an individual variable available variables by default.",
        "tags": [
          "variable"
        ],
        "summary": "Get an variable",
        "operationId": "getVariable",
        "parameters": [
          {
            "type": "string",
            "example": "74887",
            "x-go-name": "Name",
            "description": "Name to get information about",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/VariableResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an variable",
        "tags": [
          "variable"
        ],
        "summary": "Edit an variable",
        "operationId": "editVariable",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "example": "74887",
            "x-go-name": "Name",
            "description": "Name to get information about",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Variable",
            "description": "Variable details to edit",
            "name": "variable",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/VariableResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an variable",
        "tags": [
          "variable"
        ],
        "summary": "Delete an variable",
        "operationId": "deleteVariable",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "example": "74887",
            "x-go-name": "Name",
            "description": "Name to get information about",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/zone": {
      "get": {
        "description": "This will show all available zones by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "zone"
        ],
        "summary": "Lists zones",
        "operationId": "listZone",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "short_name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZonesResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an zone",
        "tags": [
          "zone"
        ],
        "summary": "Create an zone",
        "operationId": "createZone",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Zone",
            "description": "Zone details to create",
            "name": "zone",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZoneResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/zone/expansion": {
      "get": {
        "description": "This will show all available zoneExpansions by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "zone"
        ],
        "summary": "Lists zoneExpansions",
        "operationId": "listZoneExpansion",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "short_name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZoneExpansionsResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an zoneExpansion",
        "tags": [
          "zone"
        ],
        "summary": "Create an zoneExpansion",
        "operationId": "createZoneExpansion",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "ZoneExpansion",
            "description": "ZoneExpansion details to create",
            "name": "zoneExpansion",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ZoneExpansion"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZoneExpansionResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/zone/expansion/search": {
      "get": {
        "description": "This will show all available zoneExpansions by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "zone"
        ],
        "summary": "Search zoneExpansions by name",
        "operationId": "listZoneExpansionBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "ShortName",
            "description": "ShortName is which zoneExpansion to get information about",
            "name": "shortName",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "short_name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZoneExpansionsBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/zone/expansion/{ID}": {
      "get": {
        "description": "This will get an individual zoneExpansion available zoneExpansions by default.",
        "tags": [
          "zone"
        ],
        "summary": "Get an zoneExpansion",
        "operationId": "getZoneExpansion",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZoneExpansionResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an zoneExpansion",
        "tags": [
          "zone"
        ],
        "summary": "Edit an zoneExpansion",
        "operationId": "editZoneExpansion",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "ZoneExpansion",
            "description": "ZoneExpansion details to edit",
            "name": "zoneExpansion",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ZoneExpansion"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZoneExpansionResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an zoneExpansion",
        "tags": [
          "zone"
        ],
        "summary": "Delete an zoneExpansion",
        "operationId": "deleteZoneExpansion",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/zone/search": {
      "get": {
        "description": "This will show all available zones by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "zone"
        ],
        "summary": "Search zones by name",
        "operationId": "listZoneBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "qeynos",
            "x-go-name": "ShortName",
            "description": "ShortName is which zone to get information about",
            "name": "shortName",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "short_name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZonesBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/zone/{ID}": {
      "get": {
        "description": "This will get an individual zone available zones by default.",
        "tags": [
          "zone"
        ],
        "summary": "Get an zone",
        "operationId": "getZone",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 101,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZoneResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an zone",
        "tags": [
          "zone"
        ],
        "summary": "Edit an zone",
        "operationId": "editZone",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 101,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Zone",
            "description": "Zone details to edit",
            "name": "zone",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZoneResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an zone",
        "tags": [
          "zone"
        ],
        "summary": "Delete an zone",
        "operationId": "deleteZone",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 101,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Aa": {
      "description": "Aa represents the root objects of Alternate Abilities",
      "type": "object",
      "properties": {
        "ID": {
          "description": "aa_ability",
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Category"
        },
        "charges": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Charges"
        },
        "classes": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Classes"
        },
        "deities": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Deities"
        },
        "drakkinHeritage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DrakkinHeritage"
        },
        "enabled": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Enabled"
        },
        "firstRankID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FirstRankID"
        },
        "grantOnly": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GrantOnly"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "races": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Races"
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status"
        },
        "type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "AaRank": {
      "description": "AaRank represents the root objects of Alternate Abilities",
      "type": "object",
      "properties": {
        "ID": {
          "description": "aa_ranks",
          "type": "integer",
          "format": "int64"
        },
        "cost": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Cost"
        },
        "descSid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DescSid"
        },
        "expansion": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Expansion"
        },
        "levelReq": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LevelReq"
        },
        "lowerHotkeySid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LowerHotkeySid"
        },
        "nextID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NextID"
        },
        "prevID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrevID"
        },
        "recastTime": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RecastTime"
        },
        "spell": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Spell"
        },
        "spellType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpellType"
        },
        "titleSid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TitleSid"
        },
        "upperHotkeySid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpperHotkeySid"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Account": {
      "description": "Account ties characters together, and represents login information to everquest",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "ID": {
          "description": "ID of user",
          "type": "integer",
          "format": "int64",
          "example": 74887
        },
        "banReason": {
          "$ref": "#/definitions/NullString"
        },
        "charname": {
          "type": "string",
          "x-go-name": "Charname",
          "example": "Shin"
        },
        "expansion": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Expansion",
          "example": 0
        },
        "gmspeed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Gmspeed",
          "example": 0
        },
        "hideme": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Hideme",
          "example": 0
        },
        "karma": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Karma",
          "example": 0
        },
        "lsaccountID": {
          "$ref": "#/definitions/NullInt64"
        },
        "miniloginIp": {
          "type": "string",
          "x-go-name": "MiniloginIP",
          "example": "127.0.0.1"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "xackery"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password",
          "example": "miniloginPassword"
        },
        "revoked": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Revoked",
          "example": 0
        },
        "rulesflag": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Rulesflag",
          "example": 0
        },
        "sharedplat": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Sharedplat",
          "example": 1
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status",
          "example": 250
        },
        "suspendReason": {
          "$ref": "#/definitions/NullString"
        },
        "suspendeduntil": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Suspendeduntil",
          "example": "0001-01-01T00:00:00Z"
        },
        "timeCreation": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimeCreation",
          "example": 1451818675
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Accounts": {
      "description": "Accounts is an array of account",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Account"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Activities": {
      "description": "Activities is an array of activity",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Activity"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Activity": {
      "description": "Activity represents entries to Tasks",
      "type": "object",
      "properties": {
        "activityID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ActivityID"
        },
        "activityType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ActivityType"
        },
        "delivertonpc": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Delivertonpc"
        },
        "goalcount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Goalcount"
        },
        "goalid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Goalid"
        },
        "goalmethod": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Goalmethod"
        },
        "optional": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Optional"
        },
        "step": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Step"
        },
        "taskID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TaskID"
        },
        "text1": {
          "type": "string",
          "x-go-name": "Text1"
        },
        "text2": {
          "type": "string",
          "x-go-name": "Text2"
        },
        "text3": {
          "type": "string",
          "x-go-name": "Text3"
        },
        "zone": {
          "$ref": "#/definitions/Zone"
        },
        "zoneid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ZoneID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "AuthClaim": {
      "description": "AuthClaim wraps all token data",
      "type": "object",
      "properties": {
        "aud": {
          "type": "string",
          "x-go-name": "Audience"
        },
        "exp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpiresAt"
        },
        "iat": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IssuedAt"
        },
        "isAdmin": {
          "type": "boolean",
          "x-go-name": "IsAdmin"
        },
        "isModerator": {
          "type": "boolean",
          "x-go-name": "IsModerator"
        },
        "iss": {
          "type": "string",
          "x-go-name": "Issuer"
        },
        "jti": {
          "type": "string",
          "x-go-name": "Id"
        },
        "nbf": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NotBefore"
        },
        "ownedLobbies": {
          "x-go-name": "OwnedLobbies"
        },
        "sub": {
          "type": "string",
          "x-go-name": "Subject"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Base": {
      "description": "Base is an everquest base data table representation",
      "type": "object",
      "properties": {
        "class": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Class"
        },
        "end": {
          "type": "number",
          "format": "double",
          "x-go-name": "End"
        },
        "endFac": {
          "type": "number",
          "format": "double",
          "x-go-name": "EndFac"
        },
        "hp": {
          "type": "number",
          "format": "double",
          "x-go-name": "Hp"
        },
        "hpFac": {
          "type": "number",
          "format": "double",
          "x-go-name": "HpFac"
        },
        "level": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Level"
        },
        "mana": {
          "type": "number",
          "format": "double",
          "x-go-name": "Mana"
        },
        "manaFac": {
          "type": "number",
          "format": "double",
          "x-go-name": "ManaFac"
        },
        "unk1": {
          "type": "number",
          "format": "double",
          "x-go-name": "Unk1"
        },
        "unk2": {
          "type": "number",
          "format": "double",
          "x-go-name": "Unk2"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Bazaar": {
      "description": "Bazaar is an item store on the website",
      "type": "object",
      "properties": {
        "Item": {
          "$ref": "#/definitions/Item"
        },
        "accountID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AccountID"
        },
        "createDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreateDate"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "itemID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "price": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Price"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Character": {
      "description": "Character holds data about players inside Everquest, it primarily uses character_data table",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "RestTimer": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Resttimer"
        },
        "aaExp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AaExp"
        },
        "aaPoints": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AaPoints"
        },
        "aaPointsOld": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AaPointsOld"
        },
        "aaPointsSpent": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AaPointsSpent"
        },
        "aaPointsSpentOld": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AaPointsSpentOld"
        },
        "abilityNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AbilityNumber"
        },
        "abilityTimeHours": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AbilityTimeHours"
        },
        "abilityTimeMinutes": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AbilityTimeMinutes"
        },
        "abilityTimeSeconds": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AbilityTimeSeconds"
        },
        "abilityUp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AbilityUp"
        },
        "accountID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AccountID"
        },
        "agility": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Agility"
        },
        "airRemaining": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AirRemaining"
        },
        "anon": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Anon"
        },
        "autosplitEnabled": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AutosplitEnabled"
        },
        "beard": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Beard"
        },
        "beardColor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BeardColor"
        },
        "birthday": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Birthday"
        },
        "careerTributePoints": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CareerTributePoints"
        },
        "charisma": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Charisma"
        },
        "class": {
          "$ref": "#/definitions/Class"
        },
        "classID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClassID"
        },
        "curHp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CurHp"
        },
        "deity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Deity"
        },
        "dexerity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Dexterity"
        },
        "drakkinDetails": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DrakkinDetails"
        },
        "drakkinHeritage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DrakkinHeritage"
        },
        "drakkinTattoo": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DrakkinTattoo"
        },
        "eAaEffects": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EAaEffects"
        },
        "eExpendedAaSpent": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EExpendedAaSpent"
        },
        "eLastInvsnapshot": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ELastInvsnapshot"
        },
        "ePercentToAa": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EPercentToAa"
        },
        "endurance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Endurance"
        },
        "exp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Exp"
        },
        "eyeColor1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EyeColor1"
        },
        "eyeColor2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EyeColor2"
        },
        "face": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Face"
        },
        "firstlogon": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Firstlogon"
        },
        "gender": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Gender"
        },
        "gm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Gm"
        },
        "groupAutoConsent": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GroupAutoConsent"
        },
        "groupLeadershipExp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GroupLeadershipExp"
        },
        "groupLeadershipPoints": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GroupLeadershipPoints"
        },
        "guildAutoConsent": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GuildAutoConsent"
        },
        "hairColor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HairColor"
        },
        "hairStyle": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HairStyle"
        },
        "heading": {
          "type": "number",
          "format": "double",
          "x-go-name": "Heading"
        },
        "hungerLevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HungerLevel"
        },
        "intelligence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Intelligence"
        },
        "intoxication": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Intoxication"
        },
        "lastLogin": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LastLogin"
        },
        "lastName": {
          "type": "string",
          "x-go-name": "LastName"
        },
        "ldonPointsAvailable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdonPointsAvailable"
        },
        "ldonPointsGuk": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdonPointsGuk"
        },
        "ldonPointsMir": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdonPointsMir"
        },
        "ldonPointsMmc": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdonPointsMmc"
        },
        "ldonPointsRuj": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdonPointsRuj"
        },
        "ldonPointsTak": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdonPointsTak"
        },
        "leadershipExpOn": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LeadershipExpOn"
        },
        "level": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Level"
        },
        "level2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Level2"
        },
        "lfg": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Lfg"
        },
        "lfp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Lfp"
        },
        "mailkey": {
          "type": "string",
          "x-go-name": "Mailkey"
        },
        "mana": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Mana"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "points": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Points"
        },
        "pvp2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Pvp2"
        },
        "pvpBestKillStreak": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpBestKillStreak"
        },
        "pvpCareerPoints": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpCareerPoints"
        },
        "pvpCurrentKillStreak": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpCurrentKillStreak"
        },
        "pvpCurrentPoints": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpCurrentPoints"
        },
        "pvpDeaths": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpDeaths"
        },
        "pvpKills": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpKills"
        },
        "pvpStatus": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpStatus"
        },
        "pvpType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpType"
        },
        "pvpWorstDeathStreak": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpWorstDeathStreak"
        },
        "race": {
          "$ref": "#/definitions/Race"
        },
        "raceID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RaceID"
        },
        "raidAutoConsent": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RaidAutoConsent"
        },
        "raidLeadershipExp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RaidLeadershipExp"
        },
        "raidLeadershipPoints": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RaidLeadershipPoints"
        },
        "showHelm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ShowHelm"
        },
        "stamina": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Stamina"
        },
        "strength": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Strength"
        },
        "suffix": {
          "type": "string",
          "x-go-name": "Suffix"
        },
        "thirstLevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ThirstLevel"
        },
        "timePlayed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimePlayed"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "toxicity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Toxicity"
        },
        "tributeActive": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TributeActive"
        },
        "tributePoints": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TributePoints"
        },
        "tributeTimeRemaining": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TributeTimeRemaining"
        },
        "wisdom": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Wisdom"
        },
        "x": {
          "type": "number",
          "format": "double",
          "x-go-name": "X"
        },
        "xtargets": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Xtargets"
        },
        "y": {
          "type": "number",
          "format": "double",
          "x-go-name": "Y"
        },
        "z": {
          "type": "number",
          "format": "double",
          "x-go-name": "Z"
        },
        "zone": {
          "$ref": "#/definitions/Zone"
        },
        "zoneChangeCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ZoneChangeCount"
        },
        "zoneID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ZoneID"
        },
        "zoneInstance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ZoneInstance"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "CharacterGraph": {
      "description": "CharacterGraph holds data about players performance, it primarily uses character_graph table",
      "type": "object",
      "properties": {
        "aaExperience": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AAExperience"
        },
        "characterId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CharacterID"
        },
        "createDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreateDate"
        },
        "experience": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Experience"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Characters": {
      "description": "Characters is an array of character",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Character"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Class": {
      "description": "Class represents classes in EQ",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "bit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bit"
        },
        "icon": {
          "type": "string",
          "x-go-name": "Icon"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "shortName": {
          "type": "string",
          "x-go-name": "ShortName"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Classs": {
      "description": "Classs is an array of class",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Class"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Config": {
      "description": "Config holds settings and configuration options",
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "x-go-name": "Category"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "icon": {
          "type": "string",
          "x-go-name": "Icon"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Configs": {
      "description": "Configs is an array of Config",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Config"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "DBStr": {
      "type": "object",
      "title": "DBStr represents the dbstr_us.txt file.",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "$ref": "#/definitions/DBStrType"
        },
        "typeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TypeID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "DBStrType": {
      "description": "http://wiki.eqemulator.org/p?dbstr_us.txt",
      "type": "object",
      "title": "DBStrType represents the category types found inside dbstr, and is refered to in entries.",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Deity": {
      "description": "Deity represents deities in EQ",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "bit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bit"
        },
        "icon": {
          "type": "string",
          "x-go-name": "Icon"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "shortName": {
          "type": "string",
          "x-go-name": "ShortName"
        },
        "spellID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpellID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Deitys": {
      "description": "Deitys is an array of deity",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Deity"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "EnvironmentType": {
      "description": "Used by spells.",
      "type": "object",
      "title": "EnvironmentType describes the type of environment this value works in.",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ErrDecodeBody": {
      "description": "ErrDecodeBody is a failure to decode a request body",
      "type": "object",
      "properties": {
        "Message": {
          "type": "string",
          "example": "failed to decode body"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ErrGeneric": {
      "description": "ErrGeneric is a generic message response",
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ErrInternal": {
      "description": "ErrInternal is an internal server error",
      "type": "object",
      "properties": {
        "Message": {
          "type": "string",
          "example": "internal server error"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ErrInvalidArguments": {
      "description": "ErrInvalidArguments means arguments being passed in a request were invalid",
      "type": "object",
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ErrNoContent": {
      "description": "No content, or nothing changed.",
      "type": "object",
      "title": "ErrNoContent is an is used when no content should be displayed",
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ErrPermission": {
      "description": "ErrPermission is a permission denied generic error",
      "type": "object",
      "properties": {
        "Message": {
          "type": "string",
          "example": "permission denied"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ErrRedirect": {
      "description": "ErrRedirect means arguments being passed in a request were invalid",
      "type": "object",
      "properties": {
        "Message": {
          "type": "string",
          "example": "http//google.signon.com"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ErrValidation": {
      "description": "ErrValidation has many errors represented as Key/Value pairs of Field:Description inside REasons",
      "type": "object",
      "properties": {
        "Message": {
          "type": "string",
          "example": "failed to validate"
        },
        "Reasons": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": "test"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Error": {
      "description": "Error is used for Xegony Error handling",
      "type": "object",
      "properties": {
        "createDate": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreateDate"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "scope": {
          "type": "string",
          "x-go-name": "Scope"
        },
        "severity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Severity"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Faction": {
      "description": "Faction represents everquest factions",
      "type": "object",
      "properties": {
        "base": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Base"
        },
        "cleanName": {
          "type": "string",
          "x-go-name": "CleanName"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Fishing": {
      "description": "Fishing represents items inside everquest",
      "type": "object",
      "properties": {
        "Item": {
          "$ref": "#/definitions/Item"
        },
        "Itemid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "Npc": {
          "$ref": "#/definitions/Npc"
        },
        "Zone": {
          "$ref": "#/definitions/Zone"
        },
        "chance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Chance"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "npcChance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcChance"
        },
        "npcId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcID"
        },
        "skillLevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SkillLevel"
        },
        "zoneid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ZoneID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Forage": {
      "description": "Forage represents items inside everquest",
      "type": "object",
      "properties": {
        "Item": {
          "$ref": "#/definitions/Item"
        },
        "Itemid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "Zone": {
          "$ref": "#/definitions/Zone"
        },
        "chance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Chance"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "level": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Level"
        },
        "zoneid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ZoneID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Forum": {
      "description": "Forum is the parent of topics, which groups posts together into sections",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "icon": {
          "type": "string",
          "x-go-name": "Icon"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "sort": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Sort"
        },
        "userID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Forums": {
      "description": "Forums is an array of forum",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Forum"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Frame": {
      "type": "integer",
      "format": "uint64",
      "title": "Frame represents a program counter inside a stack frame.",
      "x-go-package": "github.com/pkg/errors"
    },
    "Goal": {
      "description": "Goal represnts goallist, used by the everquest Task system",
      "type": "object",
      "properties": {
        "entryID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EntryID"
        },
        "listID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ListID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Hacker": {
      "description": "Hacker represents hacker reports inside everquest",
      "type": "object",
      "properties": {
        "Account": {
          "$ref": "#/definitions/Account"
        },
        "Character": {
          "$ref": "#/definitions/Character"
        },
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "Zone": {
          "$ref": "#/definitions/Zone"
        },
        "accountName": {
          "type": "string",
          "x-go-name": "AccountName"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Date"
        },
        "hacked": {
          "type": "string",
          "x-go-name": "Hacked"
        },
        "name": {
          "type": "string",
          "x-go-name": "CharacterName"
        },
        "zone": {
          "$ref": "#/definitions/NullString"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Item": {
      "description": "Item represents items inside everquest",
      "type": "object",
      "properties": {
        "IDFile": {
          "type": "string"
        },
        "UNK012": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk012"
        },
        "UNK013": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk013"
        },
        "UNK014": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk014"
        },
        "UNK033": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk033"
        },
        "UNK054": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk054"
        },
        "UNK059": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk059"
        },
        "UNK060": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk060"
        },
        "UNK120": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk120"
        },
        "UNK121": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk121"
        },
        "UNK123": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk123"
        },
        "UNK124": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk124"
        },
        "UNK127": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk127"
        },
        "UNK132": {
          "$ref": "#/definitions/NullString"
        },
        "UNK134": {
          "type": "string",
          "x-go-name": "Unk134"
        },
        "UNK137": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk137"
        },
        "UNK142": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk142"
        },
        "UNK147": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk147"
        },
        "UNK152": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk152"
        },
        "UNK157": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk157"
        },
        "UNK193": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk193"
        },
        "UNK214": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk214"
        },
        "UNK219": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk219"
        },
        "UNK220": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk220"
        },
        "UNK221": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk221"
        },
        "UNK223": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk223"
        },
        "UNK224": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk224"
        },
        "UNK225": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk225"
        },
        "UNK226": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk226"
        },
        "UNK227": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk227"
        },
        "UNK228": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk228"
        },
        "UNK229": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk229"
        },
        "UNK230": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk230"
        },
        "UNK231": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk231"
        },
        "UNK232": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk232"
        },
        "UNK233": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk233"
        },
        "UNK234": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk234"
        },
        "UNK236": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk236"
        },
        "UNK237": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk237"
        },
        "UNK238": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk238"
        },
        "UNK239": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk239"
        },
        "UNK240": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk240"
        },
        "UNK241": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk241"
        },
        "accuracy": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Accuracy"
        },
        "agility": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Agility"
        },
        "armorClass": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArmorClass"
        },
        "artifactFlag": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArtifactFlag"
        },
        "attack": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Attack"
        },
        "attuneable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Attuneable"
        },
        "augDistiller": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AugDistiller"
        },
        "augRestrictionBit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AugRestrictionBit"
        },
        "augSlot1Type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AugSlot1TypeID"
        },
        "augSlot1Unk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AugSlot1Unk2"
        },
        "augSlot1Visible": {
          "$ref": "#/definitions/NullInt64"
        },
        "augSlot2Type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AugSlot2TypeID"
        },
        "augSlot2Unk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AugSlot2Unk2"
        },
        "augSlot2Visible": {
          "$ref": "#/definitions/NullInt64"
        },
        "augSlot3Type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AugSlot3TypeID"
        },
        "augSlot3Unk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AugSlot3Unk2"
        },
        "augSlot3Visible": {
          "$ref": "#/definitions/NullInt64"
        },
        "augSlot4Type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AugSlot4TypeID"
        },
        "augSlot4Unk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AugSlot4Unk2"
        },
        "augSlot4Visible": {
          "$ref": "#/definitions/NullInt64"
        },
        "augSlot5Type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AugSlot5TypeID"
        },
        "augSlot5Unk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AugSlot5Unk2"
        },
        "augSlot5Visible": {
          "$ref": "#/definitions/NullInt64"
        },
        "augSlot6Type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AugSlot6TypeID"
        },
        "augSlot6Unk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AugSlot6Unk2"
        },
        "augSlot6Visible": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AugSlot6Visible"
        },
        "augTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AugTypeID"
        },
        "avoidance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Avoidance"
        },
        "backstabDamage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BackstabDamage"
        },
        "bagSizeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BagSizeID"
        },
        "bagSlotCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BagSlotCount"
        },
        "bagTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BagTypeID"
        },
        "bagWeightReduction": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BagWeightReduction"
        },
        "baneDamageBodyAmount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BaneDamageBodyAmount"
        },
        "baneDamageBodyID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BaneDamageBodyID"
        },
        "baneDamageRaceAmount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BaneDamageRaceAmonut"
        },
        "baneDamageRaceID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BaneDamageRaceID"
        },
        "bardEffect": {
          "$ref": "#/definitions/Spell"
        },
        "bardEffectSpellID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BardEffectSpellID"
        },
        "bardEffectType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BardEffectType"
        },
        "bardLevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BardLevel"
        },
        "bardLevel2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BardLevel2"
        },
        "bardName": {
          "type": "string",
          "x-go-name": "BardName"
        },
        "bardTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BardTypeID"
        },
        "bardUnk1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BardUnk1"
        },
        "bardUnk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BardUnk2"
        },
        "bardUnk3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BardUnk3"
        },
        "bardUnk4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BardUnk4"
        },
        "bardUnk5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BardUnk5"
        },
        "bardUnk7": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BardUnk7"
        },
        "bardValue": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BardValue"
        },
        "benefitFlag": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BenefitFlag"
        },
        "book": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Book"
        },
        "bookType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BookType"
        },
        "castTime": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CastTime"
        },
        "castTime2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CastTime2"
        },
        "charisma": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Charisma"
        },
        "charmFile": {
          "type": "string",
          "x-go-name": "CharmFile"
        },
        "charmFileID": {
          "type": "string",
          "x-go-name": "CharmFileID"
        },
        "clairvoyance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Clairvoyance"
        },
        "classBit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClassBit"
        },
        "classs": {
          "$ref": "#/definitions/Classs"
        },
        "clickEffect": {
          "$ref": "#/definitions/Spell"
        },
        "clickEffectSpellID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClickEffectSpellID"
        },
        "clickLevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClickLevel"
        },
        "clickLevel2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClickLevel2"
        },
        "clickName": {
          "type": "string",
          "x-go-name": "ClickName"
        },
        "clickType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClickType"
        },
        "clickUnk5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClickUnk5"
        },
        "clickUnk6": {
          "type": "string",
          "x-go-name": "ClickUnk6"
        },
        "clickUnk7": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClickUnk7"
        },
        "coldResistance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ColdResistance"
        },
        "color": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Color"
        },
        "combatEffectAmount": {
          "type": "string",
          "x-go-name": "CombatEffectAmount"
        },
        "comment": {
          "type": "string",
          "x-go-name": "Comment"
        },
        "created": {
          "type": "string",
          "x-go-name": "Created"
        },
        "damage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Damage"
        },
        "damageOverTimeShielding": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DamageOverTimeShielding"
        },
        "damageShieldAmount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DamageShieldAmount"
        },
        "damageShieldMitigation": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DamageShieldMitigation"
        },
        "deity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Deity"
        },
        "delay": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Delay"
        },
        "dexterity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Dexterity"
        },
        "diseaseResistance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DiseaseResistance"
        },
        "elementalDamageAmount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ElementalDamageAmount"
        },
        "elementalDamageTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ElementalDamageTypeID"
        },
        "eliteMaterial": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EliteMaterial"
        },
        "endurance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Endurance"
        },
        "enduranceRegen": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EnduranceRegen"
        },
        "epicItem": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EpicItem"
        },
        "evolvingID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EvolvingID"
        },
        "evolvingItemID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EvolvingItemID"
        },
        "evolvingLevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Evolvinglevel"
        },
        "evovlingMax": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EvolvingMax"
        },
        "expendableArrow": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpendableArrow"
        },
        "extraDamageAmount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExtraDamageAmount"
        },
        "extraDamageSkill": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExtraDamageSkill"
        },
        "factionAmount1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FactionAmount1"
        },
        "factionAmount2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FactionAmount2"
        },
        "factionAmount3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FactionAmount3"
        },
        "factionAmount4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FactionAmount4"
        },
        "factionmod1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FactionModifer1"
        },
        "factionmod2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FactionModifier2"
        },
        "factionmod3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FactionModifer3"
        },
        "factionmod4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FactionModifer4"
        },
        "favor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Favor"
        },
        "fileName": {
          "type": "string",
          "x-go-name": "FileName"
        },
        "fireResistance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FireResistance"
        },
        "firionaVieNoDrop": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FirionaVieNoDrop"
        },
        "focusEffect": {
          "$ref": "#/definitions/Spell"
        },
        "focusEffectSpellID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FocusEffectSpellID"
        },
        "focusLevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FocusLevel"
        },
        "focusLevel2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FocusLevel2"
        },
        "focusName": {
          "type": "string",
          "x-go-name": "FocusName"
        },
        "focusType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FocusType"
        },
        "focusUnk1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FocusUnk1"
        },
        "focusUnk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FocusUnk2"
        },
        "focusUnk3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FocusUnk3"
        },
        "focusUnk4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FocusUnk4"
        },
        "focusUnk5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FocusUnk5"
        },
        "focusUnk6": {
          "type": "string",
          "x-go-name": "FocusUnk6"
        },
        "focusUnk7": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FocusUnk7"
        },
        "guildFavor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GuildFavor"
        },
        "haste": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Haste"
        },
        "healAmount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HealAmount"
        },
        "heirloom": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Heirloom"
        },
        "heroForgeModel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroForgeModel"
        },
        "heroicAgility": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicAgility"
        },
        "heroicCharisma": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicCharisma"
        },
        "heroicColdResistance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicColdResistance"
        },
        "heroicDexterity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicDexterity"
        },
        "heroicDiseaseResistance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicDiseaseResistance"
        },
        "heroicFireResistance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicFireResistance"
        },
        "heroicIntelligence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicIntelligence"
        },
        "heroicMagicResistance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicMagicResistance"
        },
        "heroicPoisonResistance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicPoisonResistance"
        },
        "heroicStamina": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicStamina"
        },
        "heroicStrength": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicStrength"
        },
        "heroicSvcorrup": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicSvcorrup"
        },
        "heroicWisdom": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicWisdom"
        },
        "hitpoint": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Hitpoint"
        },
        "icon": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Icon"
        },
        "id": {
          "description": "normal items db",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "intelligence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Intelligence"
        },
        "itemClass": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemClass"
        },
        "itemType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemType"
        },
        "ldonPrice": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdonPrice"
        },
        "ldonSellBackRate": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdonSellBackRate"
        },
        "ldonSold": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdonSold"
        },
        "ldonTheme": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdonTheme"
        },
        "light": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Light"
        },
        "lore": {
          "type": "string",
          "x-go-name": "Lore"
        },
        "loreFile": {
          "type": "string",
          "x-go-name": "LoreFile"
        },
        "loregroup": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LoreGroup"
        },
        "magic": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Magic"
        },
        "magicResistance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MagicResistance"
        },
        "mana": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Mana"
        },
        "manaRegen": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ManaRegen"
        },
        "material": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Material"
        },
        "maxcharges": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxCharges"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "noDrop": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NoDrop"
        },
        "noPet": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NoPet"
        },
        "noRent": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NoRent"
        },
        "noTransfer": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NoTransfer"
        },
        "pendingLoreFlag": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PendingLoreFlag"
        },
        "placeable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Placeable"
        },
        "pointType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PointType"
        },
        "poisonResistance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PoisonResistance"
        },
        "potionBelt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PotionBelt"
        },
        "potionBeltSlots": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PotionBeltSlots"
        },
        "powerSourceCapacity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PowerSourceCapacity"
        },
        "price": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Price"
        },
        "procEffect": {
          "$ref": "#/definitions/Spell"
        },
        "procEffectSpellID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProcEffectSpellID"
        },
        "procLevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProcLevel"
        },
        "procLevel2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProcLevel2"
        },
        "procName": {
          "type": "string",
          "x-go-name": "ProcName"
        },
        "procRate": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProcRate"
        },
        "procType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProcType"
        },
        "procUnk1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProcUnk1"
        },
        "procUnk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProcUnk2"
        },
        "procUnk3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProcUnk3"
        },
        "procUnk4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProcUnk4"
        },
        "procUnk6": {
          "type": "string",
          "x-go-name": "ProcUnk6"
        },
        "procUnk7": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProcUnk7"
        },
        "purity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Purity"
        },
        "questItemFlag": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "QuestItemFlag"
        },
        "raceBit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RaceBit"
        },
        "races": {
          "$ref": "#/definitions/Races"
        },
        "range": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Range"
        },
        "recLevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RecLevel"
        },
        "recSkill": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RecSkill"
        },
        "recastDelay": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RecastDelay"
        },
        "recastType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RecastType"
        },
        "regen": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Regen"
        },
        "reqLevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ReqLevel"
        },
        "saveCorruption": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SaveCorruption"
        },
        "scriptFileID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ScriptFileid"
        },
        "scrollEffect": {
          "$ref": "#/definitions/Spell"
        },
        "scrollEffectSpellID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ScrollEffectSpellID"
        },
        "scrollLevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ScrollLevel"
        },
        "scrollLevel2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ScrollLevel2"
        },
        "scrollName": {
          "type": "string",
          "x-go-name": "ScrollName"
        },
        "scrollType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ScrollType"
        },
        "scrollUnk1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ScrollUnk1"
        },
        "scrollUnk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ScrollUnk2"
        },
        "scrollUnk3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ScrollUnk3"
        },
        "scrollUnk4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ScrollUnk4"
        },
        "scrollUnk5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ScrollUnk5"
        },
        "scrollUnk6": {
          "type": "string",
          "x-go-name": "ScrollUnk6"
        },
        "scrollUnk7": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ScrollUnk7"
        },
        "sellRate": {
          "type": "number",
          "format": "double",
          "x-go-name": "SellRate"
        },
        "serialization": {
          "$ref": "#/definitions/NullString"
        },
        "serialized": {
          "$ref": "#/definitions/NullTime"
        },
        "shielding": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Shielding"
        },
        "sizeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SizeID"
        },
        "skillModifierMax": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SkillModifierMax"
        },
        "skillModifierType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SkillModifierType"
        },
        "skillModifierValue": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SkillModifierValue"
        },
        "slotBit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SlotBit"
        },
        "source": {
          "type": "string",
          "x-go-name": "Source"
        },
        "spellDamage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpellDamage"
        },
        "spellShield": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpellShield"
        },
        "stackSize": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StackSize"
        },
        "stackable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Stackable"
        },
        "stamina": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Stamina"
        },
        "strength": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Strength"
        },
        "strikeThrough": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StrikeThrough"
        },
        "stunResist": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StunResist"
        },
        "summonedFlag": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SummonedFlag"
        },
        "tradeSkills": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TradeSkills"
        },
        "updated": {
          "$ref": "#/definitions/NullTime"
        },
        "verified": {
          "$ref": "#/definitions/NullTime"
        },
        "weight": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Weight"
        },
        "wisdom": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Wisdom"
        },
        "wornEffect": {
          "$ref": "#/definitions/Spell"
        },
        "wornEffectSpellID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "WornEffectSpellID"
        },
        "wornLevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "WornLevel"
        },
        "wornLevel2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "WornLevel2"
        },
        "wornName": {
          "type": "string",
          "x-go-name": "WornName"
        },
        "wornType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "WornType"
        },
        "wornUnk1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "WornUnk1"
        },
        "wornUnk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "WornUnk2"
        },
        "wornUnk3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "WornUnk3"
        },
        "wornUnk4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "WornUnk4"
        },
        "wornUnk5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "WornUnk5"
        },
        "wornUnk6": {
          "type": "string",
          "x-go-name": "WornUnk6"
        },
        "wornUnk7": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "WornUnk7"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ItemAttribute": {
      "description": "ItemAttribute holds item attribute information",
      "type": "object",
      "properties": {
        "Icon": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ItemCategory": {
      "description": "ItemCategory holds item category information",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "Icon": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Items": {
      "description": "Items contains an array of item",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Item"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "LightType": {
      "type": "object",
      "title": "LightType is used to determine the type of light emission an item or spell should cause.",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "LootDrop": {
      "description": "LootDrop is the parent of loot drop entries",
      "type": "object",
      "properties": {
        "Entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LootDropEntry"
          }
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "LootDropEntry": {
      "description": "LootDropEntry groups together items that npcs drop",
      "type": "object",
      "properties": {
        "chance": {
          "type": "number",
          "format": "double",
          "x-go-name": "Chance"
        },
        "disabledChance": {
          "type": "number",
          "format": "double",
          "x-go-name": "DisabledChance"
        },
        "equipItem": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EquipItem"
        },
        "itemCharges": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemCharges"
        },
        "itemID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "lootdropId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LootdropID"
        },
        "maxlevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Maxlevel"
        },
        "minlevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Minlevel"
        },
        "multiplier": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Multiplier"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "LootTable": {
      "description": "LootTable is the parent of loottableentry",
      "type": "object",
      "properties": {
        "Entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LootTableEntry"
          }
        },
        "Npcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Npc"
          }
        },
        "avgcoin": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Avgcoin"
        },
        "done": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Done"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "maxcash": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Maxcash"
        },
        "mincash": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Mincash"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "LootTableEntry": {
      "description": "LootTableEntry group together loot drops for npc drops",
      "type": "object",
      "properties": {
        "droplimit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Droplimit"
        },
        "lootdropId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LootdropID"
        },
        "loottableId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LoottableID"
        },
        "mindrop": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Mindrop"
        },
        "multiplier": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Multiplier"
        },
        "probability": {
          "type": "number",
          "format": "double",
          "x-go-name": "Probability"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Mail": {
      "description": "Mail represents mail inside everquest",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "body": {
          "type": "string",
          "x-go-name": "Body"
        },
        "characterID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CharacterID"
        },
        "from": {
          "type": "string",
          "x-go-name": "From"
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status"
        },
        "subject": {
          "type": "string",
          "x-go-name": "Subject"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Timestamp"
        },
        "to": {
          "type": "string",
          "x-go-name": "To"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Merchant": {
      "description": "Merchant represents tradeskill merchants inside everquest",
      "type": "object",
      "properties": {
        "Entrys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MerchantEntry"
          }
        },
        "Npcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Npc"
          }
        },
        "merchantID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "MerchantEntry": {
      "description": "MerchantEntry group together loot drops for npc drops",
      "type": "object",
      "properties": {
        "Item": {
          "$ref": "#/definitions/Item"
        },
        "Merchant": {
          "$ref": "#/definitions/Merchant"
        },
        "altCurrencyCost": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AltCurrencyCost"
        },
        "classesRequired": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClassesRequired"
        },
        "factionRequired": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FactionRequired"
        },
        "itemID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "levelRequired": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LevelRequired"
        },
        "merchantID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MerchantID"
        },
        "probability": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Probability"
        },
        "slot": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Slot"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Npc": {
      "description": "Npc represents Non player characters in everquest",
      "type": "object",
      "properties": {
        "Accuracy": {
          "type": "integer",
          "format": "int64"
        },
        "Attack": {
          "type": "integer",
          "format": "int64"
        },
        "Avoidance": {
          "type": "integer",
          "format": "int64"
        },
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "PeqID": {
          "type": "integer",
          "format": "int64"
        },
        "adventureTemplateID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AdventureTemplateID"
        },
        "aggroRadius": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AggroRadius"
        },
        "agility": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Agility"
        },
        "altCurrencyID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AltCurrencyID"
        },
        "ammoIDFile": {
          "type": "string",
          "x-go-name": "AmmoIDFile"
        },
        "armTexture": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArmTexture"
        },
        "armorClass": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArmorClass"
        },
        "armorTintBlue": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArmorTintBlue"
        },
        "armorTintGreen": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArmorTintGreen"
        },
        "armorTintID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArmorTintID"
        },
        "armorTintRed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArmorTintRed"
        },
        "assistRadius": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AssistRadius"
        },
        "attackCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AttackCount"
        },
        "attackDelay": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AttackDelay"
        },
        "attackSpeed": {
          "type": "number",
          "format": "double",
          "x-go-name": "AttackSpeed"
        },
        "bodyTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BodyTypeID"
        },
        "bracerTexture": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BracerTexture"
        },
        "charisma": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Charisma"
        },
        "class": {
          "$ref": "#/definitions/Class"
        },
        "classID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClassID"
        },
        "coldResistance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ColdResistance"
        },
        "corruptionResistance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CorruptionResistance"
        },
        "dMeleeTexture1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DMeleeTexture1"
        },
        "dMeleeTexture2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DMeleeTexture2"
        },
        "dexterity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Dexterity"
        },
        "diseaseResistance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DiseaseResistance"
        },
        "drakkinDetails": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DrakkinDetails"
        },
        "drakkinHeritage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DrakkinHeritage"
        },
        "drakkinTattoo": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DrakkinTattoo"
        },
        "emoteID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EmoteID"
        },
        "exclude": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Exclude"
        },
        "face": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Face"
        },
        "feetTexture": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FeetTexture"
        },
        "findable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Findable"
        },
        "fireResistance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FireResistance"
        },
        "fixed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Fixed"
        },
        "gender": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Gender"
        },
        "handTexture": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HandTexture"
        },
        "healScale": {
          "type": "number",
          "format": "double",
          "x-go-name": "HealScale"
        },
        "helmTexture": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HelmTexture"
        },
        "herosForgeModel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HerosForgeModel"
        },
        "hitpoints": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Hitpoints"
        },
        "hpRegenRate": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HpRegenRate"
        },
        "ignoreDespawn": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IgnoreDespawn"
        },
        "intelligence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Intelligence"
        },
        "isBot": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IsBot"
        },
        "isQuest": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IsQuest"
        },
        "lastName": {
          "$ref": "#/definitions/NullString"
        },
        "legTexture": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LegTexture"
        },
        "level": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Level"
        },
        "light": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Light"
        },
        "lootTableID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LootTableID"
        },
        "luclinBeard": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LuclinBeard"
        },
        "luclinBeardColor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LuclinBeardColor"
        },
        "luclinEyeColor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LuclinEyeColor"
        },
        "luclinEyeColor2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LuclinEyeColor2"
        },
        "luclinHairColor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LuclinHairColor"
        },
        "luclinHairStyle": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LuclinHairStyle"
        },
        "magicResistance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MagicResistance"
        },
        "mana": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Mana"
        },
        "manaRegenRate": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ManaRegenRate"
        },
        "maxLevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxLevel"
        },
        "maximumDamage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaximumDamage"
        },
        "merchantID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MerchantID"
        },
        "minimumDamage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinimumDamage"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "noTargetHotkey": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NoTargetHotkey"
        },
        "npcAggro": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcAggro"
        },
        "npcFactionID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcFactionID"
        },
        "npcSpecialAttacks": {
          "type": "string",
          "x-go-name": "NpcSpecialAttacks"
        },
        "npcSpellsEffectsID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcSpellsEffectsID"
        },
        "npcSpellsID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcSpellsID"
        },
        "physicalResistance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PhysicalResistance"
        },
        "poisonResistance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PoisonResistance"
        },
        "primaryMeleeTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryMeleeTypeID"
        },
        "privateCorpse": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrivateCorpse"
        },
        "questGlobal": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "QuestGlobal"
        },
        "race": {
          "$ref": "#/definitions/Race"
        },
        "raceID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RaceID"
        },
        "raidTarget": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RaidTarget"
        },
        "rangedTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RangedTypeID"
        },
        "runspeed": {
          "type": "number",
          "format": "double",
          "x-go-name": "Runspeed"
        },
        "scaleRate": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ScaleRate"
        },
        "secondaryMeleeTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SecondaryMeleeTypeID"
        },
        "seeHide": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeeHide"
        },
        "seeImprovedHide": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeeImprovedHide"
        },
        "seeInvisible": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeeInvisible"
        },
        "seeInvisibleUndead": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeeInvisibleUndead"
        },
        "showName": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ShowName"
        },
        "size": {
          "type": "number",
          "format": "double",
          "x-go-name": "Size"
        },
        "slowMitigation": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SlowMitigation"
        },
        "spawnLimit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpawnLimit"
        },
        "specialAbilities": {
          "$ref": "#/definitions/NullString"
        },
        "spellScale": {
          "type": "number",
          "format": "double",
          "x-go-name": "SpellScale"
        },
        "stamina": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Stamina"
        },
        "strength": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Strength"
        },
        "texture": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Texture"
        },
        "trackable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Trackable"
        },
        "trapTemplate": {
          "$ref": "#/definitions/NullInt64"
        },
        "underwater": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Underwater"
        },
        "unique": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unique"
        },
        "uniqueSpawnByName": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UniqueSpawnByName"
        },
        "untargetable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Untargetable"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        },
        "walkSpeed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "WalkSpeed"
        },
        "wisdom": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Wisdom"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "NpcLoot": {
      "description": "NpcLoot is a cache table used to speed up lookup of items for NPCs",
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/Item"
        },
        "itemID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "npc": {
          "$ref": "#/definitions/Npc"
        },
        "npcID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Npcs": {
      "description": "Npcs represents an array of Npc",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Npc"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "NullInt64": {
      "description": "NullInt64 implements the Scanner interface so\nit can be used as a scan destination, similar to NullString.",
      "type": "object",
      "title": "NullInt64 represents an int64 that may be null.",
      "properties": {
        "Int64": {
          "type": "integer",
          "format": "int64"
        },
        "Valid": {
          "type": "boolean"
        }
      },
      "x-go-package": "database/sql"
    },
    "NullString": {
      "description": "var s NullString\nerr := db.QueryRow(\"SELECT name FROM foo WHERE id=?\", id).Scan(\u0026s)\n...\nif s.Valid {\nuse s.String\n} else {\nNULL value\n}",
      "type": "object",
      "title": "NullString represents a string that may be null.\nNullString implements the Scanner interface so\nit can be used as a scan destination:",
      "properties": {
        "String": {
          "type": "string"
        },
        "Valid": {
          "type": "boolean"
        }
      },
      "x-go-package": "database/sql"
    },
    "NullTime": {
      "description": "var nt NullTime\nerr := db.QueryRow(\"SELECT time FROM foo WHERE id=?\", id).Scan(\u0026nt)\n...\nif nt.Valid {\nuse nt.Time\n} else {\nNULL value\n}\n\nThis NullTime implementation is not driver-specific",
      "type": "object",
      "title": "NullTime represents a time.Time that may be NULL.\nNullTime implements the Scanner interface so\nit can be used as a scan destination:",
      "properties": {
        "Time": {
          "type": "string",
          "format": "date-time"
        },
        "Valid": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/go-sql-driver/mysql"
    },
    "OauthType": {
      "description": "OauthType identifies the type of oauth",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "shortName": {
          "type": "string",
          "x-go-name": "ShortName"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "OauthTypes": {
      "description": "OauthTypes is an array of OauthType",
      "type": "array",
      "items": {
        "$ref": "#/definitions/OauthType"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Page": {
      "description": "Page represents pagination",
      "type": "object",
      "properties": {
        "isDescending": {
          "description": "IsDescending will change sort order when true",
          "type": "integer",
          "format": "int64",
          "x-go-name": "IsDescending",
          "example": 0
        },
        "limit": {
          "description": "Limit to how many items per page",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit",
          "example": 10
        },
        "offset": {
          "description": "Offset is pagination, offset*limit",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Offset",
          "example": 0
        },
        "orderBy": {
          "description": "OrderBy is which field to order a page by",
          "type": "string",
          "x-go-name": "OrderBy",
          "example": "id"
        },
        "total": {
          "description": "Total number of results found",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total",
          "example": 100
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Post": {
      "description": "Post are topic entries for forums",
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "x-go-name": "Body"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "ownerId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "OwnerID"
        },
        "topicID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TopicID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Race": {
      "description": "Race holds data about races (including models)",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "bit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bit"
        },
        "female": {
          "type": "string",
          "x-go-name": "Female"
        },
        "icon": {
          "type": "string",
          "x-go-name": "Icon"
        },
        "male": {
          "type": "string",
          "x-go-name": "Male"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "neutral": {
          "type": "string",
          "x-go-name": "Neutral"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Races": {
      "description": "Races is an array of Race",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Race"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Recipe": {
      "description": "Recipe represents tradeskill recipes inside everquest",
      "type": "object",
      "properties": {
        "enabled": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Enabled"
        },
        "entrys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecipeEntry"
          },
          "x-go-name": "Entrys"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "mustLearn": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MustLearn"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "nofail": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Nofail"
        },
        "notes": {
          "$ref": "#/definitions/NullString"
        },
        "quest": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Quest"
        },
        "replaceContainer": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ReplaceContainer"
        },
        "skillneeded": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Skillneeded"
        },
        "tradeskill": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Tradeskill"
        },
        "trivial": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Trivial"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "RecipeEntry": {
      "description": "RecipeEntry group together loot drops for npc drops",
      "type": "object",
      "properties": {
        "componentcount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Componentcount"
        },
        "failcount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Failcount"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "iscontainer": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Iscontainer"
        },
        "item": {
          "$ref": "#/definitions/Item"
        },
        "itemId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "recipe": {
          "$ref": "#/definitions/Recipe"
        },
        "recipeId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RecipeID"
        },
        "salvagecount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Salvagecount"
        },
        "successcount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Successcount"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ResistType": {
      "description": "Used by spells and items.\nhttps://github.com/Shendare/EQArchitect/blob/master/lists/resistance_types.csv",
      "type": "object",
      "title": "ResistType is used to describe resist type.",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Rule": {
      "type": "object",
      "title": "Rule represents the zone table, Everquest is split into zones.",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "ruleName": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "RuleEntry": {
      "type": "object",
      "title": "RuleEntry represents a rule entry.",
      "properties": {
        "description": {
          "$ref": "#/definitions/NullString"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "ruleID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RuleID"
        },
        "scope": {
          "type": "string",
          "x-go-name": "Scope"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        },
        "valueFloat": {
          "type": "number",
          "format": "double",
          "x-go-name": "ValueFloat"
        },
        "valueInt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ValueInt"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "RuleEntrys": {
      "description": "RuleEntrys is an array of ruleEntry",
      "type": "array",
      "items": {
        "$ref": "#/definitions/RuleEntry"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Rules": {
      "description": "Rules is an array of rule",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Rule"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Schema": {
      "description": "Schema represents http://json-schema.org/latest/json-schema-validation.html#anchor111",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "enum": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "EnumInt"
        },
        "format": {
          "type": "string",
          "x-go-name": "Format"
        },
        "items": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Schema"
          },
          "x-go-name": "Items"
        },
        "maxLength": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxLength"
        },
        "maximum": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Maximum"
        },
        "maxproperties": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxProperties"
        },
        "minLength": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinLength"
        },
        "minimum": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Minimum"
        },
        "minproperties": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinProperties"
        },
        "optional": {
          "type": "boolean",
          "x-go-name": "Optional"
        },
        "pattern": {
          "type": "string",
          "x-go-name": "Pattern"
        },
        "patternproperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Schema"
          },
          "x-go-name": "PatternProperties"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Schema"
          },
          "x-go-name": "Properties"
        },
        "required": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Required"
        },
        "string": {
          "description": "Schema      string   `json:\"$schema,omitempty\"`",
          "type": "string",
          "x-go-name": "Type"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SharedBank": {
      "description": "SharedBank represents the sharedbank table, used for npcs",
      "type": "object",
      "properties": {
        "acctid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AccountID"
        },
        "augslot1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot1"
        },
        "augslot2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot2"
        },
        "augslot3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot3"
        },
        "augslot4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot4"
        },
        "augslot5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot5"
        },
        "augslot6": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot6"
        },
        "charges": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Charges"
        },
        "customData": {
          "$ref": "#/definitions/NullString"
        },
        "itemid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "slotid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SlotID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Skill": {
      "description": "Skill represents skills inside everquest",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Slot": {
      "description": "Slot represents item slots",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "bitID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BitID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "shortName": {
          "type": "string",
          "x-go-name": "ShortName"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Spawn": {
      "description": "Spawn represents the spawn_group table",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "delay": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Delay"
        },
        "despawn": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Despawn"
        },
        "despawnTimer": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DespawnTimer"
        },
        "dist": {
          "type": "number",
          "format": "double",
          "x-go-name": "Dist"
        },
        "maxX": {
          "type": "number",
          "format": "double",
          "x-go-name": "MaxX"
        },
        "maxY": {
          "type": "number",
          "format": "double",
          "x-go-name": "MaxY"
        },
        "minDelay": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinDelay"
        },
        "minX": {
          "type": "number",
          "format": "double",
          "x-go-name": "MinX"
        },
        "minY": {
          "type": "number",
          "format": "double",
          "x-go-name": "MinY"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "spawnLimit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpawnLimit"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpawnEntry": {
      "description": "SpawnEntry represents the spawn2 table",
      "type": "object",
      "properties": {
        "Condition": {
          "type": "integer",
          "format": "int64"
        },
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "animation": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Animation"
        },
        "condValue": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CondValue"
        },
        "enabled": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Enabled"
        },
        "heading": {
          "type": "number",
          "format": "double",
          "x-go-name": "Heading"
        },
        "pathgrid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Pathgrid"
        },
        "respawntime": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RespawnTime"
        },
        "spawnID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpawnID"
        },
        "variance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Variance"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        },
        "x": {
          "type": "number",
          "format": "double",
          "x-go-name": "X"
        },
        "xScaled": {
          "description": "XScaled is used for scaling positions on the map",
          "type": "number",
          "format": "double",
          "x-go-name": "XScaled"
        },
        "y": {
          "type": "number",
          "format": "double",
          "x-go-name": "Y"
        },
        "yScaled": {
          "description": "YScaled is used for scaling positions on the map",
          "type": "number",
          "format": "double",
          "x-go-name": "YScaled"
        },
        "z": {
          "type": "number",
          "format": "double",
          "x-go-name": "Z"
        },
        "zScaled": {
          "description": "ZScaled is used for scaling positions on the map",
          "type": "number",
          "format": "double",
          "x-go-name": "ZScaled"
        },
        "zone": {
          "$ref": "#/definitions/Zone"
        },
        "zoneShortName": {
          "$ref": "#/definitions/NullString"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpawnEntrys": {
      "description": "SpawnEntrys is an array of SpawnEntry",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SpawnEntry"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpawnEvent": {
      "description": "SpawnEvent represents the spawn_events table",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "action": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Action"
        },
        "argument": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Argument"
        },
        "conditionID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ConditionID"
        },
        "enabled": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Enabled"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "nextDay": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NextDay"
        },
        "nextHour": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NextHour"
        },
        "nextMinute": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NextMinute"
        },
        "nextMonth": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NextMonth"
        },
        "nextYear": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NextYear"
        },
        "period": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Period"
        },
        "strict": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Strict"
        },
        "zoneShortName": {
          "type": "string",
          "x-go-name": "ZoneShortName"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpawnEvents": {
      "description": "SpawnEvents is an array of SpawnEvent",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SpawnEvent"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpawnNpc": {
      "description": "SpawnNpc represents the spawnentry table. This is a pivot",
      "type": "object",
      "properties": {
        "chance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Chance"
        },
        "npc": {
          "$ref": "#/definitions/Npc"
        },
        "npcID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcID"
        },
        "spawnID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpawnID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpawnNpcs": {
      "description": "SpawnNpcs is an array of SpawnNpc",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SpawnNpc"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpawnRespawn": {
      "description": "SpawnRespawn represents the respawn_times table",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Duration"
        },
        "instanceID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "InstanceID"
        },
        "start": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Start"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Spawns": {
      "description": "Spawns is an array of Spawn",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Spawn"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Spell": {
      "description": "Spell represents items inside everquest",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "aEDuration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AEDuration"
        },
        "activated": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Activated"
        },
        "aemaxtargets": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Aemaxtargets"
        },
        "allowrest": {
          "$ref": "#/definitions/NullInt64"
        },
        "animation": {
          "$ref": "#/definitions/SpellAnimation"
        },
        "animationID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AnimationID"
        },
        "aoeRange": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AoeRange"
        },
        "baseValue1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Base1"
        },
        "baseValue10": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Base10"
        },
        "baseValue11": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Base11"
        },
        "baseValue12": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Base12"
        },
        "baseValue2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Base2"
        },
        "baseValue3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Base3"
        },
        "baseValue4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Base4"
        },
        "baseValue5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Base5"
        },
        "baseValue6": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Base6"
        },
        "baseValue7": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Base7"
        },
        "baseValue8": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Base8"
        },
        "baseValue9": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Base9"
        },
        "bonusHate": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BonusHate"
        },
        "buffDurationFormula": {
          "$ref": "#/definitions/SpellDurationFormula"
        },
        "buffDurationFormulaID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BuffDurationFormulaID"
        },
        "buffduration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BuffDuration"
        },
        "canDelete": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CanDelete"
        },
        "canMgb": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CanMgb"
        },
        "castNotStanding": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CastNotStanding"
        },
        "castOnOther": {
          "$ref": "#/definitions/NullString"
        },
        "castOnYou": {
          "$ref": "#/definitions/NullString"
        },
        "castRestriction": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Castrestriction"
        },
        "castTime": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CastTime"
        },
        "castingAnimation": {
          "$ref": "#/definitions/SpellAnimation"
        },
        "castingAnimationID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CastingAnimationID"
        },
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpellComponent"
          },
          "x-go-name": "Components"
        },
        "coneStartAngle": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Conestartangle"
        },
        "coneStopAngle": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Conestopangle"
        },
        "dBStr": {
          "$ref": "#/definitions/DBStr"
        },
        "dBStrEffect1": {
          "$ref": "#/definitions/DBStr"
        },
        "dBStrEffect2": {
          "$ref": "#/definitions/DBStr"
        },
        "dBStrEffect2ID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DBStrEffect2ID"
        },
        "dBStrEffectID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DBStrEffectID"
        },
        "dBStrID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DBStrID"
        },
        "dBStrTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DBStrTypeID"
        },
        "deity0": {
          "$ref": "#/definitions/Deity"
        },
        "deity1": {
          "$ref": "#/definitions/Deity"
        },
        "deity10": {
          "$ref": "#/definitions/Deity"
        },
        "deity11": {
          "$ref": "#/definitions/Deity"
        },
        "deity12": {
          "$ref": "#/definitions/Deity"
        },
        "deity13": {
          "$ref": "#/definitions/Deity"
        },
        "deity14": {
          "$ref": "#/definitions/Deity"
        },
        "deity15": {
          "$ref": "#/definitions/Deity"
        },
        "deity16": {
          "$ref": "#/definitions/Deity"
        },
        "deity2": {
          "$ref": "#/definitions/Deity"
        },
        "deity3": {
          "$ref": "#/definitions/Deity"
        },
        "deity4": {
          "$ref": "#/definitions/Deity"
        },
        "deity5": {
          "$ref": "#/definitions/Deity"
        },
        "deity6": {
          "$ref": "#/definitions/Deity"
        },
        "deity7": {
          "$ref": "#/definitions/Deity"
        },
        "deity8": {
          "$ref": "#/definitions/Deity"
        },
        "deity9": {
          "$ref": "#/definitions/Deity"
        },
        "deityID0": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeityID0"
        },
        "deityID1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeityID1"
        },
        "deityID10": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeityID10"
        },
        "deityID11": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeityID11"
        },
        "deityID12": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeityID12"
        },
        "deityID13": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeityID13"
        },
        "deityID14": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeityID14"
        },
        "deityID15": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeityID15"
        },
        "deityID16": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeityID16"
        },
        "deityID2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeityID2"
        },
        "deityID3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeityID3"
        },
        "deityID4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeityID4"
        },
        "deityID5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeityID5"
        },
        "deityID6": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeityID6"
        },
        "deityID7": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeityID7"
        },
        "deityID8": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeityID8"
        },
        "deityID9": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeityID9"
        },
        "disallowSit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DisallowSit"
        },
        "dotStackingExempt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DotStackingExempt"
        },
        "effect1": {
          "$ref": "#/definitions/SpellEffectType"
        },
        "effect10": {
          "$ref": "#/definitions/SpellEffectType"
        },
        "effect11": {
          "$ref": "#/definitions/SpellEffectType"
        },
        "effect12": {
          "$ref": "#/definitions/SpellEffectType"
        },
        "effect2": {
          "$ref": "#/definitions/SpellEffectType"
        },
        "effect3": {
          "$ref": "#/definitions/SpellEffectType"
        },
        "effect4": {
          "$ref": "#/definitions/SpellEffectType"
        },
        "effect5": {
          "$ref": "#/definitions/SpellEffectType"
        },
        "effect6": {
          "$ref": "#/definitions/SpellEffectType"
        },
        "effect7": {
          "$ref": "#/definitions/SpellEffectType"
        },
        "effect8": {
          "$ref": "#/definitions/SpellEffectType"
        },
        "effect9": {
          "$ref": "#/definitions/SpellEffectType"
        },
        "effectCategory": {
          "$ref": "#/definitions/SpellEffectCategory"
        },
        "effectCategoryID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EffectCategoryID"
        },
        "effectID1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EffectID1"
        },
        "effectID10": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EffectID10"
        },
        "effectID11": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EffectID11"
        },
        "effectID12": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EffectID12"
        },
        "effectID2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EffectID2"
        },
        "effectID3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EffectID3"
        },
        "effectID4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EffectID4"
        },
        "effectID5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EffectID5"
        },
        "effectID6": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EffectID6"
        },
        "effectID7": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EffectID7"
        },
        "effectID8": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EffectID8"
        },
        "effectID9": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EffectID9"
        },
        "endurCost": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Endurcost"
        },
        "endurTimerIndex": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Endurtimerindex"
        },
        "endurUpkeep": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Endurupkeep"
        },
        "environmentType": {
          "$ref": "#/definitions/EnvironmentType"
        },
        "environmentTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EnvironmentTypeID"
        },
        "field142": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field142"
        },
        "field143": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field143"
        },
        "field152": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field152"
        },
        "field153": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field153"
        },
        "field160": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field160"
        },
        "field163": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field163"
        },
        "field164": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field164"
        },
        "field169": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field169"
        },
        "field170": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field170"
        },
        "field171": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field171"
        },
        "field172": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field172"
        },
        "field181": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field181"
        },
        "field182": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field182"
        },
        "field198": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field198"
        },
        "field199": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field199"
        },
        "field203": {
          "$ref": "#/definitions/NullInt64"
        },
        "field204": {
          "$ref": "#/definitions/NullInt64"
        },
        "field206": {
          "$ref": "#/definitions/NullInt64"
        },
        "field209": {
          "$ref": "#/definitions/NullInt64"
        },
        "field210": {
          "$ref": "#/definitions/NullInt64"
        },
        "field215": {
          "$ref": "#/definitions/NullInt64"
        },
        "field216": {
          "$ref": "#/definitions/NullInt64"
        },
        "field217": {
          "$ref": "#/definitions/NullInt64"
        },
        "field220": {
          "$ref": "#/definitions/NullInt64"
        },
        "field221": {
          "$ref": "#/definitions/NullInt64"
        },
        "field222": {
          "$ref": "#/definitions/NullInt64"
        },
        "field223": {
          "$ref": "#/definitions/NullInt64"
        },
        "field225": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field225"
        },
        "field226": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field226"
        },
        "field232": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field232"
        },
        "field233": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field233"
        },
        "field234": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field234"
        },
        "field235": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field235"
        },
        "field236": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field236"
        },
        "fizzleDifficulty": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FizzleDifficulty"
        },
        "formula1": {
          "$ref": "#/definitions/SpellEffectFormula"
        },
        "formula10": {
          "$ref": "#/definitions/SpellEffectFormula"
        },
        "formula11": {
          "$ref": "#/definitions/SpellEffectFormula"
        },
        "formula12": {
          "$ref": "#/definitions/SpellEffectFormula"
        },
        "formula2": {
          "$ref": "#/definitions/SpellEffectFormula"
        },
        "formula3": {
          "$ref": "#/definitions/SpellEffectFormula"
        },
        "formula4": {
          "$ref": "#/definitions/SpellEffectFormula"
        },
        "formula5": {
          "$ref": "#/definitions/SpellEffectFormula"
        },
        "formula6": {
          "$ref": "#/definitions/SpellEffectFormula"
        },
        "formula7": {
          "$ref": "#/definitions/SpellEffectFormula"
        },
        "formula8": {
          "$ref": "#/definitions/SpellEffectFormula"
        },
        "formula9": {
          "$ref": "#/definitions/SpellEffectFormula"
        },
        "formulaID1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FormulaID1"
        },
        "formulaID10": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FormulaID10"
        },
        "formulaID11": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FormulaID11"
        },
        "formulaID12": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FormulaID12"
        },
        "formulaID2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FormulaID2"
        },
        "formulaID3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FormulaID3"
        },
        "formulaID4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FormulaID4"
        },
        "formulaID5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FormulaID5"
        },
        "formulaID6": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FormulaID6"
        },
        "formulaID7": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FormulaID7"
        },
        "formulaID8": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FormulaID8"
        },
        "formulaID9": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FormulaID9"
        },
        "group": {
          "$ref": "#/definitions/SpellGroup"
        },
        "hateAdded": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Hateadded"
        },
        "icon": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IconID"
        },
        "inCombat": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Incombat"
        },
        "isDiscipline": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Isdiscipline"
        },
        "ldonTrap": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdonTrap"
        },
        "lightType": {
          "$ref": "#/definitions/LightType"
        },
        "lightTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LightTypeID"
        },
        "limitValue1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit1"
        },
        "limitValue10": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit10"
        },
        "limitValue11": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit11"
        },
        "limitValue12": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit12"
        },
        "limitValue2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit2"
        },
        "limitValue3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit3"
        },
        "limitValue4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit4"
        },
        "limitValue5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit5"
        },
        "limitValue6": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit6"
        },
        "limitValue7": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit7"
        },
        "limitValue8": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit8"
        },
        "limitValue9": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit9"
        },
        "mana": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Mana"
        },
        "max1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Max1"
        },
        "max10": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Max10"
        },
        "max11": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Max11"
        },
        "max12": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Max12"
        },
        "max2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Max2"
        },
        "max3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Max3"
        },
        "max4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Max4"
        },
        "max5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Max5"
        },
        "max6": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Max6"
        },
        "max7": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Max7"
        },
        "max8": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Max8"
        },
        "max9": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Max9"
        },
        "maxDist": {
          "type": "number",
          "format": "double",
          "x-go-name": "MaxDist"
        },
        "maxDistMod": {
          "type": "number",
          "format": "double",
          "x-go-name": "MaxDistMod"
        },
        "maxResist": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxResist"
        },
        "maxtargets": {
          "$ref": "#/definitions/NullInt64"
        },
        "minDist": {
          "type": "number",
          "format": "double",
          "x-go-name": "MinDist"
        },
        "minDistMod": {
          "type": "number",
          "format": "double",
          "x-go-name": "MinDistMod"
        },
        "minRange": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinRange"
        },
        "minResist": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinResist"
        },
        "name": {
          "$ref": "#/definitions/NullString"
        },
        "nimbus": {
          "$ref": "#/definitions/SpellNimbus"
        },
        "nimbusEffectID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NimbusEffectID"
        },
        "noBlock": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NoBlock"
        },
        "noDispell": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NoDispell"
        },
        "noPartialResist": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NoPartialResist"
        },
        "notExtendable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NotExtendable"
        },
        "npcCategory": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcCategory"
        },
        "npcNoLos": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcNoLos"
        },
        "npcUsefulness": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcUsefulness"
        },
        "numHits": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumHits"
        },
        "numHitsType": {
          "$ref": "#/definitions/SpellNumHitsType"
        },
        "numHitsTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumHitsTypeID"
        },
        "oldIconID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "OldIconID"
        },
        "otherCasts": {
          "$ref": "#/definitions/NullString"
        },
        "outofCombat": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Outofcombat"
        },
        "pcNpcOnlyFlag": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PcNpcOnlyFlag"
        },
        "persistdeath": {
          "$ref": "#/definitions/NullInt64"
        },
        "player1": {
          "$ref": "#/definitions/NullString"
        },
        "pushBack": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PushBack"
        },
        "pushUp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PushUp"
        },
        "pvpResistBase": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpResistBase"
        },
        "pvpResistCalc": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpResistCalc"
        },
        "pvpResistCap": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpResistCap"
        },
        "range": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Range"
        },
        "rank": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Rank"
        },
        "reagents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpellReagent"
          },
          "x-go-name": "Reagents"
        },
        "recastTime": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RecastTime"
        },
        "recourseLinkSpell": {
          "$ref": "#/definitions/Spell"
        },
        "recourseLinkSpellID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RecourseLinkSpellID"
        },
        "recoveryTime": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RecoveryTime"
        },
        "reflectable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Reflectable"
        },
        "resistDifference": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ResistDifference"
        },
        "resistType": {
          "$ref": "#/definitions/ResistType"
        },
        "resistTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ResistTypeID"
        },
        "skill": {
          "$ref": "#/definitions/Skill"
        },
        "skillID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SkillID"
        },
        "sneaking": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Sneaking"
        },
        "songcap": {
          "$ref": "#/definitions/NullInt64"
        },
        "spellAffectID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpellAffectID"
        },
        "spellCategory": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpellCategory"
        },
        "spellFades": {
          "$ref": "#/definitions/NullString"
        },
        "spellGroup": {
          "$ref": "#/definitions/NullInt64"
        },
        "spellIcon": {
          "$ref": "#/definitions/SpellIcon"
        },
        "spellOldIcon": {
          "$ref": "#/definitions/SpellOldIcon"
        },
        "suspendable": {
          "$ref": "#/definitions/NullInt64"
        },
        "targetAnimation": {
          "$ref": "#/definitions/SpellAnimation"
        },
        "targetAnimationID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TargetAnimationID"
        },
        "targetType": {
          "$ref": "#/definitions/SpellTargetType"
        },
        "targetTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TargetTypeID"
        },
        "teleportZone": {
          "$ref": "#/definitions/Zone"
        },
        "teleportZoneShortName": {
          "$ref": "#/definitions/NullString"
        },
        "timeOfDay": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimeOfDay"
        },
        "travelType": {
          "$ref": "#/definitions/SpellTravelType"
        },
        "travelTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TravelTypeID"
        },
        "uninterruptable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Uninterruptable"
        },
        "unusuedIconID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UnusedIconID"
        },
        "useShortBuffBox": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UseShortBuffBox"
        },
        "viralRange": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ViralRange"
        },
        "viralTargets": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ViralTargets"
        },
        "viralTimer": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ViralTimer"
        },
        "youCast": {
          "$ref": "#/definitions/NullString"
        },
        "zoneType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Zonetype"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellAnimation": {
      "description": "SpellAnimation represents animations on spells\nhttp://www.eqemulator.org/forums/showthread.php?t=30731",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "$ref": "#/definitions/SpellAnimationType"
        },
        "typeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TypeID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellAnimationType": {
      "description": "SpellAnimationType represents animation types on spells\nhttp://www.eqemulator.org/forums/showthread.php?t=30731",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "shortName": {
          "type": "string",
          "x-go-name": "ShortName"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellAnimationTypes": {
      "description": "SpellAnimationTypes is an array of spellAnimationType",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SpellAnimationType"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellAnimations": {
      "description": "SpellAnimations is an array of spellAnimation",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SpellAnimation"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellClass": {
      "description": "SpellClass stores minimum levels of each class\nranges 1 to 60",
      "type": "object",
      "properties": {
        "classID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClassID"
        },
        "level": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Level"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellComponent": {
      "description": "ranges from 1 to 4",
      "type": "object",
      "title": "SpellComponent represents items required or utilized for the spell.",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "spellID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpellID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellDurationFormula": {
      "description": "SpellDurationFormula is used in various areas to represent spells",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellDurationFormulas": {
      "description": "SpellDurationFormulas is an array of SpellDurationFormula",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SpellDurationFormula"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellEffectCategory": {
      "description": "SpellEffectCategory determines the type of effect, used by spells. e.g. beneficial\nhttp://wiki.eqemulator.org/p?spells_new",
      "type": "object",
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellEffectFormula": {
      "description": "SpellEffectFormula is used in various areas to represent spells",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellEffectFormulas": {
      "description": "SpellEffectFormulas is an array of SpellEffectFormula",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SpellEffectFormula"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellEffectType": {
      "description": "SpellEffectType is the effect id type, e.g. SE_CURRENT_HP_ONCE\nhttp://wiki.eqemulator.org/p?Spell_Effect_IDs",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellEffectTypes": {
      "description": "SpellEffectTypes is an array of SpellEffectType",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SpellEffectType"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellGroup": {
      "description": "http://wiki.eqemulator.org/p?Spell_Groups\u0026frm=spells_new",
      "type": "object",
      "title": "SpellGroup is used to group together spells of similar types.",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellIcon": {
      "description": "SpellIcon is used by spells to describe an icon",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellNimbus": {
      "description": "SpellNimbus is used to describe spell nimbus effects",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellNumHitsType": {
      "description": "SpellNumHitsType describes the type of numhits on a spell\nhttp://wiki.eqemulator.org/p?Numhit_Types\u0026frm=spells_new",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellOldIcon": {
      "description": "SpellOldIcon is used by spells to describe an icon for older clients (pre luclin)",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellReagent": {
      "description": "Ranges from 1 to 4",
      "type": "object",
      "title": "SpellReagent represents the no expend spell reagents used for a spell.",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "itemID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "spellID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpellID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellTargetType": {
      "description": "SpellTargetType is used to identify who are valid targets for a spell\nhttp://wiki.eqemulator.org/p?Target_Types\u0026frm=spells_new",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellTargetTypes": {
      "description": "SpellTargetTypes is an array of SpellTargetType",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SpellTargetType"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellTravelType": {
      "description": "SpellTravelType identifies the type of travel a spell uses",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellTravelTypes": {
      "description": "SpellTravelTypes is an array of SpellTravelType",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SpellTravelType"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Spells": {
      "description": "Spells is an array of Spell",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Spell"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "StackTrace": {
      "type": "array",
      "title": "StackTrace is stack of Frames from innermost (newest) to outermost (oldest).",
      "items": {
        "$ref": "#/definitions/Frame"
      },
      "x-go-package": "github.com/pkg/errors"
    },
    "StackTracer": {
      "description": "StackTracer is an interface for stack trace error handling",
      "type": "object",
      "properties": {
        "StackTrace": {
          "$ref": "#/definitions/StackTrace"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Task": {
      "description": "Task is an everquest entry, grouping the Activities entries",
      "type": "object",
      "properties": {
        "cashreward": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Cashreward"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Duration"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "maxlevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Maxlevel"
        },
        "minlevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Minlevel"
        },
        "repeatable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Repeatable"
        },
        "reward": {
          "type": "string",
          "x-go-name": "Reward"
        },
        "rewardid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Rewardid"
        },
        "rewardmethod": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Rewardmethod"
        },
        "startzone": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Startzone"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "xpreward": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Xpreward"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Topic": {
      "description": "Topic is the entries inside forum, grouping posts",
      "type": "object",
      "properties": {
        "forumID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ForumID"
        },
        "icon": {
          "type": "string",
          "x-go-name": "Icon"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "User": {
      "description": "User represents the user for this application, and binds to accountID",
      "type": "object",
      "required": [
        "displayName",
        "email",
        "password"
      ],
      "properties": {
        "ID": {
          "description": "ID of user",
          "type": "integer",
          "format": "int64"
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          },
          "x-go-name": "Accounts"
        },
        "characters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Character"
          },
          "x-go-name": "Characters"
        },
        "displayName": {
          "description": "DisplayName what others see you as",
          "type": "string",
          "x-go-name": "DisplayName",
          "example": "xackery"
        },
        "email": {
          "description": "Email",
          "type": "string",
          "x-go-name": "Email",
          "example": "test@here.com"
        },
        "oauths": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserOauth"
          },
          "x-go-name": "Oauths"
        },
        "password": {
          "description": "Password of user",
          "type": "string",
          "x-go-name": "Password",
          "example": "nothing"
        },
        "primaryAccount": {
          "$ref": "#/definitions/Account"
        },
        "primaryAccountID": {
          "description": "PrimaryAccountID of user",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryAccountID",
          "example": 0
        },
        "primaryCharacter": {
          "$ref": "#/definitions/Character"
        },
        "primaryCharacterID": {
          "description": "PrimaryCharacterID of user",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryCharacterID",
          "example": 0
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "UserAccount": {
      "description": "UserAccount represents the accounts linked to a user",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "account": {
          "$ref": "#/definitions/Account"
        },
        "accountID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AccountID"
        },
        "character": {
          "$ref": "#/definitions/Character"
        },
        "characterID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CharacterID"
        },
        "createDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreateDate"
        },
        "userID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "UserAccounts": {
      "description": "UserAccounts is an array of account",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UserAccount"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "UserLink": {
      "description": "UserLink represents the user for this application, and binds to accountID",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "account": {
          "$ref": "#/definitions/Account"
        },
        "accountID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AccountID"
        },
        "character": {
          "$ref": "#/definitions/Character"
        },
        "characterID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CharacterID"
        },
        "createDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreateDate"
        },
        "link": {
          "type": "string",
          "x-go-name": "Link"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "UserLinks": {
      "description": "UserLinks is an array of account",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UserLink"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "UserOauth": {
      "description": "UserOauth represents linked oauth entities",
      "type": "object",
      "properties": {
        "oauthRefreshToken": {
          "type": "string",
          "x-go-name": "OauthRefreshToken"
        },
        "oauthToken": {
          "type": "string",
          "x-go-name": "OauthToken"
        },
        "oauthTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "OauthTypeID"
        },
        "userID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "UserOauths": {
      "description": "UserOauths is an array of UserOauth",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UserOauth"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Users": {
      "description": "Users is an array of account",
      "type": "array",
      "items": {
        "$ref": "#/definitions/User"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Variable": {
      "type": "object",
      "title": "Variable represents the zone table, Everquest is split into zones.",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "modifiedDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ModifiedDate"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Variables": {
      "description": "Variables is an array of variable",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Variable"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Zone": {
      "description": "Zone represents the zone table, Everquest is split into zones",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "MaxClip": {
          "type": "number",
          "format": "double"
        },
        "MinClip": {
          "type": "number",
          "format": "double"
        },
        "canBind": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CanBind"
        },
        "canCombat": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CanCombat"
        },
        "canLevitate": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CanLevitate"
        },
        "castOutdoor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CastOutdoor"
        },
        "expansion": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Expansion"
        },
        "fileName": {
          "$ref": "#/definitions/NullString"
        },
        "flagNeeded": {
          "type": "string",
          "x-go-name": "FlagNeeded"
        },
        "fogBlue": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogBlue"
        },
        "fogBlue1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogBlue1"
        },
        "fogBlue2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogBlue2"
        },
        "fogBlue3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogBlue3"
        },
        "fogBlue4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogBlue4"
        },
        "fogDensity": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogDensity"
        },
        "fogGreen": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogGreen"
        },
        "fogGreen1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogGreen1"
        },
        "fogGreen2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogGreen2"
        },
        "fogGreen3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogGreen3"
        },
        "fogGreen4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogGreen4"
        },
        "fogMaxClip": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMaxClip"
        },
        "fogMaxClip1": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMaxClip1"
        },
        "fogMaxClip2": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMaxClip2"
        },
        "fogMaxClip3": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMaxClip3"
        },
        "fogMaxClip4": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMaxClip4"
        },
        "fogMinClip": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMinClip"
        },
        "fogMinClip1": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMinClip1"
        },
        "fogMinClip2": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMinClip2"
        },
        "fogMinClip3": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMinClip3"
        },
        "fogMinClip4": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMinClip4"
        },
        "fogRed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogRed"
        },
        "fogRed1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogRed1"
        },
        "fogRed2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogRed2"
        },
        "fogRed3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogRed3"
        },
        "fogRed4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogRed4"
        },
        "graveyardID": {
          "type": "number",
          "format": "double",
          "x-go-name": "GraveyardID"
        },
        "gravity": {
          "type": "number",
          "format": "double",
          "x-go-name": "Gravity"
        },
        "hotZone": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HotZone"
        },
        "instType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "InstType"
        },
        "longName": {
          "type": "string",
          "x-go-name": "LongName"
        },
        "mapFileName": {
          "$ref": "#/definitions/NullString"
        },
        "maxClients": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxClients"
        },
        "minLevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinLevel"
        },
        "minStatus": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinStatus"
        },
        "modifier": {
          "description": "Levels   int64   `json:\"levels,omitempty\"`",
          "type": "number",
          "format": "double",
          "x-go-name": "Modifier"
        },
        "note": {
          "$ref": "#/definitions/NullString"
        },
        "peqZone": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PeqZone"
        },
        "rainChance1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RainChance1"
        },
        "rainChance2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RainChance2"
        },
        "rainChance3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RainChance3"
        },
        "rainChance4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RainChance4"
        },
        "rainDuration1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RainDuration1"
        },
        "rainDuration2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RainDuration2"
        },
        "rainDuration3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RainDuration3"
        },
        "rainDuration4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RainDuration4"
        },
        "ruleset": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Ruleset"
        },
        "safeX": {
          "type": "number",
          "format": "double",
          "x-go-name": "SafeX"
        },
        "safeY": {
          "type": "number",
          "format": "double",
          "x-go-name": "SafeY"
        },
        "safeZ": {
          "type": "number",
          "format": "double",
          "x-go-name": "SafeZ"
        },
        "shortName": {
          "$ref": "#/definitions/NullString"
        },
        "shutdownDelay": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ShutdownDelay"
        },
        "sky": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Sky"
        },
        "skylock": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Skylock"
        },
        "snowChance1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SnowChance1"
        },
        "snowChance2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SnowChance2"
        },
        "snowChance3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SnowChance3"
        },
        "snowChance4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SnowChance4"
        },
        "snowDuration1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SnowDuration1"
        },
        "snowDuration2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SnowDuration2"
        },
        "snowDuration3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SnowDuration3"
        },
        "snowDuration4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SnowDuration4"
        },
        "suspendBuffs": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SuspendBuffs"
        },
        "timeType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimeType"
        },
        "timezone": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Timezone"
        },
        "type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Type"
        },
        "underworld": {
          "type": "number",
          "format": "double",
          "x-go-name": "Underworld"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        },
        "walkSpeed": {
          "type": "number",
          "format": "double",
          "x-go-name": "WalkSpeed"
        },
        "zType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ZType"
        },
        "zoneExpMultiplier": {
          "type": "number",
          "format": "double",
          "x-go-name": "ZoneExpMultiplier"
        },
        "zoneIDNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ZoneIDNumber"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ZoneExpansion": {
      "description": "ZoneExpansion represents the zoneExpansion table, Everquest is split into zoneExpansions",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "bit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bit"
        },
        "longName": {
          "type": "string",
          "x-go-name": "LongName"
        },
        "shortName": {
          "type": "string",
          "x-go-name": "ShortName"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ZoneExpansions": {
      "description": "ZoneExpansions is an array of zoneExpansion",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ZoneExpansion"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ZoneLevel": {
      "description": "ZoneLevel is a cache table used to get levels a zone is available for",
      "type": "object",
      "properties": {
        "levels": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Levels"
        },
        "mapAspect": {
          "type": "number",
          "format": "double",
          "x-go-name": "MapAspect"
        },
        "mapXOffset": {
          "type": "number",
          "format": "double",
          "x-go-name": "MapXOffset"
        },
        "mapYOffset": {
          "type": "number",
          "format": "double",
          "x-go-name": "MapYOffset"
        },
        "zoneID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ZoneID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Zones": {
      "description": "Zones is an array of zone",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Zone"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    }
  },
  "responses": {
    "AccountResponse": {
      "description": "AccountResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Account"
      },
      "headers": {
        "account": {}
      }
    },
    "AccountsBySearchResponse": {
      "description": "AccountsBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Accounts"
      },
      "headers": {
        "accounts": {},
        "page": {},
        "search": {}
      }
    },
    "AccountsResponse": {
      "description": "AccountsResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Accounts"
      },
      "headers": {
        "accounts": {},
        "page": {}
      }
    },
    "CharacterInventoryResponse": {
      "description": "CharacterInventoryResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Items"
      },
      "headers": {
        "character": {},
        "items": {}
      }
    },
    "CharacterResponse": {
      "description": "CharacterResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Character"
      },
      "headers": {
        "character": {}
      }
    },
    "CharactersBySearchResponse": {
      "description": "CharactersBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Characters"
      },
      "headers": {
        "characters": {},
        "page": {},
        "search": {}
      }
    },
    "CharactersResponse": {
      "description": "CharactersResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Characters"
      },
      "headers": {
        "characters": {},
        "page": {}
      }
    },
    "ClassResponse": {
      "description": "ClassResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Class"
      },
      "headers": {
        "class": {}
      }
    },
    "ClasssBySearchResponse": {
      "description": "ClasssBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Classs"
      },
      "headers": {
        "classs": {},
        "page": {},
        "search": {}
      }
    },
    "ClasssResponse": {
      "description": "ClasssResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Classs"
      },
      "headers": {
        "classs": {},
        "page": {}
      }
    },
    "ConfigResponse": {
      "description": "ConfigResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Config"
      },
      "headers": {
        "config": {}
      }
    },
    "ConfigsBySearchResponse": {
      "description": "ConfigsBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Configs"
      },
      "headers": {
        "configs": {},
        "page": {},
        "search": {}
      }
    },
    "ConfigsResponse": {
      "description": "ConfigsResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Configs"
      },
      "headers": {
        "configs": {},
        "page": {}
      }
    },
    "DeityResponse": {
      "description": "DeityResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Deity"
      },
      "headers": {
        "deity": {}
      }
    },
    "DeitysBySearchResponse": {
      "description": "DeitysBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Deitys"
      },
      "headers": {
        "deitys": {},
        "page": {},
        "search": {}
      }
    },
    "DeitysResponse": {
      "description": "DeitysResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Deitys"
      },
      "headers": {
        "deitys": {},
        "page": {}
      }
    },
    "ForumResponse": {
      "description": "ForumResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Forum"
      },
      "headers": {
        "forum": {}
      }
    },
    "ForumsBySearchResponse": {
      "description": "ForumsBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Forums"
      },
      "headers": {
        "forums": {},
        "page": {},
        "search": {}
      }
    },
    "ForumsResponse": {
      "description": "ForumsResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Forums"
      },
      "headers": {
        "forums": {},
        "page": {}
      }
    },
    "ItemResponse": {
      "description": "ItemResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Item"
      },
      "headers": {
        "item": {}
      }
    },
    "ItemsBySearchResponse": {
      "description": "ItemsBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Items"
      },
      "headers": {
        "items": {},
        "page": {},
        "search": {}
      }
    },
    "ItemsResponse": {
      "description": "ItemsResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Items"
      },
      "headers": {
        "items": {},
        "page": {}
      }
    },
    "NpcResponse": {
      "description": "NpcResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Npc"
      },
      "headers": {
        "npc": {}
      }
    },
    "NpcsBySearchResponse": {
      "description": "NpcsBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Npcs"
      },
      "headers": {
        "npcs": {},
        "page": {},
        "search": {}
      }
    },
    "NpcsResponse": {
      "description": "NpcsResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Npcs"
      },
      "headers": {
        "npcs": {},
        "page": {}
      }
    },
    "OauthTypeResponse": {
      "description": "OauthTypeResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/OauthType"
      },
      "headers": {
        "oauthType": {}
      }
    },
    "OauthTypesBySearchResponse": {
      "description": "OauthTypesBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/OauthTypes"
      },
      "headers": {
        "oauthTypes": {},
        "page": {},
        "search": {}
      }
    },
    "OauthTypesResponse": {
      "description": "OauthTypesResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/OauthTypes"
      },
      "headers": {
        "oauthTypes": {},
        "page": {}
      }
    },
    "RaceResponse": {
      "description": "RaceResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Race"
      },
      "headers": {
        "race": {}
      }
    },
    "RacesBySearchResponse": {
      "description": "RacesBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Races"
      },
      "headers": {
        "page": {},
        "races": {},
        "search": {}
      }
    },
    "RacesResponse": {
      "description": "RacesResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Races"
      },
      "headers": {
        "page": {},
        "races": {}
      }
    },
    "RuleEntryResponse": {
      "description": "RuleEntryResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/RuleEntry"
      },
      "headers": {
        "rule": {},
        "ruleEntry": {}
      }
    },
    "RuleEntrysBySearchResponse": {
      "description": "RuleEntrysBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/RuleEntrys"
      },
      "headers": {
        "page": {},
        "rule": {},
        "ruleEntrys": {},
        "search": {}
      }
    },
    "RuleEntrysResponse": {
      "description": "RuleEntrysResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/RuleEntrys"
      },
      "headers": {
        "page": {},
        "rule": {},
        "ruleEntrys": {}
      }
    },
    "RuleResponse": {
      "description": "RuleResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Rule"
      },
      "headers": {
        "rule": {}
      }
    },
    "RulesBySearchResponse": {
      "description": "RulesBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Rules"
      },
      "headers": {
        "page": {},
        "rules": {},
        "search": {}
      }
    },
    "RulesResponse": {
      "description": "RulesResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Rules"
      },
      "headers": {
        "page": {},
        "rules": {}
      }
    },
    "SpawnEntryResponse": {
      "description": "SpawnEntryResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/SpawnEntry"
      },
      "headers": {
        "spawn": {},
        "spawnEntry": {}
      }
    },
    "SpawnEntrysBySearchResponse": {
      "description": "SpawnEntrysBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/SpawnEntrys"
      },
      "headers": {
        "page": {},
        "search": {},
        "spawn": {},
        "spawnEntrys": {}
      }
    },
    "SpawnEntrysResponse": {
      "description": "SpawnEntrysResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/SpawnEntrys"
      },
      "headers": {
        "page": {},
        "spawn": {},
        "spawnEntrys": {}
      }
    },
    "SpawnNpcResponse": {
      "description": "SpawnNpcResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/SpawnNpc"
      },
      "headers": {
        "spawn": {},
        "spawnNpc": {}
      }
    },
    "SpawnNpcsBySearchResponse": {
      "description": "SpawnNpcsBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/SpawnNpcs"
      },
      "headers": {
        "page": {},
        "search": {},
        "spawn": {},
        "spawnNpcs": {}
      }
    },
    "SpawnNpcsResponse": {
      "description": "SpawnNpcsResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/SpawnNpcs"
      },
      "headers": {
        "page": {},
        "spawn": {},
        "spawnNpcs": {}
      }
    },
    "SpawnResponse": {
      "description": "SpawnResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Spawn"
      },
      "headers": {
        "spawn": {}
      }
    },
    "SpawnsBySearchResponse": {
      "description": "SpawnsBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Spawns"
      },
      "headers": {
        "page": {},
        "search": {},
        "spawns": {}
      }
    },
    "SpawnsResponse": {
      "description": "SpawnsResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Spawns"
      },
      "headers": {
        "page": {},
        "spawns": {}
      }
    },
    "SpellAnimationResponse": {
      "description": "SpellAnimationResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/SpellAnimation"
      },
      "headers": {
        "spellAnimation": {}
      }
    },
    "SpellAnimationTypeResponse": {
      "description": "SpellAnimationTypeResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/SpellAnimationType"
      },
      "headers": {
        "spellAnimationType": {}
      }
    },
    "SpellAnimationTypesBySearchResponse": {
      "description": "SpellAnimationTypesBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/SpellAnimationTypes"
      },
      "headers": {
        "page": {},
        "search": {},
        "spellAnimationTypes": {}
      }
    },
    "SpellAnimationTypesResponse": {
      "description": "SpellAnimationTypesResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/SpellAnimationTypes"
      },
      "headers": {
        "page": {},
        "spellAnimationTypes": {}
      }
    },
    "SpellAnimationsBySearchResponse": {
      "description": "SpellAnimationsBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/SpellAnimations"
      },
      "headers": {
        "page": {},
        "search": {},
        "spellAnimations": {}
      }
    },
    "SpellAnimationsResponse": {
      "description": "SpellAnimationsResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/SpellAnimations"
      },
      "headers": {
        "page": {},
        "spellAnimations": {}
      }
    },
    "SpellDurationFormulaResponse": {
      "description": "SpellDurationFormulaResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/SpellDurationFormula"
      },
      "headers": {
        "spellDurationFormula": {}
      }
    },
    "SpellDurationFormulasBySearchResponse": {
      "description": "SpellDurationFormulasBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/SpellDurationFormulas"
      },
      "headers": {
        "page": {},
        "search": {},
        "spellDurationFormulas": {}
      }
    },
    "SpellDurationFormulasResponse": {
      "description": "SpellDurationFormulasResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/SpellDurationFormulas"
      },
      "headers": {
        "page": {},
        "spellDurationFormulas": {}
      }
    },
    "SpellEffectFormulaResponse": {
      "description": "SpellEffectFormulaResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/SpellEffectFormula"
      },
      "headers": {
        "spellEffectFormula": {}
      }
    },
    "SpellEffectFormulasBySearchResponse": {
      "description": "SpellEffectFormulasBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/SpellEffectFormulas"
      },
      "headers": {
        "page": {},
        "search": {},
        "spellEffectFormulas": {}
      }
    },
    "SpellEffectFormulasResponse": {
      "description": "SpellEffectFormulasResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/SpellEffectFormulas"
      },
      "headers": {
        "page": {},
        "spellEffectFormulas": {}
      }
    },
    "SpellEffectTypeResponse": {
      "description": "SpellEffectTypeResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/SpellEffectType"
      },
      "headers": {
        "spellEffectType": {}
      }
    },
    "SpellEffectTypesBySearchResponse": {
      "description": "SpellEffectTypesBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/SpellEffectTypes"
      },
      "headers": {
        "page": {},
        "search": {},
        "spellEffectTypes": {}
      }
    },
    "SpellEffectTypesResponse": {
      "description": "SpellEffectTypesResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/SpellEffectTypes"
      },
      "headers": {
        "page": {},
        "spellEffectTypes": {}
      }
    },
    "SpellResponse": {
      "description": "SpellResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Spell"
      },
      "headers": {
        "spell": {}
      }
    },
    "SpellTargetTypeResponse": {
      "description": "SpellTargetTypeResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/SpellTargetType"
      },
      "headers": {
        "spellTargetType": {}
      }
    },
    "SpellTargetTypesBySearchResponse": {
      "description": "SpellTargetTypesBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/SpellTargetTypes"
      },
      "headers": {
        "page": {},
        "search": {},
        "spellTargetTypes": {}
      }
    },
    "SpellTargetTypesResponse": {
      "description": "SpellTargetTypesResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/SpellTargetTypes"
      },
      "headers": {
        "page": {},
        "spellTargetTypes": {}
      }
    },
    "SpellTravelTypeResponse": {
      "description": "SpellTravelTypeResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/SpellTravelType"
      },
      "headers": {
        "spellTravelType": {}
      }
    },
    "SpellTravelTypesBySearchResponse": {
      "description": "SpellTravelTypesBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/SpellTravelTypes"
      },
      "headers": {
        "page": {},
        "search": {},
        "spellTravelTypes": {}
      }
    },
    "SpellTravelTypesResponse": {
      "description": "SpellTravelTypesResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/SpellTravelTypes"
      },
      "headers": {
        "page": {},
        "spellTravelTypes": {}
      }
    },
    "SpellsBySearchResponse": {
      "description": "SpellsBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Spells"
      },
      "headers": {
        "page": {},
        "search": {},
        "spells": {}
      }
    },
    "SpellsResponse": {
      "description": "SpellsResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Spells"
      },
      "headers": {
        "page": {},
        "spells": {}
      }
    },
    "UserAccountResponse": {
      "description": "UserAccountResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/UserAccount"
      },
      "headers": {
        "user": {},
        "userAccount": {}
      }
    },
    "UserAccountsBySearchResponse": {
      "description": "UserAccountsBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/UserAccounts"
      },
      "headers": {
        "page": {},
        "search": {},
        "user": {},
        "userAccounts": {}
      }
    },
    "UserAccountsResponse": {
      "description": "UserAccountsResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/UserAccounts"
      },
      "headers": {
        "page": {},
        "user": {},
        "userAccounts": {}
      }
    },
    "UserGoogleCallbackResponse": {
      "description": "UserGoogleCallbackResponse is what endpoints respond with. Typically this is just a 302 redirect.",
      "headers": {
        "redirectURL": {
          "type": "string"
        }
      }
    },
    "UserGoogleStartResponse": {
      "description": "UserGoogleStartResponse is what endpoints respond with",
      "headers": {
        "redirectURL": {
          "type": "string"
        }
      }
    },
    "UserLinkResponse": {
      "description": "UserLinkResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Character"
      },
      "headers": {
        "account": {},
        "character": {}
      }
    },
    "UserLoginResponse": {
      "description": "UserLoginResponse returns a token along with user details",
      "schema": {
        "$ref": "#/definitions/User"
      },
      "headers": {
        "token": {
          "type": "string"
        },
        "user": {}
      }
    },
    "UserResponse": {
      "description": "UserResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/User"
      },
      "headers": {
        "user": {}
      }
    },
    "UsersBySearchResponse": {
      "description": "UsersBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Users"
      },
      "headers": {
        "page": {},
        "search": {},
        "users": {}
      }
    },
    "UsersResponse": {
      "description": "UsersResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Users"
      },
      "headers": {
        "page": {},
        "users": {}
      }
    },
    "VariableResponse": {
      "description": "VariableResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Variable"
      },
      "headers": {
        "variable": {}
      }
    },
    "VariablesBySearchResponse": {
      "description": "VariablesBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Variables"
      },
      "headers": {
        "page": {},
        "search": {},
        "variables": {}
      }
    },
    "VariablesResponse": {
      "description": "VariablesResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Variables"
      },
      "headers": {
        "page": {},
        "variables": {}
      }
    },
    "ZoneExpansionResponse": {
      "description": "ZoneExpansionResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/ZoneExpansion"
      },
      "headers": {
        "zoneExpansion": {}
      }
    },
    "ZoneExpansionsBySearchResponse": {
      "description": "ZoneExpansionsBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/ZoneExpansions"
      },
      "headers": {
        "page": {},
        "search": {},
        "zoneExpansions": {}
      }
    },
    "ZoneExpansionsResponse": {
      "description": "ZoneExpansionsResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/ZoneExpansions"
      },
      "headers": {
        "page": {},
        "zoneExpansions": {}
      }
    },
    "ZoneResponse": {
      "description": "ZoneResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Zone"
      },
      "headers": {
        "zone": {}
      }
    },
    "ZonesBySearchResponse": {
      "description": "ZonesBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Zones"
      },
      "headers": {
        "page": {},
        "search": {},
        "zones": {}
      }
    },
    "ZonesResponse": {
      "description": "ZonesResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Zones"
      },
      "headers": {
        "page": {},
        "zones": {}
      }
    }
  },
  "securityDefinitions": {
    "apiKey": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "apiKey": []
    }
  ],
  "x-meta-array": [
    "value1",
    "value2"
  ],
  "x-meta-array-obj": [
    {
      "name": "obj",
      "value": "field"
    }
  ],
  "x-meta-value": "value"
}