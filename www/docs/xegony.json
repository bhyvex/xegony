{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json",
    "application/xml",
    "application/yaml"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Xegony API.",
    "contact": {
      "name": "Xackery",
      "email": "xackery@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "host": "localhost:8080",
  "basePath": "/api",
  "paths": {
    "/account": {
      "get": {
        "description": "This will show all available accounts by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "account"
        ],
        "summary": "Lists accounts",
        "operationId": "listAccount",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccountsResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an account",
        "tags": [
          "account"
        ],
        "summary": "Create an account",
        "operationId": "createAccount",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Account",
            "description": "Account details to create",
            "name": "account",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccountResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/account/search": {
      "get": {
        "description": "This will show all available accounts by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "account"
        ],
        "summary": "Search accounts by name",
        "operationId": "listAccountBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "Name",
            "description": "Name is which account to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccountsBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/account/{ID}": {
      "get": {
        "description": "This will get an individual account available accounts by default.",
        "tags": [
          "account"
        ],
        "summary": "Get an account",
        "operationId": "getAccount",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccountResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an account",
        "tags": [
          "account"
        ],
        "summary": "Edit an account",
        "operationId": "editAccount",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Account",
            "description": "Account details to edit",
            "name": "account",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccountResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an account",
        "tags": [
          "account"
        ],
        "summary": "Delete an account",
        "operationId": "deleteAccount",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/character": {
      "get": {
        "description": "This will show all available characters by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "character"
        ],
        "summary": "Lists characters",
        "operationId": "listCharacter",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CharactersResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an character",
        "tags": [
          "character"
        ],
        "summary": "Create an character",
        "operationId": "createCharacter",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Character",
            "description": "Character details to create",
            "name": "character",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Character"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CharacterResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/character/search": {
      "get": {
        "description": "This will show all available characters by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "character"
        ],
        "summary": "Search characters by name",
        "operationId": "listCharacterBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "Name",
            "description": "Name is which character to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CharactersBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/character/{ID}": {
      "get": {
        "description": "This will get an individual character available characters by default.",
        "tags": [
          "character"
        ],
        "summary": "Get an character",
        "operationId": "getCharacter",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CharacterResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an character",
        "tags": [
          "character"
        ],
        "summary": "Edit an character",
        "operationId": "editCharacter",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Character",
            "description": "Character details to edit",
            "name": "character",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Character"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CharacterResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an character",
        "tags": [
          "character"
        ],
        "summary": "Delete an character",
        "operationId": "deleteCharacter",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/config": {
      "get": {
        "description": "This will show all available configs by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "config"
        ],
        "summary": "Lists configs",
        "operationId": "listConfig",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ConfigsResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an config",
        "tags": [
          "config"
        ],
        "summary": "Create an config",
        "operationId": "createConfig",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Config",
            "description": "Config details to create",
            "name": "config",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Config"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ConfigResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/config/search": {
      "get": {
        "description": "This will show all available configs by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "config"
        ],
        "summary": "Search configs by name",
        "operationId": "listConfigBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "googleToken",
            "x-go-name": "Key",
            "description": "Key is which config to get information about",
            "name": "key",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "key",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ConfigsBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/config/{Key}": {
      "get": {
        "description": "This will get an individual config available configs by default.",
        "tags": [
          "config"
        ],
        "summary": "Get an config",
        "operationId": "getConfig",
        "parameters": [
          {
            "type": "string",
            "example": "74887",
            "x-go-name": "Key",
            "description": "Key to get information about",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ConfigResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an config",
        "tags": [
          "config"
        ],
        "summary": "Edit an config",
        "operationId": "editConfig",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "example": "googleToken",
            "x-go-name": "Key",
            "description": "Key to get information about",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Config",
            "description": "Config details to edit",
            "name": "config",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Config"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ConfigResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an config",
        "tags": [
          "config"
        ],
        "summary": "Delete an config",
        "operationId": "deleteConfig",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "example": "74887",
            "x-go-name": "Key",
            "description": "Key to get information about",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/race": {
      "get": {
        "description": "This will show all available races by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "race"
        ],
        "summary": "Lists races",
        "operationId": "listRace",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RacesResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an race",
        "tags": [
          "race"
        ],
        "summary": "Create an race",
        "operationId": "createRace",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Race",
            "description": "Race details to create",
            "name": "race",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Race"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RaceResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/race/search": {
      "get": {
        "description": "This will show all available races by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "race"
        ],
        "summary": "Search races by name",
        "operationId": "listRaceBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "Name",
            "description": "Name is which race to get information about",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "id",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RacesBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/race/{ID}": {
      "get": {
        "description": "This will get an individual race available races by default.",
        "tags": [
          "race"
        ],
        "summary": "Get an race",
        "operationId": "getRace",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RaceResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an race",
        "tags": [
          "race"
        ],
        "summary": "Edit an race",
        "operationId": "editRace",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Race",
            "description": "Race details to edit",
            "name": "race",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Race"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RaceResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an race",
        "tags": [
          "race"
        ],
        "summary": "Delete an race",
        "operationId": "deleteRace",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell": {
      "get": {
        "description": "This will show all available spells by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spell"
        ],
        "summary": "Lists spells",
        "operationId": "listSpell",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "short_name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellsResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an spell",
        "tags": [
          "spell"
        ],
        "summary": "Create an spell",
        "operationId": "createSpell",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Spell",
            "description": "Spell details to create",
            "name": "spell",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Spell"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/search": {
      "get": {
        "description": "This will show all available spells by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "spell"
        ],
        "summary": "Search spells by name",
        "operationId": "listSpellBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "ShortName",
            "description": "ShortName is which spell to get information about",
            "name": "shortName",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "short_name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellsBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/spell/{ID}": {
      "get": {
        "description": "This will get an individual spell available spells by default.",
        "tags": [
          "spell"
        ],
        "summary": "Get an spell",
        "operationId": "getSpell",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an spell",
        "tags": [
          "spell"
        ],
        "summary": "Edit an spell",
        "operationId": "editSpell",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Spell",
            "description": "Spell details to edit",
            "name": "spell",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Spell"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SpellResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an spell",
        "tags": [
          "spell"
        ],
        "summary": "Delete an spell",
        "operationId": "deleteSpell",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "description": "This will show all available users by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "user"
        ],
        "summary": "Lists users",
        "operationId": "listUser",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "short_name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UsersResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an user",
        "tags": [
          "user"
        ],
        "summary": "Create an user",
        "operationId": "createUser",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "User",
            "description": "User details to create",
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/user/google/start": {
      "get": {
        "description": "Creates a single sign on for google chain",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "user"
        ],
        "summary": "Start a google single sign on process",
        "operationId": "getUserGoogleStart",
        "parameters": [
          {
            "type": "string",
            "example": "http://everzek.com",
            "x-go-name": "ReturnURL",
            "description": "ReturnURL is the URL to return once Oauth completes",
            "name": "returnURL",
            "in": "query"
          }
        ],
        "responses": {
          "302": {
            "description": "ErrRedirect",
            "schema": {
              "$ref": "#/definitions/ErrRedirect"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/user/search": {
      "get": {
        "description": "This will show all available users by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "user"
        ],
        "summary": "Search users by name",
        "operationId": "listUserBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "ShortName",
            "description": "ShortName is which user to get information about",
            "name": "shortName",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "short_name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UsersBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/user/{ID}": {
      "get": {
        "description": "This will get an individual user available users by default.",
        "tags": [
          "user"
        ],
        "summary": "Get an user",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an user",
        "tags": [
          "user"
        ],
        "summary": "Edit an user",
        "operationId": "editUser",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "User",
            "description": "User details to edit",
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an user",
        "tags": [
          "user"
        ],
        "summary": "Delete an user",
        "operationId": "deleteUser",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/zone": {
      "get": {
        "description": "This will show all available zones by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "zone"
        ],
        "summary": "Lists zones",
        "operationId": "listZone",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "short_name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZonesResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an zone",
        "tags": [
          "zone"
        ],
        "summary": "Create an zone",
        "operationId": "createZone",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "Zone",
            "description": "Zone details to create",
            "name": "zone",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZoneResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/zone/search": {
      "get": {
        "description": "This will show all available zones by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "zone"
        ],
        "summary": "Search zones by name",
        "operationId": "listZoneBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "ShortName",
            "description": "ShortName is which zone to get information about",
            "name": "shortName",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "short_name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZonesBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/zone/{ID}": {
      "get": {
        "description": "This will get an individual zone available zones by default.",
        "tags": [
          "zone"
        ],
        "summary": "Get an zone",
        "operationId": "getZone",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZoneResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an zone",
        "tags": [
          "zone"
        ],
        "summary": "Edit an zone",
        "operationId": "editZone",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Zone",
            "description": "Zone details to edit",
            "name": "zone",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZoneResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an zone",
        "tags": [
          "zone"
        ],
        "summary": "Delete an zone",
        "operationId": "deleteZone",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/zoneExpansion": {
      "get": {
        "description": "This will show all available zoneExpansions by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "zoneExpansion"
        ],
        "summary": "Lists zoneExpansions",
        "operationId": "listZoneExpansion",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "short_name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZoneExpansionsResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "post": {
        "description": "This will create an zoneExpansion",
        "tags": [
          "zoneExpansion"
        ],
        "summary": "Create an zoneExpansion",
        "operationId": "createZoneExpansion",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "x-go-name": "ZoneExpansion",
            "description": "ZoneExpansion details to create",
            "name": "zoneExpansion",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ZoneExpansion"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZoneExpansionResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/zoneExpansion/search": {
      "get": {
        "description": "This will show all available zoneExpansions by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/yaml"
        ],
        "tags": [
          "zoneExpansion"
        ],
        "summary": "Search zoneExpansions by name",
        "operationId": "listZoneExpansionBySearch",
        "parameters": [
          {
            "type": "string",
            "example": "xackery",
            "x-go-name": "ShortName",
            "description": "ShortName is which zoneExpansion to get information about",
            "name": "shortName",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "Offset",
            "description": "Offset is pagination, offset*limit",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "x-go-name": "Limit",
            "description": "Limit to how many items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "short_name",
            "x-go-name": "OrderBy",
            "description": "OrderBy is which field to order a page by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "x-go-name": "IsDescending",
            "description": "IsDescending will change sort order when true",
            "name": "isDescending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZoneExpansionsBySearchResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    },
    "/zoneExpansion/{ID}": {
      "get": {
        "description": "This will get an individual zoneExpansion available zoneExpansions by default.",
        "tags": [
          "zoneExpansion"
        ],
        "summary": "Get an zoneExpansion",
        "operationId": "getZoneExpansion",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZoneExpansionResponse"
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "put": {
        "description": "This will edit an zoneExpansion",
        "tags": [
          "zoneExpansion"
        ],
        "summary": "Edit an zoneExpansion",
        "operationId": "editZoneExpansion",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "ZoneExpansion",
            "description": "ZoneExpansion details to edit",
            "name": "zoneExpansion",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ZoneExpansion"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ZoneExpansionResponse"
          },
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete an zoneExpansion",
        "tags": [
          "zoneExpansion"
        ],
        "summary": "Delete an zoneExpansion",
        "operationId": "deleteZoneExpansion",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 74887,
            "description": "ID to get information about",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "ErrNoContent",
            "schema": {
              "$ref": "#/definitions/ErrNoContent"
            }
          },
          "400": {
            "description": "ErrValidation",
            "schema": {
              "$ref": "#/definitions/ErrValidation"
            }
          },
          "401": {
            "description": "ErrPermission",
            "schema": {
              "$ref": "#/definitions/ErrPermission"
            }
          },
          "default": {
            "description": "ErrInternal",
            "schema": {
              "$ref": "#/definitions/ErrInternal"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Aa": {
      "description": "Aa represents the root objects of Alternate Abilities",
      "type": "object",
      "properties": {
        "ID": {
          "description": "aa_ability",
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Category"
        },
        "charges": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Charges"
        },
        "classes": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Classes"
        },
        "deities": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Deities"
        },
        "drakkinHeritage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DrakkinHeritage"
        },
        "enabled": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Enabled"
        },
        "firstRankID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FirstRankID"
        },
        "grantOnly": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GrantOnly"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "races": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Races"
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status"
        },
        "type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "AaRank": {
      "description": "AaRank represents the root objects of Alternate Abilities",
      "type": "object",
      "properties": {
        "ID": {
          "description": "aa_ranks",
          "type": "integer",
          "format": "int64"
        },
        "cost": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Cost"
        },
        "descSid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DescSid"
        },
        "expansion": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Expansion"
        },
        "levelReq": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LevelReq"
        },
        "lowerHotkeySid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LowerHotkeySid"
        },
        "nextID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NextID"
        },
        "prevID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrevID"
        },
        "recastTime": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RecastTime"
        },
        "spell": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Spell"
        },
        "spellType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpellType"
        },
        "titleSid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TitleSid"
        },
        "upperHotkeySid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpperHotkeySid"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Account": {
      "description": "Account ties characters together, and represents login information to everquest",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "ID": {
          "description": "ID of user",
          "type": "integer",
          "format": "int64",
          "example": 74887
        },
        "banReason": {
          "$ref": "#/definitions/NullString"
        },
        "charname": {
          "type": "string",
          "x-go-name": "Charname",
          "example": "Shin"
        },
        "expansion": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Expansion",
          "example": 0
        },
        "gmspeed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Gmspeed",
          "example": 0
        },
        "hideme": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Hideme",
          "example": 0
        },
        "karma": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Karma",
          "example": 0
        },
        "lsaccountID": {
          "$ref": "#/definitions/NullInt64"
        },
        "miniloginIp": {
          "type": "string",
          "x-go-name": "MiniloginIP",
          "example": "127.0.0.1"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "xackery"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password",
          "example": "miniloginPassword"
        },
        "revoked": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Revoked",
          "example": 0
        },
        "rulesflag": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Rulesflag",
          "example": 0
        },
        "sharedplat": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Sharedplat",
          "example": 1
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status",
          "example": 250
        },
        "suspendReason": {
          "$ref": "#/definitions/NullString"
        },
        "suspendeduntil": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Suspendeduntil",
          "example": "0001-01-01T00:00:00Z"
        },
        "timeCreation": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimeCreation",
          "example": 1451818675
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Accounts": {
      "description": "Accounts is an array of account",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Account"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Activities": {
      "description": "Activities is an array of activity",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Activity"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Activity": {
      "description": "Activity represents entries to Tasks",
      "type": "object",
      "properties": {
        "activityID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ActivityID"
        },
        "activityType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ActivityType"
        },
        "delivertonpc": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Delivertonpc"
        },
        "goalcount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Goalcount"
        },
        "goalid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Goalid"
        },
        "goalmethod": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Goalmethod"
        },
        "optional": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Optional"
        },
        "step": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Step"
        },
        "taskID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TaskID"
        },
        "text1": {
          "type": "string",
          "x-go-name": "Text1"
        },
        "text2": {
          "type": "string",
          "x-go-name": "Text2"
        },
        "text3": {
          "type": "string",
          "x-go-name": "Text3"
        },
        "zone": {
          "$ref": "#/definitions/Zone"
        },
        "zoneid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ZoneID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "AuthClaim": {
      "description": "AuthClaim wraps all token data",
      "type": "object",
      "properties": {
        "aud": {
          "type": "string",
          "x-go-name": "Audience"
        },
        "exp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpiresAt"
        },
        "iat": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IssuedAt"
        },
        "isAdmin": {
          "type": "boolean",
          "x-go-name": "IsAdmin"
        },
        "isModerator": {
          "type": "boolean",
          "x-go-name": "IsModerator"
        },
        "iss": {
          "type": "string",
          "x-go-name": "Issuer"
        },
        "jti": {
          "type": "string",
          "x-go-name": "Id"
        },
        "nbf": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NotBefore"
        },
        "ownedLobbies": {
          "x-go-name": "OwnedLobbies"
        },
        "sub": {
          "type": "string",
          "x-go-name": "Subject"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Base": {
      "description": "Base is an everquest base data table representation",
      "type": "object",
      "properties": {
        "class": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Class"
        },
        "end": {
          "type": "number",
          "format": "double",
          "x-go-name": "End"
        },
        "endFac": {
          "type": "number",
          "format": "double",
          "x-go-name": "EndFac"
        },
        "hp": {
          "type": "number",
          "format": "double",
          "x-go-name": "Hp"
        },
        "hpFac": {
          "type": "number",
          "format": "double",
          "x-go-name": "HpFac"
        },
        "level": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Level"
        },
        "mana": {
          "type": "number",
          "format": "double",
          "x-go-name": "Mana"
        },
        "manaFac": {
          "type": "number",
          "format": "double",
          "x-go-name": "ManaFac"
        },
        "unk1": {
          "type": "number",
          "format": "double",
          "x-go-name": "Unk1"
        },
        "unk2": {
          "type": "number",
          "format": "double",
          "x-go-name": "Unk2"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Bazaar": {
      "description": "Bazaar is an item store on the website",
      "type": "object",
      "properties": {
        "Item": {
          "$ref": "#/definitions/Item"
        },
        "accountID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AccountID"
        },
        "createDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreateDate"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "itemID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "price": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Price"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Character": {
      "description": "Character holds data about players inside Everquest, it primarily uses character_data table",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "RestTimer": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Resttimer"
        },
        "aaExp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AaExp"
        },
        "aaPoints": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AaPoints"
        },
        "aaPointsOld": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AaPointsOld"
        },
        "aaPointsSpent": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AaPointsSpent"
        },
        "aaPointsSpentOld": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AaPointsSpentOld"
        },
        "abilityNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AbilityNumber"
        },
        "abilityTimeHours": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AbilityTimeHours"
        },
        "abilityTimeMinutes": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AbilityTimeMinutes"
        },
        "abilityTimeSeconds": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AbilityTimeSeconds"
        },
        "abilityUp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AbilityUp"
        },
        "accountID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AccountID"
        },
        "agi": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Agi"
        },
        "airRemaining": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AirRemaining"
        },
        "anon": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Anon"
        },
        "autosplitEnabled": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AutosplitEnabled"
        },
        "beard": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Beard"
        },
        "beardColor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BeardColor"
        },
        "birthday": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Birthday"
        },
        "careerTributePoints": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CareerTributePoints"
        },
        "cha": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Cha"
        },
        "classID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClassID"
        },
        "curHp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CurHp"
        },
        "deity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Deity"
        },
        "dex": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Dex"
        },
        "drakkinDetails": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DrakkinDetails"
        },
        "drakkinHeritage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DrakkinHeritage"
        },
        "drakkinTattoo": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DrakkinTattoo"
        },
        "eAaEffects": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EAaEffects"
        },
        "eExpendedAaSpent": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EExpendedAaSpent"
        },
        "eLastInvsnapshot": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ELastInvsnapshot"
        },
        "ePercentToAa": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EPercentToAa"
        },
        "endurance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Endurance"
        },
        "exp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Exp"
        },
        "eyeColor1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EyeColor1"
        },
        "eyeColor2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EyeColor2"
        },
        "face": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Face"
        },
        "firstlogon": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Firstlogon"
        },
        "gender": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Gender"
        },
        "gm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Gm"
        },
        "groupAutoConsent": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GroupAutoConsent"
        },
        "groupLeadershipExp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GroupLeadershipExp"
        },
        "groupLeadershipPoints": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GroupLeadershipPoints"
        },
        "guildAutoConsent": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "GuildAutoConsent"
        },
        "hairColor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HairColor"
        },
        "hairStyle": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HairStyle"
        },
        "heading": {
          "type": "number",
          "format": "double",
          "x-go-name": "Heading"
        },
        "hungerLevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HungerLevel"
        },
        "int": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Int"
        },
        "intoxication": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Intoxication"
        },
        "lastLogin": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LastLogin"
        },
        "lastName": {
          "type": "string",
          "x-go-name": "LastName"
        },
        "ldonPointsAvailable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdonPointsAvailable"
        },
        "ldonPointsGuk": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdonPointsGuk"
        },
        "ldonPointsMir": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdonPointsMir"
        },
        "ldonPointsMmc": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdonPointsMmc"
        },
        "ldonPointsRuj": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdonPointsRuj"
        },
        "ldonPointsTak": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdonPointsTak"
        },
        "leadershipExpOn": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LeadershipExpOn"
        },
        "level": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Level"
        },
        "level2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Level2"
        },
        "lfg": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Lfg"
        },
        "lfp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Lfp"
        },
        "mailkey": {
          "type": "string",
          "x-go-name": "Mailkey"
        },
        "mana": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Mana"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "points": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Points"
        },
        "pvp2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Pvp2"
        },
        "pvpBestKillStreak": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpBestKillStreak"
        },
        "pvpCareerPoints": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpCareerPoints"
        },
        "pvpCurrentKillStreak": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpCurrentKillStreak"
        },
        "pvpCurrentPoints": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpCurrentPoints"
        },
        "pvpDeaths": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpDeaths"
        },
        "pvpKills": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpKills"
        },
        "pvpStatus": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpStatus"
        },
        "pvpType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpType"
        },
        "pvpWorstDeathStreak": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpWorstDeathStreak"
        },
        "raceID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RaceID"
        },
        "raidAutoConsent": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RaidAutoConsent"
        },
        "raidLeadershipExp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RaidLeadershipExp"
        },
        "raidLeadershipPoints": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RaidLeadershipPoints"
        },
        "showHelm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ShowHelm"
        },
        "sta": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Sta"
        },
        "str": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Str"
        },
        "suffix": {
          "type": "string",
          "x-go-name": "Suffix"
        },
        "thirstLevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ThirstLevel"
        },
        "timePlayed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimePlayed"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "toxicity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Toxicity"
        },
        "tributeActive": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TributeActive"
        },
        "tributePoints": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TributePoints"
        },
        "tributeTimeRemaining": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TributeTimeRemaining"
        },
        "wis": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Wis"
        },
        "x": {
          "type": "number",
          "format": "double",
          "x-go-name": "X"
        },
        "xtargets": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Xtargets"
        },
        "y": {
          "type": "number",
          "format": "double",
          "x-go-name": "Y"
        },
        "z": {
          "type": "number",
          "format": "double",
          "x-go-name": "Z"
        },
        "zone": {
          "$ref": "#/definitions/Zone"
        },
        "zoneChangeCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ZoneChangeCount"
        },
        "zoneID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ZoneID"
        },
        "zoneInstance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ZoneInstance"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "CharacterGraph": {
      "description": "CharacterGraph holds data about players performance, it primarily uses character_graph table",
      "type": "object",
      "properties": {
        "aaExperience": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AAExperience"
        },
        "characterId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CharacterID"
        },
        "createDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreateDate"
        },
        "experience": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Experience"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Characters": {
      "description": "Characters is an array of character",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Character"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Class": {
      "description": "Class represents classes in EQ",
      "type": "object",
      "properties": {
        "bit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bit"
        },
        "icon": {
          "type": "string",
          "x-go-name": "Icon"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "shortName": {
          "type": "string",
          "x-go-name": "ShortName"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Config": {
      "description": "Config holds settings and configuration options",
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "x-go-name": "Category"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "icon": {
          "type": "string",
          "x-go-name": "Icon"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Configs": {
      "description": "Configs is an array of Config",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Config"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "DBStr": {
      "type": "object",
      "title": "DBStr represents the dbstr_us.txt file.",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "$ref": "#/definitions/DBStrType"
        },
        "typeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TypeID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "DBStrType": {
      "description": "http://wiki.eqemulator.org/p?dbstr_us.txt",
      "type": "object",
      "title": "DBStrType represents the category types found inside dbstr, and is refered to in entries.",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "EnvironmentType": {
      "description": "Used by spells.",
      "type": "object",
      "title": "EnvironmentType describes the type of environment this value works in.",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ErrDecodeBody": {
      "description": "ErrDecodeBody is a failure to decode a request body",
      "type": "object",
      "properties": {
        "Message": {
          "type": "string",
          "example": "failed to decode body"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ErrInternal": {
      "description": "ErrInternal is an internal server error",
      "type": "object",
      "properties": {
        "Message": {
          "type": "string",
          "example": "internal server error"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ErrInvalidArguments": {
      "description": "ErrInvalidArguments means arguments being passed in a request were invalid",
      "type": "object",
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ErrNoContent": {
      "description": "No content, or nothing changed.",
      "type": "object",
      "title": "ErrNoContent is an is used when no content should be displayed",
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ErrPermission": {
      "description": "ErrPermission is a permission denied generic error",
      "type": "object",
      "properties": {
        "Message": {
          "type": "string",
          "example": "permission denied"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ErrRedirect": {
      "description": "ErrRedirect means arguments being passed in a request were invalid",
      "type": "object",
      "properties": {
        "Message": {
          "type": "string",
          "example": "http//google.signon.com"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ErrValidation": {
      "description": "ErrValidation has many errors represented as Key/Value pairs of Field:Description inside REasons",
      "type": "object",
      "properties": {
        "Message": {
          "type": "string",
          "example": "failed to validate"
        },
        "Reasons": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": "test"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Error": {
      "description": "Error is used for Xegony Error handling",
      "type": "object",
      "properties": {
        "createDate": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreateDate"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "scope": {
          "type": "string",
          "x-go-name": "Scope"
        },
        "severity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Severity"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Faction": {
      "description": "Faction represents everquest factions",
      "type": "object",
      "properties": {
        "base": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Base"
        },
        "cleanName": {
          "type": "string",
          "x-go-name": "CleanName"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Fishing": {
      "description": "Fishing represents items inside everquest",
      "type": "object",
      "properties": {
        "Item": {
          "$ref": "#/definitions/Item"
        },
        "Itemid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "Npc": {
          "$ref": "#/definitions/Npc"
        },
        "Zone": {
          "$ref": "#/definitions/Zone"
        },
        "chance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Chance"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "npcChance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcChance"
        },
        "npcId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcID"
        },
        "skillLevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SkillLevel"
        },
        "zoneid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ZoneID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Forage": {
      "description": "Forage represents items inside everquest",
      "type": "object",
      "properties": {
        "Item": {
          "$ref": "#/definitions/Item"
        },
        "Itemid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "Zone": {
          "$ref": "#/definitions/Zone"
        },
        "chance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Chance"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "level": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Level"
        },
        "zoneid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ZoneID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Forum": {
      "description": "Forum is the parent of topics, which groups posts together into sections",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "icon": {
          "type": "string",
          "x-go-name": "Icon"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "ownerId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "OwnerID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Frame": {
      "type": "integer",
      "format": "uint64",
      "title": "Frame represents a program counter inside a stack frame.",
      "x-go-package": "github.com/pkg/errors"
    },
    "Goal": {
      "description": "Goal represnts goallist, used by the everquest Task system",
      "type": "object",
      "properties": {
        "entryID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EntryID"
        },
        "listID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ListID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Hacker": {
      "description": "Hacker represents hacker reports inside everquest",
      "type": "object",
      "properties": {
        "Account": {
          "$ref": "#/definitions/Account"
        },
        "Character": {
          "$ref": "#/definitions/Character"
        },
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "Zone": {
          "$ref": "#/definitions/Zone"
        },
        "accountName": {
          "type": "string",
          "x-go-name": "AccountName"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Date"
        },
        "hacked": {
          "type": "string",
          "x-go-name": "Hacked"
        },
        "name": {
          "type": "string",
          "x-go-name": "CharacterName"
        },
        "zone": {
          "$ref": "#/definitions/NullString"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Item": {
      "description": "Item represents items inside everquest",
      "type": "object",
      "properties": {
        "UNK012": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk012"
        },
        "UNK013": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk013"
        },
        "UNK014": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk014"
        },
        "UNK033": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk033"
        },
        "UNK054": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk054"
        },
        "UNK059": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk059"
        },
        "UNK060": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk060"
        },
        "UNK120": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk120"
        },
        "UNK121": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk121"
        },
        "UNK123": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk123"
        },
        "UNK124": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk124"
        },
        "UNK127": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk127"
        },
        "UNK132": {
          "$ref": "#/definitions/NullString"
        },
        "UNK134": {
          "type": "string",
          "x-go-name": "Unk134"
        },
        "UNK137": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk137"
        },
        "UNK142": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk142"
        },
        "UNK147": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk147"
        },
        "UNK152": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk152"
        },
        "UNK157": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk157"
        },
        "UNK193": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk193"
        },
        "UNK214": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk214"
        },
        "UNK219": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk219"
        },
        "UNK220": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk220"
        },
        "UNK221": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk221"
        },
        "UNK223": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk223"
        },
        "UNK224": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk224"
        },
        "UNK225": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk225"
        },
        "UNK226": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk226"
        },
        "UNK227": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk227"
        },
        "UNK228": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk228"
        },
        "UNK229": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk229"
        },
        "UNK230": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk230"
        },
        "UNK231": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk231"
        },
        "UNK232": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk232"
        },
        "UNK233": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk233"
        },
        "UNK234": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk234"
        },
        "UNK236": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk236"
        },
        "UNK237": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk237"
        },
        "UNK238": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk238"
        },
        "UNK239": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk239"
        },
        "UNK240": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk240"
        },
        "UNK241": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unk241"
        },
        "aagi": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Aagi"
        },
        "ac": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Ac"
        },
        "accuracy": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Accuracy"
        },
        "acha": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Acha"
        },
        "adex": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Adex"
        },
        "aint": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Aint"
        },
        "artifactflag": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Artifactflag"
        },
        "asta": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Asta"
        },
        "astr": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Astr"
        },
        "attack": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Attack"
        },
        "attuneable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Attuneable"
        },
        "augdistiller": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augdistiller"
        },
        "augrestrict": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augrestrict"
        },
        "augslot1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot1"
        },
        "augslot1type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot1type"
        },
        "augslot1unk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot1unk2"
        },
        "augslot1visible": {
          "$ref": "#/definitions/NullInt64"
        },
        "augslot2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot2"
        },
        "augslot2type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot2type"
        },
        "augslot2unk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot2unk2"
        },
        "augslot2visible": {
          "$ref": "#/definitions/NullInt64"
        },
        "augslot3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot3"
        },
        "augslot3type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot3type"
        },
        "augslot3unk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot3unk2"
        },
        "augslot3visible": {
          "$ref": "#/definitions/NullInt64"
        },
        "augslot4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot4"
        },
        "augslot4type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot4type"
        },
        "augslot4unk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot4unk2"
        },
        "augslot4visible": {
          "$ref": "#/definitions/NullInt64"
        },
        "augslot5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot5"
        },
        "augslot5type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot5type"
        },
        "augslot5unk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot5unk2"
        },
        "augslot5visible": {
          "$ref": "#/definitions/NullInt64"
        },
        "augslot6": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot6"
        },
        "augslot6type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot6type"
        },
        "augslot6unk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot6unk2"
        },
        "augslot6visible": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot6visible"
        },
        "augtype": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augtype"
        },
        "avoidance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Avoidance"
        },
        "awis": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Awis"
        },
        "backstabdmg": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Backstabdmg"
        },
        "bagsize": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bagsize"
        },
        "bagslots": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bagslots"
        },
        "bagtype": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bagtype"
        },
        "bagwr": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bagwr"
        },
        "banedmgamt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Banedmgamt"
        },
        "banedmgbody": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Banedmgbody"
        },
        "banedmgrace": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Banedmgrace"
        },
        "banedmgraceamt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Banedmgraceamt"
        },
        "bardeffect": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bardeffect"
        },
        "bardeffecttype": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bardeffecttype"
        },
        "bardlevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bardlevel"
        },
        "bardlevel2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bardlevel2"
        },
        "bardname": {
          "type": "string",
          "x-go-name": "Bardname"
        },
        "bardtype": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bardtype"
        },
        "bardunk1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bardunk1"
        },
        "bardunk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bardunk2"
        },
        "bardunk3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bardunk3"
        },
        "bardunk4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bardunk4"
        },
        "bardunk5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bardunk5"
        },
        "bardunk7": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bardunk7"
        },
        "bardvalue": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bardvalue"
        },
        "benefitflag": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Benefitflag"
        },
        "book": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Book"
        },
        "booktype": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Booktype"
        },
        "casttime": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Casttime"
        },
        "casttime_": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Casttime2"
        },
        "character": {
          "$ref": "#/definitions/Character"
        },
        "charges": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Charges"
        },
        "charid": {
          "description": "inventory added details",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CharID"
        },
        "charmfile": {
          "type": "string",
          "x-go-name": "Charmfile"
        },
        "charmfileid": {
          "type": "string",
          "x-go-name": "Charmfileid"
        },
        "clairvoyance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Clairvoyance"
        },
        "classes": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Classes"
        },
        "clickeffect": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Clickeffect"
        },
        "clicklevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Clicklevel"
        },
        "clicklevel2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Clicklevel2"
        },
        "clickname": {
          "type": "string",
          "x-go-name": "Clickname"
        },
        "clicktype": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Clicktype"
        },
        "clickunk5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Clickunk5"
        },
        "clickunk6": {
          "type": "string",
          "x-go-name": "Clickunk6"
        },
        "clickunk7": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Clickunk7"
        },
        "color": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Color"
        },
        "combateffects": {
          "type": "string",
          "x-go-name": "Combateffects"
        },
        "comment": {
          "type": "string",
          "x-go-name": "Comment"
        },
        "cr": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Cr"
        },
        "created": {
          "type": "string",
          "x-go-name": "Created"
        },
        "customData": {
          "type": "string",
          "x-go-name": "CustomData"
        },
        "damage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Damage"
        },
        "damageshield": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Damageshield"
        },
        "deity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Deity"
        },
        "delay": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Delay"
        },
        "dotshielding": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Dotshielding"
        },
        "dr": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Dr"
        },
        "dsmitigation": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Dsmitigation"
        },
        "elemdmgamt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Elemdmgamt"
        },
        "elemdmgtype": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Elemdmgtype"
        },
        "elitematerial": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Elitematerial"
        },
        "endur": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Endur"
        },
        "enduranceregen": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Enduranceregen"
        },
        "epicitem": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Epicitem"
        },
        "evoid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Evoid"
        },
        "evoitem": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Evoitem"
        },
        "evolvinglevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Evolvinglevel"
        },
        "evomax": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Evomax"
        },
        "expendablearrow": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Expendablearrow"
        },
        "extradmgamt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Extradmgamt"
        },
        "extradmgskill": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Extradmgskill"
        },
        "factionamt1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Factionamt1"
        },
        "factionamt2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Factionamt2"
        },
        "factionamt3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Factionamt3"
        },
        "factionamt4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Factionamt4"
        },
        "factionmod1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Factionmod1"
        },
        "factionmod2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Factionmod2"
        },
        "factionmod3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Factionmod3"
        },
        "factionmod4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Factionmod4"
        },
        "favor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Favor"
        },
        "filename": {
          "type": "string",
          "x-go-name": "Filename"
        },
        "focuseffect": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Focuseffect"
        },
        "focuslevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Focuslevel"
        },
        "focuslevel2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Focuslevel2"
        },
        "focusname": {
          "type": "string",
          "x-go-name": "Focusname"
        },
        "focustype": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Focustype"
        },
        "focusunk1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Focusunk1"
        },
        "focusunk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Focusunk2"
        },
        "focusunk3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Focusunk3"
        },
        "focusunk4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Focusunk4"
        },
        "focusunk5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Focusunk5"
        },
        "focusunk6": {
          "type": "string",
          "x-go-name": "Focusunk6"
        },
        "focusunk7": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Focusunk7"
        },
        "fr": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Fr"
        },
        "fvnodrop": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Fvnodrop"
        },
        "guildfavor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Guildfavor"
        },
        "haste": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Haste"
        },
        "healamt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Healamt"
        },
        "heirloom": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Heirloom"
        },
        "heroicAgi": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicAgi"
        },
        "heroicCha": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicCha"
        },
        "heroicCr": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicCr"
        },
        "heroicDex": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicDex"
        },
        "heroicDr": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicDr"
        },
        "heroicFr": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicFr"
        },
        "heroicInt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicInt"
        },
        "heroicMr": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicMr"
        },
        "heroicPr": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicPr"
        },
        "heroicSta": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicSta"
        },
        "heroicStr": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicStr"
        },
        "heroicSvcorrup": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicSvcorrup"
        },
        "heroicWis": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HeroicWis"
        },
        "herosforgemodel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Herosforgemodel"
        },
        "hp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Hp"
        },
        "icon": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Icon"
        },
        "id": {
          "description": "normal items db",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "idfile": {
          "type": "string",
          "x-go-name": "Idfile"
        },
        "instnodrop": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Instnodrop"
        },
        "invcolor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "InvColor"
        },
        "itemCategory": {
          "$ref": "#/definitions/ItemCategory"
        },
        "itemclass": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Itemclass"
        },
        "itemid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "itemtype": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Itemtype"
        },
        "ldonprice": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Ldonprice"
        },
        "ldonsellbackrate": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Ldonsellbackrate"
        },
        "ldonsold": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Ldonsold"
        },
        "ldontheme": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Ldontheme"
        },
        "light": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Light"
        },
        "lore": {
          "type": "string",
          "x-go-name": "Lore"
        },
        "lorefile": {
          "type": "string",
          "x-go-name": "Lorefile"
        },
        "loregroup": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Loregroup"
        },
        "magic": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Magic"
        },
        "mana": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Mana"
        },
        "manaregen": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Manaregen"
        },
        "material": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Material"
        },
        "maxcharges": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Maxcharges"
        },
        "mr": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Mr"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "nodrop": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Nodrop"
        },
        "nopet": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Nopet"
        },
        "norent": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Norent"
        },
        "notransfer": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Notransfer"
        },
        "ornamentHeroModel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "OrnamentHeroModel"
        },
        "ornamenticon": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Ornamenticon"
        },
        "ornamentidfile": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Ornamentidfile"
        },
        "pendingloreflag": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Pendingloreflag"
        },
        "placeable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Placeable"
        },
        "pointtype": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Pointtype"
        },
        "potionbelt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Potionbelt"
        },
        "potionbeltslots": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Potionbeltslots"
        },
        "powersourcecapacity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Powersourcecapacity"
        },
        "pr": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Pr"
        },
        "price": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Price"
        },
        "proceffect": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Proceffect"
        },
        "proclevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Proclevel"
        },
        "proclevel2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Proclevel2"
        },
        "procname": {
          "type": "string",
          "x-go-name": "Procname"
        },
        "procrate": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Procrate"
        },
        "proctype": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Proctype"
        },
        "procunk1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Procunk1"
        },
        "procunk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Procunk2"
        },
        "procunk3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Procunk3"
        },
        "procunk4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Procunk4"
        },
        "procunk6": {
          "type": "string",
          "x-go-name": "Procunk6"
        },
        "procunk7": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Procunk7"
        },
        "purity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Purity"
        },
        "questitemflag": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Questitemflag"
        },
        "races": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Races"
        },
        "range": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Range"
        },
        "recastdelay": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Recastdelay"
        },
        "recasttype": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Recasttype"
        },
        "reclevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Reclevel"
        },
        "recskill": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Recskill"
        },
        "reference": {
          "description": "Reference is used when listing from npc",
          "type": "string",
          "x-go-name": "Reference"
        },
        "regen": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Regen"
        },
        "reqlevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Reqlevel"
        },
        "scriptfileid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Scriptfileid"
        },
        "scrolleffect": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Scrolleffect"
        },
        "scrolllevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Scrolllevel"
        },
        "scrolllevel2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Scrolllevel2"
        },
        "scrollname": {
          "type": "string",
          "x-go-name": "Scrollname"
        },
        "scrolltype": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Scrolltype"
        },
        "scrollunk1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Scrollunk1"
        },
        "scrollunk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Scrollunk2"
        },
        "scrollunk3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Scrollunk3"
        },
        "scrollunk4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Scrollunk4"
        },
        "scrollunk5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Scrollunk5"
        },
        "scrollunk6": {
          "type": "string",
          "x-go-name": "Scrollunk6"
        },
        "scrollunk7": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Scrollunk7"
        },
        "sellrate": {
          "type": "number",
          "format": "double",
          "x-go-name": "Sellrate"
        },
        "serialization": {
          "$ref": "#/definitions/NullString"
        },
        "serialized": {
          "$ref": "#/definitions/NullTime"
        },
        "shielding": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Shielding"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "sizeName": {
          "type": "string",
          "x-go-name": "SizeName"
        },
        "skillmodmax": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Skillmodmax"
        },
        "skillmodtype": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Skillmodtype"
        },
        "skillmodvalue": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Skillmodvalue"
        },
        "slot": {
          "$ref": "#/definitions/Slot"
        },
        "slotList": {
          "type": "string",
          "x-go-name": "SlotList"
        },
        "slotid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SlotID"
        },
        "slots": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Slots"
        },
        "source": {
          "type": "string",
          "x-go-name": "Source"
        },
        "spelldmg": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Spelldmg"
        },
        "spellshield": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Spellshield"
        },
        "stackable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Stackable"
        },
        "stacksize": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Stacksize"
        },
        "strikethrough": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Strikethrough"
        },
        "stunresist": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Stunresist"
        },
        "styleColor": {
          "type": "string",
          "x-go-name": "StyleColor"
        },
        "summonedflag": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Summonedflag"
        },
        "svcorruption": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Svcorruption"
        },
        "tradeskills": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Tradeskills"
        },
        "updated": {
          "$ref": "#/definitions/NullTime"
        },
        "verified": {
          "$ref": "#/definitions/NullTime"
        },
        "weight": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Weight"
        },
        "worneffect": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Worneffect"
        },
        "wornlevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Wornlevel"
        },
        "wornlevel2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Wornlevel2"
        },
        "wornname": {
          "type": "string",
          "x-go-name": "Wornname"
        },
        "worntype": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Worntype"
        },
        "wornunk1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Wornunk1"
        },
        "wornunk2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Wornunk2"
        },
        "wornunk3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Wornunk3"
        },
        "wornunk4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Wornunk4"
        },
        "wornunk5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Wornunk5"
        },
        "wornunk6": {
          "type": "string",
          "x-go-name": "Wornunk6"
        },
        "wornunk7": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Wornunk7"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ItemAttribute": {
      "description": "ItemAttribute holds item attribute information",
      "type": "object",
      "properties": {
        "Icon": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ItemCategory": {
      "description": "ItemCategory holds item category information",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "Icon": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Items": {
      "description": "Items contains an array of item",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Item"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "LightType": {
      "type": "object",
      "title": "LightType is used to determine the type of light emission an item or spell should cause.",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "LootDrop": {
      "description": "LootDrop is the parent of loot drop entries",
      "type": "object",
      "properties": {
        "Entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LootDropEntry"
          }
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "LootDropEntry": {
      "description": "LootDropEntry groups together items that npcs drop",
      "type": "object",
      "properties": {
        "chance": {
          "type": "number",
          "format": "double",
          "x-go-name": "Chance"
        },
        "disabledChance": {
          "type": "number",
          "format": "double",
          "x-go-name": "DisabledChance"
        },
        "equipItem": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EquipItem"
        },
        "itemCharges": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemCharges"
        },
        "itemID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "lootdropId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LootdropID"
        },
        "maxlevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Maxlevel"
        },
        "minlevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Minlevel"
        },
        "multiplier": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Multiplier"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "LootTable": {
      "description": "LootTable is the parent of loottableentry",
      "type": "object",
      "properties": {
        "Entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LootTableEntry"
          }
        },
        "Npcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Npc"
          }
        },
        "avgcoin": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Avgcoin"
        },
        "done": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Done"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "maxcash": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Maxcash"
        },
        "mincash": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Mincash"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "LootTableEntry": {
      "description": "LootTableEntry group together loot drops for npc drops",
      "type": "object",
      "properties": {
        "droplimit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Droplimit"
        },
        "lootdropId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LootdropID"
        },
        "loottableId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LoottableID"
        },
        "mindrop": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Mindrop"
        },
        "multiplier": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Multiplier"
        },
        "probability": {
          "type": "number",
          "format": "double",
          "x-go-name": "Probability"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Mail": {
      "description": "Mail represents mail inside everquest",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "body": {
          "type": "string",
          "x-go-name": "Body"
        },
        "characterID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CharacterID"
        },
        "from": {
          "type": "string",
          "x-go-name": "From"
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status"
        },
        "subject": {
          "type": "string",
          "x-go-name": "Subject"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Timestamp"
        },
        "to": {
          "type": "string",
          "x-go-name": "To"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Merchant": {
      "description": "Merchant represents tradeskill merchants inside everquest",
      "type": "object",
      "properties": {
        "Entrys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MerchantEntry"
          }
        },
        "Npcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Npc"
          }
        },
        "merchantID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "MerchantEntry": {
      "description": "MerchantEntry group together loot drops for npc drops",
      "type": "object",
      "properties": {
        "Item": {
          "$ref": "#/definitions/Item"
        },
        "Merchant": {
          "$ref": "#/definitions/Merchant"
        },
        "altCurrencyCost": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AltCurrencyCost"
        },
        "classesRequired": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClassesRequired"
        },
        "factionRequired": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FactionRequired"
        },
        "itemID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "levelRequired": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LevelRequired"
        },
        "merchantID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MerchantID"
        },
        "probability": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Probability"
        },
        "slot": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Slot"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Npc": {
      "description": "Npc represents Non player characters in everquest",
      "type": "object",
      "properties": {
        "AC": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Ac"
        },
        "AGI": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Agi"
        },
        "ATK": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Atk"
        },
        "Accuracy": {
          "type": "integer",
          "format": "int64"
        },
        "Avoidance": {
          "type": "integer",
          "format": "int64"
        },
        "CHA": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Cha"
        },
        "CR": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Cr"
        },
        "Corrup": {
          "type": "integer",
          "format": "int64"
        },
        "DEX": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Dex"
        },
        "DR": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Dr"
        },
        "FR": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Fr"
        },
        "INT": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Int"
        },
        "MR": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Mr"
        },
        "PR": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Pr"
        },
        "PhR": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Phr"
        },
        "STA": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Sta"
        },
        "STR": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Str"
        },
        "WIS": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Wis"
        },
        "adventureTemplateId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AdventureTemplateID"
        },
        "aggroradius": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Aggroradius"
        },
        "altCurrencyId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AltCurrencyID"
        },
        "ammoIdfile": {
          "type": "string",
          "x-go-name": "AmmoIDfile"
        },
        "armortintBlue": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArmortintBlue"
        },
        "armortintGreen": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArmortintGreen"
        },
        "armortintId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArmortintID"
        },
        "armortintRed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArmortintRed"
        },
        "armtexture": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Armtexture"
        },
        "assistradius": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Assistradius"
        },
        "attackCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AttackCount"
        },
        "attackDelay": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AttackDelay"
        },
        "attackSpeed": {
          "type": "number",
          "format": "double",
          "x-go-name": "AttackSpeed"
        },
        "bodytype": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bodytype"
        },
        "bracertexture": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bracertexture"
        },
        "class": {
          "$ref": "#/definitions/Class"
        },
        "classID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClassID"
        },
        "cleanName": {
          "type": "string",
          "x-go-name": "CleanName"
        },
        "dMeleeTexture1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DMeleeTexture1"
        },
        "dMeleeTexture2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DMeleeTexture2"
        },
        "drakkinDetails": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DrakkinDetails"
        },
        "drakkinHeritage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DrakkinHeritage"
        },
        "drakkinTattoo": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DrakkinTattoo"
        },
        "emoteid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Emoteid"
        },
        "exclude": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Exclude"
        },
        "experience": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Experience"
        },
        "face": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Face"
        },
        "feettexture": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Feettexture"
        },
        "findable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Findable"
        },
        "fixed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Fixed"
        },
        "gender": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Gender"
        },
        "handtexture": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Handtexture"
        },
        "healscale": {
          "type": "number",
          "format": "double",
          "x-go-name": "Healscale"
        },
        "helmtexture": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Helmtexture"
        },
        "herosforgemodel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Herosforgemodel"
        },
        "hp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Hp"
        },
        "hpRegenRate": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HpRegenRate"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "ignoreDespawn": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IgnoreDespawn"
        },
        "isbot": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Isbot"
        },
        "isquest": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Isquest"
        },
        "lastname": {
          "$ref": "#/definitions/NullString"
        },
        "legtexture": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Legtexture"
        },
        "level": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Level"
        },
        "light": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Light"
        },
        "loottableId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LoottableID"
        },
        "luclinBeard": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LuclinBeard"
        },
        "luclinBeardcolor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LuclinBeardcolor"
        },
        "luclinEyecolor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LuclinEyecolor"
        },
        "luclinEyecolor2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LuclinEyecolor2"
        },
        "luclinHaircolor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LuclinHaircolor"
        },
        "luclinHairstyle": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LuclinHairstyle"
        },
        "mana": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Mana"
        },
        "manaRegenRate": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ManaRegenRate"
        },
        "maxdmg": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Maxdmg"
        },
        "maxlevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Maxlevel"
        },
        "merchantId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MerchantID"
        },
        "mindmg": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Mindmg"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "noTargetHotkey": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NoTargetHotkey"
        },
        "npcAggro": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcAggro"
        },
        "npcFactionId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcFactionID"
        },
        "npcSpellsEffectsId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcSpellsEffectsID"
        },
        "npcSpellsId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcSpellsID"
        },
        "npcspecialattks": {
          "type": "string",
          "x-go-name": "Npcspecialattks"
        },
        "peqid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Peqid"
        },
        "primMeleeType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimMeleeType"
        },
        "privateCorpse": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrivateCorpse"
        },
        "qglobal": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Qglobal"
        },
        "race": {
          "$ref": "#/definitions/Race"
        },
        "raceID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RaceID"
        },
        "raidTarget": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RaidTarget"
        },
        "rangedType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RangedType"
        },
        "runspeed": {
          "type": "number",
          "format": "double",
          "x-go-name": "Runspeed"
        },
        "scalerate": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Scalerate"
        },
        "secMeleeType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SecMeleeType"
        },
        "seeHide": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeeHide"
        },
        "seeImprovedHide": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeeImprovedHide"
        },
        "seeInvis": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeeInvis"
        },
        "seeInvisUndead": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeeInvisUndead"
        },
        "showName": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ShowName"
        },
        "size": {
          "type": "number",
          "format": "double",
          "x-go-name": "Size"
        },
        "slowMitigation": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SlowMitigation"
        },
        "spawnLimit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpawnLimit"
        },
        "specialAbilities": {
          "$ref": "#/definitions/NullString"
        },
        "specialAbilitiesList": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "SpecialAbilitiesList"
        },
        "spellscale": {
          "type": "number",
          "format": "double",
          "x-go-name": "Spellscale"
        },
        "texture": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Texture"
        },
        "trackable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Trackable"
        },
        "trapTemplate": {
          "$ref": "#/definitions/NullInt64"
        },
        "underwater": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Underwater"
        },
        "unique": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unique"
        },
        "uniqueSpawnByName": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UniqueSpawnByName"
        },
        "untargetable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Untargetable"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        },
        "walkspeed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Walkspeed"
        },
        "zone": {
          "$ref": "#/definitions/Zone"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "NpcLoot": {
      "description": "NpcLoot is a cache table used to speed up lookup of items for NPCs",
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/Item"
        },
        "itemID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "npc": {
          "$ref": "#/definitions/Npc"
        },
        "npcID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "NullInt64": {
      "description": "NullInt64 implements the Scanner interface so\nit can be used as a scan destination, similar to NullString.",
      "type": "object",
      "title": "NullInt64 represents an int64 that may be null.",
      "properties": {
        "Int64": {
          "type": "integer",
          "format": "int64"
        },
        "Valid": {
          "type": "boolean"
        }
      },
      "x-go-package": "database/sql"
    },
    "NullString": {
      "description": "var s NullString\nerr := db.QueryRow(\"SELECT name FROM foo WHERE id=?\", id).Scan(\u0026s)\n...\nif s.Valid {\nuse s.String\n} else {\nNULL value\n}",
      "type": "object",
      "title": "NullString represents a string that may be null.\nNullString implements the Scanner interface so\nit can be used as a scan destination:",
      "properties": {
        "String": {
          "type": "string"
        },
        "Valid": {
          "type": "boolean"
        }
      },
      "x-go-package": "database/sql"
    },
    "NullTime": {
      "description": "var nt NullTime\nerr := db.QueryRow(\"SELECT time FROM foo WHERE id=?\", id).Scan(\u0026nt)\n...\nif nt.Valid {\nuse nt.Time\n} else {\nNULL value\n}\n\nThis NullTime implementation is not driver-specific",
      "type": "object",
      "title": "NullTime represents a time.Time that may be NULL.\nNullTime implements the Scanner interface so\nit can be used as a scan destination:",
      "properties": {
        "Time": {
          "type": "string",
          "format": "date-time"
        },
        "Valid": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/go-sql-driver/mysql"
    },
    "Page": {
      "description": "Page represents pagination",
      "type": "object",
      "properties": {
        "isDescending": {
          "description": "IsDescending will change sort order when true",
          "type": "integer",
          "format": "int64",
          "x-go-name": "IsDescending",
          "example": 0
        },
        "limit": {
          "description": "Limit to how many items per page",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit",
          "example": 10
        },
        "offset": {
          "description": "Offset is pagination, offset*limit",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Offset",
          "example": 0
        },
        "orderBy": {
          "description": "OrderBy is which field to order a page by",
          "type": "string",
          "x-go-name": "OrderBy",
          "example": "id"
        },
        "total": {
          "description": "Total number of results found",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total",
          "example": 100
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Post": {
      "description": "Post are topic entries for forums",
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "x-go-name": "Body"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "ownerId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "OwnerID"
        },
        "topicID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TopicID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Race": {
      "description": "Race holds data about races (including models)",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "female": {
          "type": "string",
          "x-go-name": "Female"
        },
        "icon": {
          "type": "string",
          "x-go-name": "Icon"
        },
        "male": {
          "type": "string",
          "x-go-name": "Male"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "neutral": {
          "type": "string",
          "x-go-name": "Neutral"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Races": {
      "description": "Races is an array of Race",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Race"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Recipe": {
      "description": "Recipe represents tradeskill recipes inside everquest",
      "type": "object",
      "properties": {
        "enabled": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Enabled"
        },
        "entrys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecipeEntry"
          },
          "x-go-name": "Entrys"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "mustLearn": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MustLearn"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "nofail": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Nofail"
        },
        "notes": {
          "$ref": "#/definitions/NullString"
        },
        "quest": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Quest"
        },
        "replaceContainer": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ReplaceContainer"
        },
        "skillneeded": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Skillneeded"
        },
        "tradeskill": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Tradeskill"
        },
        "trivial": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Trivial"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "RecipeEntry": {
      "description": "RecipeEntry group together loot drops for npc drops",
      "type": "object",
      "properties": {
        "componentcount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Componentcount"
        },
        "failcount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Failcount"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "iscontainer": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Iscontainer"
        },
        "item": {
          "$ref": "#/definitions/Item"
        },
        "itemId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "recipe": {
          "$ref": "#/definitions/Recipe"
        },
        "recipeId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RecipeID"
        },
        "salvagecount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Salvagecount"
        },
        "successcount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Successcount"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ResistType": {
      "description": "Used by spells and items.\nhttps://github.com/Shendare/EQArchitect/blob/master/lists/resistance_types.csv",
      "type": "object",
      "title": "ResistType is used to describe resist type.",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Rule": {
      "type": "object",
      "title": "Rule represents the zone table, Everquest is split into zones.",
      "properties": {
        "notes": {
          "$ref": "#/definitions/NullString"
        },
        "ruleName": {
          "type": "string",
          "x-go-name": "Name"
        },
        "ruleValue": {
          "type": "string",
          "x-go-name": "Value"
        },
        "rulesetID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RulesetID"
        },
        "scope": {
          "type": "string",
          "x-go-name": "Scope"
        },
        "valueFloat": {
          "type": "number",
          "format": "double",
          "x-go-name": "ValueFloat"
        },
        "valueInt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ValueInt"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Schema": {
      "description": "Schema represents http://json-schema.org/latest/json-schema-validation.html#anchor111",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "enum": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "EnumInt"
        },
        "format": {
          "type": "string",
          "x-go-name": "Format"
        },
        "items": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Schema"
          },
          "x-go-name": "Items"
        },
        "maxLength": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxLength"
        },
        "maximum": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Maximum"
        },
        "maxproperties": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxProperties"
        },
        "minLength": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinLength"
        },
        "minimum": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Minimum"
        },
        "minproperties": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinProperties"
        },
        "optional": {
          "type": "boolean",
          "x-go-name": "Optional"
        },
        "pattern": {
          "type": "string",
          "x-go-name": "Pattern"
        },
        "patternproperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Schema"
          },
          "x-go-name": "PatternProperties"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Schema"
          },
          "x-go-name": "Properties"
        },
        "required": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Required"
        },
        "string": {
          "description": "Schema      string   `json:\"$schema,omitempty\"`",
          "type": "string",
          "x-go-name": "Type"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SharedBank": {
      "description": "SharedBank represents the sharedbank table, used for npcs",
      "type": "object",
      "properties": {
        "acctid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AccountID"
        },
        "augslot1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot1"
        },
        "augslot2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot2"
        },
        "augslot3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot3"
        },
        "augslot4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot4"
        },
        "augslot5": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot5"
        },
        "augslot6": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Augslot6"
        },
        "charges": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Charges"
        },
        "customData": {
          "$ref": "#/definitions/NullString"
        },
        "itemid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "slotid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SlotID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Skill": {
      "description": "Skill represents skills inside everquest",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Slot": {
      "description": "Slot represents item slots",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "bitID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BitID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "shortName": {
          "type": "string",
          "x-go-name": "ShortName"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Spawn": {
      "description": "Spawn represents the spawn_group table",
      "type": "object",
      "properties": {
        "delay": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Delay"
        },
        "despawn": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Despawn"
        },
        "despawnTimer": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DespawnTimer"
        },
        "dist": {
          "type": "number",
          "format": "double",
          "x-go-name": "Dist"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "maxX": {
          "type": "number",
          "format": "double",
          "x-go-name": "MaxX"
        },
        "maxY": {
          "type": "number",
          "format": "double",
          "x-go-name": "MaxY"
        },
        "minX": {
          "type": "number",
          "format": "double",
          "x-go-name": "MinX"
        },
        "minY": {
          "type": "number",
          "format": "double",
          "x-go-name": "MinY"
        },
        "mindelay": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Mindelay"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "spawnLimit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpawnLimit"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpawnEntry": {
      "description": "SpawnEntry represents the spawn2 table",
      "type": "object",
      "properties": {
        "Condition": {
          "type": "integer",
          "format": "int64"
        },
        "animation": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Animation"
        },
        "condValue": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CondValue"
        },
        "enabled": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Enabled"
        },
        "heading": {
          "type": "number",
          "format": "double",
          "x-go-name": "Heading"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "pathgrid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Pathgrid"
        },
        "respawntime": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RespawnTime"
        },
        "spawnID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpawnID"
        },
        "variance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Variance"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        },
        "x": {
          "type": "number",
          "format": "double",
          "x-go-name": "X"
        },
        "xScaled": {
          "description": "XScaled is used for scaling positions on the map",
          "type": "number",
          "format": "double",
          "x-go-name": "XScaled"
        },
        "y": {
          "type": "number",
          "format": "double",
          "x-go-name": "Y"
        },
        "yScaled": {
          "description": "YScaled is used for scaling positions on the map",
          "type": "number",
          "format": "double",
          "x-go-name": "YScaled"
        },
        "z": {
          "type": "number",
          "format": "double",
          "x-go-name": "Z"
        },
        "zScaled": {
          "description": "ZScaled is used for scaling positions on the map",
          "type": "number",
          "format": "double",
          "x-go-name": "ZScaled"
        },
        "zone": {
          "$ref": "#/definitions/Zone"
        },
        "zoneShortName": {
          "$ref": "#/definitions/NullString"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpawnEntrys": {
      "description": "SpawnEntrys is an array of SpawnEntry",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SpawnEntry"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpawnNpc": {
      "description": "SpawnNpc represents the spawnentry table. This is a pivot",
      "type": "object",
      "properties": {
        "chance": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Chance"
        },
        "npcID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcID"
        },
        "spawnID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpawnID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpawnNpcs": {
      "description": "SpawnNpcs is an array of SpawnNpc",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SpawnNpc"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpawnRespawn": {
      "description": "SpawnRespawn represents the respawn_times table",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Duration"
        },
        "instanceID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "InstanceID"
        },
        "start": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Start"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Spawns": {
      "description": "Spawns is an array of Spawn",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Spawn"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Spell": {
      "description": "Spell represents items inside everquest",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "aEDuration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AEDuration"
        },
        "activated": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Activated"
        },
        "aemaxtargets": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Aemaxtargets"
        },
        "allowrest": {
          "$ref": "#/definitions/NullInt64"
        },
        "animation": {
          "$ref": "#/definitions/SpellAnimation"
        },
        "animationID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AnimationID"
        },
        "aoeRange": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AoeRange"
        },
        "bonusHate": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BonusHate"
        },
        "buffDurationFormula": {
          "$ref": "#/definitions/SpellFormula"
        },
        "buffDurationFormulaID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BuffDurationFormulaID"
        },
        "buffduration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BuffDuration"
        },
        "canDelete": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CanDelete"
        },
        "canMgb": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CanMgb"
        },
        "castNotStanding": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CastNotStanding"
        },
        "castOnOther": {
          "$ref": "#/definitions/NullString"
        },
        "castOnYou": {
          "$ref": "#/definitions/NullString"
        },
        "castRestriction": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Castrestriction"
        },
        "castTime": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CastTime"
        },
        "castingAnimation": {
          "$ref": "#/definitions/SpellAnimation"
        },
        "castingAnimationID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CastingAnimationID"
        },
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpellComponent"
          },
          "x-go-name": "Components"
        },
        "coneStartAngle": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Conestartangle"
        },
        "coneStopAngle": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Conestopangle"
        },
        "dBStr": {
          "$ref": "#/definitions/DBStr"
        },
        "dBStrEffect1": {
          "$ref": "#/definitions/DBStr"
        },
        "dBStrEffect2": {
          "$ref": "#/definitions/DBStr"
        },
        "dBStrEffect2ID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DBStrEffect2ID"
        },
        "dBStrEffectID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DBStrEffectID"
        },
        "dBStrID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DBStrID"
        },
        "dBStrTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DBStrTypeID"
        },
        "deities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpellDeity"
          },
          "x-go-name": "Deitys"
        },
        "disallowSit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DisallowSit"
        },
        "dotStackingExempt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DotStackingExempt"
        },
        "effectCategory": {
          "$ref": "#/definitions/SpellEffectCategory"
        },
        "effectCategoryID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EffectCategoryID"
        },
        "effects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpellEffect"
          },
          "x-go-name": "Effects"
        },
        "endurCost": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Endurcost"
        },
        "endurTimerIndex": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Endurtimerindex"
        },
        "endurUpkeep": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Endurupkeep"
        },
        "environmentType": {
          "$ref": "#/definitions/EnvironmentType"
        },
        "environmentTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EnvironmentTypeID"
        },
        "field142": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field142"
        },
        "field143": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field143"
        },
        "field152": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field152"
        },
        "field153": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field153"
        },
        "field160": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field160"
        },
        "field163": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field163"
        },
        "field164": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field164"
        },
        "field169": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field169"
        },
        "field170": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field170"
        },
        "field171": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field171"
        },
        "field172": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field172"
        },
        "field181": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field181"
        },
        "field182": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field182"
        },
        "field198": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field198"
        },
        "field199": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field199"
        },
        "field203": {
          "$ref": "#/definitions/NullInt64"
        },
        "field204": {
          "$ref": "#/definitions/NullInt64"
        },
        "field206": {
          "$ref": "#/definitions/NullInt64"
        },
        "field209": {
          "$ref": "#/definitions/NullInt64"
        },
        "field210": {
          "$ref": "#/definitions/NullInt64"
        },
        "field215": {
          "$ref": "#/definitions/NullInt64"
        },
        "field216": {
          "$ref": "#/definitions/NullInt64"
        },
        "field217": {
          "$ref": "#/definitions/NullInt64"
        },
        "field220": {
          "$ref": "#/definitions/NullInt64"
        },
        "field221": {
          "$ref": "#/definitions/NullInt64"
        },
        "field222": {
          "$ref": "#/definitions/NullInt64"
        },
        "field223": {
          "$ref": "#/definitions/NullInt64"
        },
        "field225": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field225"
        },
        "field226": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field226"
        },
        "field232": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field232"
        },
        "field233": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field233"
        },
        "field234": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field234"
        },
        "field235": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field235"
        },
        "field236": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Field236"
        },
        "fizzleDifficulty": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FizzleDifficulty"
        },
        "group": {
          "$ref": "#/definitions/SpellGroup"
        },
        "hateAdded": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Hateadded"
        },
        "icon": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IconID"
        },
        "inCombat": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Incombat"
        },
        "isDiscipline": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Isdiscipline"
        },
        "ldonTrap": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdonTrap"
        },
        "lightType": {
          "$ref": "#/definitions/LightType"
        },
        "lightTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LightTypeID"
        },
        "mana": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Mana"
        },
        "maxDist": {
          "type": "number",
          "format": "double",
          "x-go-name": "MaxDist"
        },
        "maxDistMod": {
          "type": "number",
          "format": "double",
          "x-go-name": "MaxDistMod"
        },
        "maxResist": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxResist"
        },
        "maxtargets": {
          "$ref": "#/definitions/NullInt64"
        },
        "minDist": {
          "type": "number",
          "format": "double",
          "x-go-name": "MinDist"
        },
        "minDistMod": {
          "type": "number",
          "format": "double",
          "x-go-name": "MinDistMod"
        },
        "minRange": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinRange"
        },
        "minResist": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinResist"
        },
        "name": {
          "$ref": "#/definitions/NullString"
        },
        "nimbus": {
          "$ref": "#/definitions/SpellNimbus"
        },
        "nimbusEffectID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NimbusEffectID"
        },
        "noBlock": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NoBlock"
        },
        "noDispell": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NoDispell"
        },
        "noPartialResist": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NoPartialResist"
        },
        "notExtendable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NotExtendable"
        },
        "npcCategory": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcCategory"
        },
        "npcNoLos": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcNoLos"
        },
        "npcUsefulness": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NpcUsefulness"
        },
        "numHits": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumHits"
        },
        "numHitsType": {
          "$ref": "#/definitions/SpellNumHitsType"
        },
        "numHitsTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumHitsTypeID"
        },
        "oldIconID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "OldIconID"
        },
        "otherCasts": {
          "$ref": "#/definitions/NullString"
        },
        "outofCombat": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Outofcombat"
        },
        "pcNpcOnlyFlag": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PcNpcOnlyFlag"
        },
        "persistdeath": {
          "$ref": "#/definitions/NullInt64"
        },
        "player1": {
          "$ref": "#/definitions/NullString"
        },
        "pushBack": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PushBack"
        },
        "pushUp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PushUp"
        },
        "pvpResistBase": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpResistBase"
        },
        "pvpResistCalc": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpResistCalc"
        },
        "pvpResistCap": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PvpResistCap"
        },
        "range": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Range"
        },
        "rank": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Rank"
        },
        "reagents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpellReagent"
          },
          "x-go-name": "Reagents"
        },
        "recastTime": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RecastTime"
        },
        "recourseLinkSpell": {
          "$ref": "#/definitions/Spell"
        },
        "recourseLinkSpellID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RecourseLinkSpellID"
        },
        "recoveryTime": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RecoveryTime"
        },
        "reflectable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Reflectable"
        },
        "resistDifference": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ResistDifference"
        },
        "resistType": {
          "$ref": "#/definitions/ResistType"
        },
        "resistTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ResistTypeID"
        },
        "skill": {
          "$ref": "#/definitions/Skill"
        },
        "skillID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SkillID"
        },
        "sneaking": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Sneaking"
        },
        "songcap": {
          "$ref": "#/definitions/NullInt64"
        },
        "spellAffectID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpellAffectID"
        },
        "spellCategory": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpellCategory"
        },
        "spellFades": {
          "$ref": "#/definitions/NullString"
        },
        "spellGroup": {
          "$ref": "#/definitions/NullInt64"
        },
        "spellIcon": {
          "$ref": "#/definitions/SpellIcon"
        },
        "spellOldIcon": {
          "$ref": "#/definitions/SpellOldIcon"
        },
        "suspendable": {
          "$ref": "#/definitions/NullInt64"
        },
        "targetAnimation": {
          "$ref": "#/definitions/SpellAnimation"
        },
        "targetAnimationID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TargetAnimationID"
        },
        "targetType": {
          "$ref": "#/definitions/SpellTargetType"
        },
        "targetTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TargetTypeID"
        },
        "teleportZone": {
          "$ref": "#/definitions/Zone"
        },
        "teleportZoneShortName": {
          "$ref": "#/definitions/NullString"
        },
        "timeOfDay": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimeOfDay"
        },
        "travelTypeID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TravelTypeID"
        },
        "uninterruptable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Uninterruptable"
        },
        "unusuedIconID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UnusedIconID"
        },
        "useShortBuffBox": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UseShortBuffBox"
        },
        "viralRange": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ViralRange"
        },
        "viralTargets": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ViralTargets"
        },
        "viralTimer": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ViralTimer"
        },
        "youCast": {
          "$ref": "#/definitions/NullString"
        },
        "zoneType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Zonetype"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellAnimation": {
      "description": "SpellAnimation represents animations on spells\nhttp://www.eqemulator.org/forums/showthread.php?t=30731",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "Name": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellClass": {
      "description": "SpellClass stores minimum levels of each class\nranges 1 to 60",
      "type": "object",
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellComponent": {
      "description": "ranges from 1 to 4",
      "type": "object",
      "title": "SpellComponent represents items required or utilized for the spell.",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "spellID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpellID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellDeity": {
      "description": "There is a range of 0 to 16 to represent deities",
      "type": "object",
      "title": "SpellDeity represents the deities field inside spells_new.",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "deity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Deity"
        },
        "spellID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpellID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellEffect": {
      "description": "SpellEffect stores details about a spell's effects\nThere is 1 to 12 range of effects per spell",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "baseValue": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Base"
        },
        "class": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Class"
        },
        "effectID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EffectID"
        },
        "formula": {
          "$ref": "#/definitions/SpellFormula"
        },
        "formulaID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FormulaID"
        },
        "limitValue": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit"
        },
        "max": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Max"
        },
        "spellID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpellID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellEffectCategory": {
      "description": "SpellEffectCategory determines the type of effect, used by spells. e.g. beneficial\nhttp://wiki.eqemulator.org/p?spells_new",
      "type": "object",
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellEffectType": {
      "description": "SpellEffectType is the effect id type, e.g. SE_CURRENT_HP_ONCE\nhttp://wiki.eqemulator.org/p?Spell_Effect_IDs",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellFormula": {
      "description": "SpellFormula is used in various areas to represent spells",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellGroup": {
      "description": "http://wiki.eqemulator.org/p?Spell_Groups\u0026frm=spells_new",
      "type": "object",
      "title": "SpellGroup is used to group together spells of similar types.",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellIcon": {
      "description": "SpellIcon is used by spells to describe an icon",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellNimbus": {
      "description": "SpellNimbus is used to describe spell nimbus effects",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellNumHitsType": {
      "description": "SpellNumHitsType describes the type of numhits on a spell\nhttp://wiki.eqemulator.org/p?Numhit_Types\u0026frm=spells_new",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellOldIcon": {
      "description": "SpellOldIcon is used by spells to describe an icon for older clients (pre luclin)",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellReagent": {
      "description": "Ranges from 1 to 4",
      "type": "object",
      "title": "SpellReagent represents the no expend spell reagents used for a spell.",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "itemID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ItemID"
        },
        "spellID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SpellID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellTargetType": {
      "description": "SpellTargetType is used to identify who are valid targets for a spell\nhttp://wiki.eqemulator.org/p?Target_Types\u0026frm=spells_new",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "SpellTravelType": {
      "description": "SpellTravelType identifies the type of travel a spell uses",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Spells": {
      "description": "Spells is an array of Spell",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Spell"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "StackTrace": {
      "type": "array",
      "title": "StackTrace is stack of Frames from innermost (newest) to outermost (oldest).",
      "items": {
        "$ref": "#/definitions/Frame"
      },
      "x-go-package": "github.com/pkg/errors"
    },
    "StackTracer": {
      "description": "StackTracer is an interface for stack trace error handling",
      "type": "object",
      "properties": {
        "StackTrace": {
          "$ref": "#/definitions/StackTrace"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Task": {
      "description": "Task is an everquest entry, grouping the Activities entries",
      "type": "object",
      "properties": {
        "cashreward": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Cashreward"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Duration"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "maxlevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Maxlevel"
        },
        "minlevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Minlevel"
        },
        "repeatable": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Repeatable"
        },
        "reward": {
          "type": "string",
          "x-go-name": "Reward"
        },
        "rewardid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Rewardid"
        },
        "rewardmethod": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Rewardmethod"
        },
        "startzone": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Startzone"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "xpreward": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Xpreward"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Topic": {
      "description": "Topic is the entries inside forum, grouping posts",
      "type": "object",
      "properties": {
        "forumID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ForumID"
        },
        "icon": {
          "type": "string",
          "x-go-name": "Icon"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "User": {
      "description": "User represents the user for this application, and binds to accountID",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          },
          "x-go-name": "Accounts"
        },
        "characters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Character"
          },
          "x-go-name": "Characters"
        },
        "displayName": {
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "googleToken": {
          "type": "string",
          "x-go-name": "GoogleToken"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "primaryAccount": {
          "$ref": "#/definitions/Account"
        },
        "primaryAccountID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryAccountID"
        },
        "primaryCharacter": {
          "$ref": "#/definitions/Character"
        },
        "primaryCharacterID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryCharacterID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Users": {
      "description": "Users is an array of account",
      "type": "array",
      "items": {
        "$ref": "#/definitions/User"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Variable": {
      "type": "object",
      "title": "Variable represents the zone table, Everquest is split into zones.",
      "properties": {
        "information": {
          "type": "string",
          "x-go-name": "Information"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "ts": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Ts"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Zone": {
      "description": "Zone represents the zone table, Everquest is split into zones",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "MaxClip": {
          "type": "number",
          "format": "double"
        },
        "MinClip": {
          "type": "number",
          "format": "double"
        },
        "canBind": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CanBind"
        },
        "canCombat": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CanCombat"
        },
        "canLevitate": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CanLevitate"
        },
        "castOutdoor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CastOutdoor"
        },
        "expansion": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Expansion"
        },
        "fileName": {
          "$ref": "#/definitions/NullString"
        },
        "flagNeeded": {
          "type": "string",
          "x-go-name": "FlagNeeded"
        },
        "fogBlue": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogBlue"
        },
        "fogBlue1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogBlue1"
        },
        "fogBlue2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogBlue2"
        },
        "fogBlue3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogBlue3"
        },
        "fogBlue4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogBlue4"
        },
        "fogDensity": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogDensity"
        },
        "fogGreen": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogGreen"
        },
        "fogGreen1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogGreen1"
        },
        "fogGreen2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogGreen2"
        },
        "fogGreen3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogGreen3"
        },
        "fogGreen4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogGreen4"
        },
        "fogMaxClip": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMaxClip"
        },
        "fogMaxClip1": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMaxClip1"
        },
        "fogMaxClip2": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMaxClip2"
        },
        "fogMaxClip3": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMaxClip3"
        },
        "fogMaxClip4": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMaxClip4"
        },
        "fogMinClip": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMinClip"
        },
        "fogMinClip1": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMinClip1"
        },
        "fogMinClip2": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMinClip2"
        },
        "fogMinClip3": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMinClip3"
        },
        "fogMinClip4": {
          "type": "number",
          "format": "double",
          "x-go-name": "FogMinClip4"
        },
        "fogRed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogRed"
        },
        "fogRed1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogRed1"
        },
        "fogRed2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogRed2"
        },
        "fogRed3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogRed3"
        },
        "fogRed4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FogRed4"
        },
        "graveyardID": {
          "type": "number",
          "format": "double",
          "x-go-name": "GraveyardID"
        },
        "gravity": {
          "type": "number",
          "format": "double",
          "x-go-name": "Gravity"
        },
        "hotZone": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HotZone"
        },
        "instType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "InstType"
        },
        "longName": {
          "type": "string",
          "x-go-name": "LongName"
        },
        "mapFileName": {
          "$ref": "#/definitions/NullString"
        },
        "maxClients": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxClients"
        },
        "minLevel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinLevel"
        },
        "minStatus": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinStatus"
        },
        "note": {
          "$ref": "#/definitions/NullString"
        },
        "peqZone": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PeqZone"
        },
        "rainChance1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RainChance1"
        },
        "rainChance2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RainChance2"
        },
        "rainChance3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RainChance3"
        },
        "rainChance4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RainChance4"
        },
        "rainDuration1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RainDuration1"
        },
        "rainDuration2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RainDuration2"
        },
        "rainDuration3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RainDuration3"
        },
        "rainDuration4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RainDuration4"
        },
        "ruleset": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Ruleset"
        },
        "safeX": {
          "type": "number",
          "format": "double",
          "x-go-name": "SafeX"
        },
        "safeY": {
          "type": "number",
          "format": "double",
          "x-go-name": "SafeY"
        },
        "safeZ": {
          "type": "number",
          "format": "double",
          "x-go-name": "SafeZ"
        },
        "shortName": {
          "$ref": "#/definitions/NullString"
        },
        "shutdownDelay": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ShutdownDelay"
        },
        "sky": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Sky"
        },
        "skylock": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Skylock"
        },
        "snowChance1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SnowChance1"
        },
        "snowChance2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SnowChance2"
        },
        "snowChance3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SnowChance3"
        },
        "snowChance4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SnowChance4"
        },
        "snowDuration1": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SnowDuration1"
        },
        "snowDuration2": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SnowDuration2"
        },
        "snowDuration3": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SnowDuration3"
        },
        "snowDuration4": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SnowDuration4"
        },
        "suspendBuffs": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SuspendBuffs"
        },
        "timeType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimeType"
        },
        "timezone": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Timezone"
        },
        "type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Type"
        },
        "underworld": {
          "type": "number",
          "format": "double",
          "x-go-name": "Underworld"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        },
        "walkSpeed": {
          "type": "number",
          "format": "double",
          "x-go-name": "WalkSpeed"
        },
        "zType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ZType"
        },
        "zoneExpMultiplier": {
          "type": "number",
          "format": "double",
          "x-go-name": "ZoneExpMultiplier"
        },
        "zoneIDNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ZoneIDNumber"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ZoneExpansion": {
      "description": "ZoneExpansion represents the zoneExpansion table, Everquest is split into zoneExpansions",
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "bit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Bit"
        },
        "longName": {
          "type": "string",
          "x-go-name": "LongName"
        },
        "shortName": {
          "type": "string",
          "x-go-name": "ShortName"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ZoneExpansions": {
      "description": "ZoneExpansions is an array of zoneExpansion",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ZoneExpansion"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "ZoneLevel": {
      "description": "ZoneLevel is a cache table used to get levels a zone is available for",
      "type": "object",
      "properties": {
        "levels": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Levels"
        },
        "mapAspect": {
          "type": "number",
          "format": "double",
          "x-go-name": "MapAspect"
        },
        "mapXOffset": {
          "type": "number",
          "format": "double",
          "x-go-name": "MapXOffset"
        },
        "mapYOffset": {
          "type": "number",
          "format": "double",
          "x-go-name": "MapYOffset"
        },
        "zoneID": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ZoneID"
        }
      },
      "x-go-package": "github.com/xackery/xegony/model"
    },
    "Zones": {
      "description": "Zones is an array of zone",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Zone"
      },
      "x-go-package": "github.com/xackery/xegony/model"
    }
  },
  "responses": {
    "AccountResponse": {
      "description": "AccountResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Account"
      },
      "headers": {
        "account": {}
      }
    },
    "AccountsBySearchResponse": {
      "description": "AccountsBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Accounts"
      },
      "headers": {
        "accounts": {},
        "page": {},
        "search": {}
      }
    },
    "AccountsResponse": {
      "description": "AccountsResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Accounts"
      },
      "headers": {
        "accounts": {},
        "page": {}
      }
    },
    "CharacterResponse": {
      "description": "CharacterResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Character"
      },
      "headers": {
        "character": {}
      }
    },
    "CharactersBySearchResponse": {
      "description": "CharactersBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Characters"
      },
      "headers": {
        "characters": {},
        "page": {},
        "search": {}
      }
    },
    "CharactersResponse": {
      "description": "CharactersResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Characters"
      },
      "headers": {
        "characters": {},
        "page": {}
      }
    },
    "ConfigResponse": {
      "description": "ConfigResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Config"
      },
      "headers": {
        "config": {}
      }
    },
    "ConfigsBySearchResponse": {
      "description": "ConfigsBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Configs"
      },
      "headers": {
        "configs": {},
        "page": {},
        "search": {}
      }
    },
    "ConfigsResponse": {
      "description": "ConfigsResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Configs"
      },
      "headers": {
        "configs": {},
        "page": {}
      }
    },
    "RaceResponse": {
      "description": "RaceResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Race"
      },
      "headers": {
        "race": {}
      }
    },
    "RacesBySearchResponse": {
      "description": "RacesBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Races"
      },
      "headers": {
        "page": {},
        "races": {},
        "search": {}
      }
    },
    "RacesResponse": {
      "description": "RacesResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Races"
      },
      "headers": {
        "page": {},
        "races": {}
      }
    },
    "SpellResponse": {
      "description": "SpellResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Spell"
      },
      "headers": {
        "spell": {}
      }
    },
    "SpellsBySearchResponse": {
      "description": "SpellsBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Spells"
      },
      "headers": {
        "page": {},
        "search": {},
        "spells": {}
      }
    },
    "SpellsResponse": {
      "description": "SpellsResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Spells"
      },
      "headers": {
        "page": {},
        "spells": {}
      }
    },
    "UserGoogleStartResponse": {
      "description": "UserGoogleStartResponse is what endpoints respond with",
      "headers": {
        "redirectURL": {
          "type": "string"
        }
      }
    },
    "UserResponse": {
      "description": "UserResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/User"
      },
      "headers": {
        "user": {}
      }
    },
    "UsersBySearchResponse": {
      "description": "UsersBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Users"
      },
      "headers": {
        "page": {},
        "search": {},
        "users": {}
      }
    },
    "UsersResponse": {
      "description": "UsersResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Users"
      },
      "headers": {
        "page": {},
        "users": {}
      }
    },
    "ZoneExpansionResponse": {
      "description": "ZoneExpansionResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/ZoneExpansion"
      },
      "headers": {
        "zoneExpansion": {}
      }
    },
    "ZoneExpansionsBySearchResponse": {
      "description": "ZoneExpansionsBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/ZoneExpansions"
      },
      "headers": {
        "page": {},
        "search": {},
        "zoneExpansions": {}
      }
    },
    "ZoneExpansionsResponse": {
      "description": "ZoneExpansionsResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/ZoneExpansions"
      },
      "headers": {
        "page": {},
        "zoneExpansions": {}
      }
    },
    "ZoneResponse": {
      "description": "ZoneResponse is what endpoints respond with",
      "schema": {
        "$ref": "#/definitions/Zone"
      },
      "headers": {
        "zone": {}
      }
    },
    "ZonesBySearchResponse": {
      "description": "ZonesBySearchResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Zones"
      },
      "headers": {
        "page": {},
        "search": {},
        "zones": {}
      }
    },
    "ZonesResponse": {
      "description": "ZonesResponse is a general response to a request",
      "schema": {
        "$ref": "#/definitions/Zones"
      },
      "headers": {
        "page": {},
        "zones": {}
      }
    }
  },
  "securityDefinitions": {
    "apiKey": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "apiKey": []
    }
  ],
  "x-meta-array": [
    "value1",
    "value2"
  ],
  "x-meta-array-obj": [
    {
      "name": "obj",
      "value": "field"
    }
  ],
  "x-meta-value": "value"
}