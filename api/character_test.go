package api

import (
	"testing"
)

func TestCharacterEndpoints(t *testing.T) {
	initializeServer(t)

	tests := []Endpoint{
		Endpoint{
			name:         "CreateCharacterInvalidNameReq",
			path:         "/api/character",
			method:       "POST",
			body:         `{"accountId":1}`,
			responseCode: 400,
			response:     `{"message":"String length must be greater than or equal to 3","fields":{"name":"String length must be greater than or equal to 3"}}`,
			useAuth:      true,
		},
		Endpoint{
			name:         "CreateCharacterFailDecode",
			path:         "/api/character",
			method:       "POST",
			body:         `{"id":"abc",name":"Test"}`,
			responseCode: 405,
			response:     `{"message":"Failed to decode body"}`,
			useAuth:      true,
		},
		Endpoint{
			name:         "CreateCharacterMinNameFail",
			path:         "/api/character",
			method:       "POST",
			body:         `{"accountId":1,"name":"Te"}`,
			responseCode: 400,
			response:     ``,
			useAuth:      true,
		},
		Endpoint{
			name:         "CreateCharacterMaxNameFail",
			path:         "/api/character",
			method:       "POST",
			body:         `{"name":"Tsidofjsdoifjsdofijsdofijsdofisjdfoisj","accountId":1,"image":"http://lfg.link/image.png","thumbnail":"http://lfg.link/thumbnail.png"}`,
			responseCode: 400,
			response:     `{"message":"String length must be less than or equal to 32","fields":{"name":"String length must be less than or equal to 32"}}`,
			useAuth:      true,
		},
		Endpoint{
			name:         "CreateCharacterBadCharFail",
			path:         "/api/character",
			method:       "POST",
			body:         `{"accountId":1,"name":"Tsidofjs.øˆ∆ƒøˆ∆∂","image":"http://lfg.link/image.png","thumbnail":"http://lfg.link/thumbnail.png"}`,
			responseCode: 400,
			response:     `{"message":"Does not match pattern '^[a-zA-Z]*$'","fields":{"name":"Does not match pattern '^[a-zA-Z]*$'"}}`,
			useAuth:      true,
		},
		Endpoint{
			name:         "CreateCharacterNotAdmin",
			path:         "/api/character",
			method:       "POST",
			body:         `{"name":"Test","image":"http://lfg.link/image.png","thumbnail":"http://lfg.link/thumbnail.png"}`,
			responseCode: 401,
			response:     `{"message":"No Token Provided"}`,
			useAuth:      false,
		},
		Endpoint{
			name:         "CreateCharacter",
			path:         "/api/character",
			method:       "POST",
			body:         `{"name":"Test","accountId":1}`,
			responseCode: 201,
			response:     `{"id":1,"accountId":1,"name":"Test","lastName":"","title":"","level":0,"class":0,"zoneId":0}`,
			useAuth:      true,
		},
		Endpoint{
			name:         "GetCharacterInvalidCharacterId",
			path:         "/api/character/invalid",
			method:       "GET",
			body:         "",
			responseCode: 400,
			response:     `{"message":"characterId argument is required: Invalid arguments provided"}`,
			useAuth:      false,
		},
		Endpoint{
			name:         "GetCharacterNoResults",
			path:         "/api/character/2",
			method:       "GET",
			body:         "",
			responseCode: 200,
			response:     ``,
			useAuth:      false,
		},
		Endpoint{
			name:         "GetCharacter",
			path:         "/api/character/1",
			method:       "GET",
			body:         "",
			responseCode: 200,
			response:     `{"id":1,"accountId":0,"name":"Test","lastName":"","title":"","level":0,"class":0,"zoneId":0}`,
			useAuth:      false,
		},
		Endpoint{
			name:         "NoTokenEditCharacter",
			path:         "/api/character/invalid",
			method:       "PUT",
			body:         `{"id":1,"name":"Test2","image":"http://lfg.link/image.png","thumbnail":"http://lfg.link/thumbnail.png"}`,
			responseCode: 401,
			response:     `{"message":"No Token Provided"}`,
			useAuth:      false,
		},
		Endpoint{
			name:         "InvalidEditCharacter",
			path:         "/api/character/invalid",
			method:       "PUT",
			body:         `{"id":1,"name":"Test2","image":"http://lfg.link/image.png","thumbnail":"http://lfg.link/thumbnail.png"}`,
			responseCode: 400,
			response:     `{"message":"characterId argument is required: Invalid arguments provided"}`,
			useAuth:      true,
		},
		Endpoint{
			name:         "RequestFailEditCharacter",
			path:         "/api/character/4",
			method:       "PUT",
			body:         `{"id":1,"name":"Test2","image":"http://lfg.link/image.png","thumbnail":"http://lfg.link/thumbnail.png"}`,
			responseCode: 400,
			response:     `{"message":"Does not match pattern '^[a-zA-Z]*$'","fields":{"name":"Does not match pattern '^[a-zA-Z]*$'"}}`,
			useAuth:      true,
		},

		Endpoint{
			name:         "EditCharacter",
			path:         "/api/character/1",
			method:       "PUT",
			body:         `{"id":1,"accountId":1,"name":"TestTwo","image":"http://lfg.link/image.png","thumbnail":"http://lfg.link/thumbnail.png"}`,
			responseCode: 200,
			response:     `{"id":1,"accountId":1,"name":"TestTwo","lastName":"","title":"","level":0,"class":0,"zoneId":0}`,
			useAuth:      true,
		},
		Endpoint{
			name:         "NoContentEditCharacter",
			path:         "/api/character/1",
			method:       "PUT",
			body:         `{"id":1,"name":"TestTwo","image":"http://lfg.link/image.png","thumbnail":"http://lfg.link/thumbnail.png"}`,
			responseCode: 304,
			response:     ``,
			useAuth:      true,
		},
		Endpoint{
			name:         "EditCharacterInvalid",
			path:         "/api/character/1",
			method:       "PUT",
			body:         `{"id":"abc",name":"Test"}`,
			responseCode: 405,
			response:     `{"message":"Request error: Failed to decode body"}`,
			useAuth:      true,
		},
		Endpoint{
			name:         "ListCharacter",
			path:         "/api/character",
			method:       "GET",
			body:         "",
			responseCode: 200,
			response:     `[{"id":1,"accountId":0,"name":"TestTwo","lastName":"","title":"","level":0,"class":0,"zoneId":0}]`,
			useAuth:      false,
		},
		Endpoint{
			name:         "InvalidIdDeleteCharacter",
			path:         "/api/character/{invalid}",
			method:       "DELETE",
			body:         "",
			responseCode: 400,
			response:     `{"message":"characterId argument is required: Invalid arguments provided"}`,
			useAuth:      true,
		},
		Endpoint{
			name:         "RequestFailDeleteCharacter",
			path:         "/api/character/3",
			method:       "DELETE",
			body:         "",
			responseCode: 304,
			response:     ``,
			useAuth:      true,
		},
		Endpoint{
			name:         "DeleteCharacterNotLoggedIn",
			path:         "/api/character/1",
			method:       "DELETE",
			body:         "",
			responseCode: 401,
			response:     `{"message":"No Token Provided"}`,
			useAuth:      false,
		},
		Endpoint{
			name:         "DeleteCharacter",
			path:         "/api/character/1",
			method:       "DELETE",
			body:         "",
			responseCode: 204,
			response:     ``,
			useAuth:      true,
		},
	}

	for _, test := range tests {
		doHttpTest(test, t)
	}
}
