package api

import (
	"testing"
)

func TestAccountEndpoints(t *testing.T) {
	initializeServer(t)

	tests := []Endpoint{
		Endpoint{
			name:         "CreateAccountInvalidNameReq",
			path:         "/api/account",
			method:       "POST",
			body:         `{"accountId":1}`,
			responseCode: 400,
			response:     `{"message":"String length must be greater than or equal to 3","fields":{"name":"String length must be greater than or equal to 3"}}`,
			useAuth:      true,
		},
		Endpoint{
			name:         "CreateAccountFailDecode",
			path:         "/api/account",
			method:       "POST",
			body:         `{"id":"abc",name":"Test"}`,
			responseCode: 405,
			response:     `{"message":"Failed to decode body"}`,
			useAuth:      true,
		},
		Endpoint{
			name:         "CreateAccountMinNameFail",
			path:         "/api/account",
			method:       "POST",
			body:         `{"accountId":1,"name":"Te"}`,
			responseCode: 400,
			response:     ``,
			useAuth:      true,
		},
		Endpoint{
			name:         "CreateAccountMaxNameFail",
			path:         "/api/account",
			method:       "POST",
			body:         `{"name":"Tsidofjsdoifjsdofijsdofijsdofisjdfoisj","accountId":1,"image":"http://lfg.link/image.png","thumbnail":"http://lfg.link/thumbnail.png"}`,
			responseCode: 400,
			response:     `{"message":"String length must be less than or equal to 30","fields":{"name":"String length must be less than or equal to 30"}}`,
			useAuth:      true,
		},
		Endpoint{
			name:         "CreateAccountBadCharFail",
			path:         "/api/account",
			method:       "POST",
			body:         `{"accountId":1,"name":"Tsidofjs.øˆ∆ƒøˆ∆∂","image":"http://lfg.link/image.png","thumbnail":"http://lfg.link/thumbnail.png"}`,
			responseCode: 400,
			response:     `{"message":"Does not match pattern '^[a-zA-Z]*$'","fields":{"name":"Does not match pattern '^[a-zA-Z]*$'"}}`,
			useAuth:      true,
		},
		Endpoint{
			name:         "CreateAccountNotAdmin",
			path:         "/api/account",
			method:       "POST",
			body:         `{"name":"Test","image":"http://lfg.link/image.png","thumbnail":"http://lfg.link/thumbnail.png"}`,
			responseCode: 401,
			response:     `{"message":"No Token Provided"}`,
			useAuth:      false,
		},
		Endpoint{
			name:         "CreateAccount",
			path:         "/api/account",
			method:       "POST",
			body:         `{"name":"Test","status":10}`,
			responseCode: 201,
			response:     `{"id":2,"status":10,"name":"Test"}`,
			useAuth:      true,
		},
		Endpoint{
			name:         "GetAccountInvalidAccountId",
			path:         "/api/account/invalid",
			method:       "GET",
			body:         "",
			responseCode: 400,
			response:     `{"message":"accountId argument is required: Invalid arguments provided"}`,
			useAuth:      false,
		},
		Endpoint{
			name:         "GetAccountNoResults",
			path:         "/api/account/2",
			method:       "GET",
			body:         "",
			responseCode: 200,
			response:     ``,
			useAuth:      false,
		},
		Endpoint{
			name:         "GetAccount",
			path:         "/api/account/1",
			method:       "GET",
			body:         "",
			responseCode: 200,
			response:     `{"id":1,"status":200,"name":"Shin"}`,
			useAuth:      false,
		},
		Endpoint{
			name:         "NoTokenEditAccount",
			path:         "/api/account/invalid",
			method:       "PUT",
			body:         `{"id":1,"name":"Test2","image":"http://lfg.link/image.png","thumbnail":"http://lfg.link/thumbnail.png"}`,
			responseCode: 401,
			response:     `{"message":"No Token Provided"}`,
			useAuth:      false,
		},
		Endpoint{
			name:         "InvalidEditAccount",
			path:         "/api/account/invalid",
			method:       "PUT",
			body:         `{"id":1,"name":"Test2","image":"http://lfg.link/image.png","thumbnail":"http://lfg.link/thumbnail.png"}`,
			responseCode: 400,
			response:     `{"message":"accountId argument is required: Invalid arguments provided"}`,
			useAuth:      true,
		},
		Endpoint{
			name:         "RequestFailEditAccount",
			path:         "/api/account/4",
			method:       "PUT",
			body:         `{"id":1,"name":"Test2","image":"http://lfg.link/image.png","thumbnail":"http://lfg.link/thumbnail.png"}`,
			responseCode: 400,
			response:     `{"message":"Does not match pattern '^[a-zA-Z]*$'","fields":{"name":"Does not match pattern '^[a-zA-Z]*$'"}}`,
			useAuth:      true,
		},

		Endpoint{
			name:         "EditAccount",
			path:         "/api/account/2",
			method:       "PUT",
			body:         `{"id":1,"accountId":1,"name":"TestTwo","image":"http://lfg.link/image.png","thumbnail":"http://lfg.link/thumbnail.png"}`,
			responseCode: 200,
			response:     `{"id":2,"status":0,"name":"TestTwo"}`,
			useAuth:      true,
		},
		Endpoint{
			name:         "NoContentEditAccount",
			path:         "/api/account/2",
			method:       "PUT",
			body:         `{"id":2,"status":0,"name":"TestTwo"}`,
			responseCode: 304,
			response:     ``,
			useAuth:      true,
		},
		Endpoint{
			name:         "EditAccountInvalid",
			path:         "/api/account/1",
			method:       "PUT",
			body:         `{"id":"abc",name":"Test"}`,
			responseCode: 405,
			response:     `{"message":"Request error: Failed to decode body"}`,
			useAuth:      true,
		},
		Endpoint{
			name:         "ListAccount",
			path:         "/api/account",
			method:       "GET",
			body:         "",
			responseCode: 200,
			response:     `[{"id":2,"status":0,"name":"TestTwo"},{"id":1,"status":200,"name":"Shin"}]`,
			useAuth:      false,
		},
		Endpoint{
			name:         "InvalidIdDeleteAccount",
			path:         "/api/account/{invalid}",
			method:       "DELETE",
			body:         "",
			responseCode: 400,
			response:     `{"message":"accountId argument is required: Invalid arguments provided"}`,
			useAuth:      true,
		},
		Endpoint{
			name:         "RequestFailDeleteAccount",
			path:         "/api/account/3",
			method:       "DELETE",
			body:         "",
			responseCode: 304,
			response:     ``,
			useAuth:      true,
		},
		Endpoint{
			name:         "DeleteAccountNotLoggedIn",
			path:         "/api/account/1",
			method:       "DELETE",
			body:         "",
			responseCode: 401,
			response:     `{"message":"No Token Provided"}`,
			useAuth:      false,
		},
		Endpoint{
			name:         "DeleteAccount",
			path:         "/api/account/1",
			method:       "DELETE",
			body:         "",
			responseCode: 204,
			response:     ``,
			useAuth:      true,
		},
	}

	for _, test := range tests {
		doHttpTest(test, t)
	}
}
